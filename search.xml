<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单了解Less]]></title>
    <url>%2F2018%2F09%2F21%2Fless%2F</url>
    <content type="text"><![CDATA[less目标 什么是预编译脚本语言less less的基本语法 知识内容什么是less作为一门标记性语言，CSS 的语法相对简单，对使用者的要求较低，但同时也带来一些问题：CSS需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码，造成这些困难的很大原因源于 CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。LESS 为 Web 开发者带来了福音，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，LESS 可以让我们用更少的代码做更多的事情。 less的安装 安装nodejs https://nodejs.org/dist/ 可选择版本(6.0)。 检查是否安装成功，使用cmd命令 node -v 查看版本即可。 基于nodejs安装less: 在线安装：使用cmd命令 npm install -g less 离线安装:a.找到C盘根目录下的用户或User文件夹打开b.找到当前计算机使用的用户文件夹打开c.找到隐藏文件夹AppData打开d.找到Roaming文件夹打开e.找到npm文件夹打开，该文件夹为基于nodejs程序目录f.把npm.zip文件解压到该目录 基于koala软件也可以编译LESS; less编译本质上，LESS 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。LESS 并没有裁剪 CSS 原有的特性，更不是用来取代 CSS 的，而是在现有 CSS 语法的基础上，为 CSS 加入程序式语言的特性。 1lessc 目标文件地址 生成文件地址 在开发过程当中如果要预览less，每次都要执行编译命令，为了方便可以使用部分编辑器中less自动编译功能。 点击文件打开菜单，选择设置选项 选择工具当中的文件监听选项 点击右上角加号按钮，选择less后弹出对话框，点击确定即可。less的语法 less基本语法 变量 12345678910111213@mainColor:#e92323;@className:box;div&#123; background: @mainColor;&#125;a:hover&#123; color: @mainColor;&#125;//变量用于字符拼接使用方法.@&#123;className&#125;&#123; color: @mainColor;&#125; 混入(mixin) 1234567.borderRadius(@width:100px)&#123; border-radius: @width; -webkit-border-radius:@width; -moz-border-radius:@width; -o-border-radius:@width; -ms-border-radius:@width;&#125; 嵌套 12345678910111213141516171819202122.wjs_app&#123; display: block; img&#123; display: none; &#125; /*需要连接的情况：&amp;*/ &amp;:hover&#123; img&#123; display: block; position: absolute; left: 50%; margin-left:-60px; border: 1px solid #ccc; border-top: none; top:40px; z-index: 100000; &#125; &#125; &gt; div&#123; display: block; &#125;&#125; 导入 1@import &quot;variables&quot;; 运算&amp;内置函数 api地址：http://lesscss.cn/functions/#functions-overview 中文：http://www.css88.com/doc/less/functions/#color-operations 123456789101112/*运算*/@num:5;ul&#123; width: 100%*@num; li&#123; width: 100%/@num; color: red+yellow+blue; background: gray*0.3; /*内置函数*/ border-color: darken(red,20%); &#125;&#125; less预览1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel="stylesheet" type="text/less" href="index.less"&gt; &lt;script src="less.min.js"&gt;&lt;/script&gt; &lt;script&gt; less.watch(); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!--1.在浏览器端直接使用less文件预览 type="text/less" --&gt; &lt;!--2.浏览器无法直接使用less类型的文件，无法解析--&gt; &lt;!--3.转换成css,需要js插件支持--&gt; &lt;!--4.下载插件 https://github.com/less/less.js/tree/master/dist --&gt; &lt;!--5.less.js会异步加载less文件的内容，再去解析成css,然后追加到style--&gt; &lt;!--6.必须使用HTTP形式打开页面，不要以file形式打开--&gt; &lt;!--7.更改完成之后每次要刷新，可以配置less监听，自动刷新页面预览--&gt; &lt;!--8.需要js配置 less.watch() --&gt; &lt;div class="box2"&gt;test&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 命名空间和访问器（不要与CSS@namespace或命名空间选择器混淆）。 有时，您可能希望将mixin分组，用于组织目的，或者仅提供一些封装。你可以在Less中直观地做到这一点。假设你想捆绑一些mixins和变量#bundle，以便以后重用或分发： # bundle(){ .button { display: block; border: 1px solid black; background-color: grey; &amp;:hover { background-color: white; } } .tab { ... } .citation { ... } } 现在如果我们想.button在我们的课程中混音#header a，我们可以这样做： a &#123;123color: orange;#bundle.button(); // can also be written as #bundle &gt; .button&#125; 总结less是一门预编译脚本语法，使用它用来提高css的可维护性。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web移动端]]></title>
    <url>%2F2018%2F05%2F05%2Fweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[#移动端 移动端现状 移动端主流浏览器基本是基于webkit内核，如果做兼容私有前缀webkit 厂商的分辨率并不是我们的开发单位，还是PX 一个参考开发单位的表格 物理像素比 dpr 预览页面在移动端 谷歌浏览器的模拟器 真机预览 2.1 放到服务器，本地服务，手机需要访问服务器，手机和电脑需要在一个局域网内。 2.2 放到服务器，外网服务，需要网络。 视口 视口容器 视觉窗口 可视窗口 viewport 它是介于 浏览器窗口 和 页面 之间的区域容器，承载网页，是虚拟的容器。 视口其实有默认的宽度 980px ,为了能浏览到全部的网页内容，默认的缩放。 设置视口 去适配移动端适配目标： 不能被缩放 宽度和设备宽度一致 不允许用户自行缩放设置视口: &lt;meta name=&quot;viewport&quot;&gt; 在head，尽量前面，优先解析 设置功能：使用content属性，属性值 width 设置视口宽度 单位px device-width 当前设备宽度 height 设置视口高度 单位px initial-scale 默认缩放比例 1.0 原始比例 user-scalable 是否允许用户自行缩放 yes no 1 0 maximum-scale 最大允许缩放比例 0-10 minimum-scale 最小允许缩放比例 0-10标准视口：1&lt;meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=0"&gt; 非固定像素布局 流式布局（百分比布局） 相对单位 父容器 特点：自适应，内容向两侧填充，液体的形态，称为 流式布局 图片失真问题 2倍图 可以解决失真问题 图片：高宽设置 背景：background-size 为什么？ 物理像素点：最小的显示颗粒 物理像素比：device-pixel pixel ratio DPR 一个PX宽度能放下几个物理像素 设计稿尺寸 设计稿是640px，保证图片清晰 参照iphone4s手机640px宽度 750px参照了iphone6 base.css12345678910111213141516*,*::before,*::after&#123; /*所有元素需要的属性*/ /*让宽度的计算从边框开始 防止非固定像素布局内容溢出产生横向滚动条*/ -webkit-box-sizing: border-box; box-sizing: border-box;&#125;a&#123; /*去除点击高亮效果 transparent颜色 完全透明*/ -webkit-tap-highlight-color: transparent;&#125;input,textarea&#123; /*针对移动端 去除默认特殊效果*/ -webkit-appearance: none;&#125; 触摸事件知识内容触摸事件 事件 说明 touchstart 当手指触碰屏幕时候触发该事件 touchmove 当手指在屏幕上滑动时候触发该事件 touchend 当手指离开屏幕时触发该事件 touchcancel 当系统停止跟踪（被迫终止）触摸时候会触发。 触摸点集合 说明 targetTouches 目标元素的所有当前触摸点集合 changedTouches 目标元素的最新更改的触摸点集合 touches 页面上的所有触摸点集合 注意：在touchend事件的时候event只会记录changedtouches 点坐标 说明 pageX/pageY 基于页面大小的坐标 clientX/clientY 基于视口大小的坐标 screenX/screenY 基于屏幕大小的坐标 滑动效果原理1234567imageBox.addEventListener('touchmove', function (e) &#123; var moveX = e.touches[0].clientX; distanceX = moveX - startX; /*计算将要给图片盒子的定位*/ /*基于当前的定位去计算*/ var translateX = -index * width + distanceX;&#125;); 移动端二倍图知识内容移动端设备屏幕清晰度 物理像素点指的是屏幕显示的最小颗，是物理真实存在的。 所谓Retina是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。 而一个px的绝对（在开发中认为是绝对）长度能显示的物理像素点的个数，称为物理像素比，屏幕像素比。 二倍图的使用在标准的viewport设置中，使用二倍图来提高图片质量，解决在高清设备模糊问题。 123456789.box&#123; /*原始图片100*100px*/ background-size: 50px 50px;&#125;img&#123; /*原始图片100*100px*/ width: 50px; height: 50px;&#125; 总结在移动端屏幕的清晰度由物理像素比决定的，但是如果对于现实的图片质量不够，会造成图片模糊发虚现象，二倍图是决定这个问题的简单做法。 移动端滑动效果，就是使用touch事件，拖动元素。 响应式布局知识内容响应式布局概念 在移动互联日益成熟的时候，我们在桌面浏览器上开发的网页已经无法满足移动设备的阅读。 通常的做法是针对移动端单独做一套特定的版本。 但是如果终端越来越多那么你需要开发的版本就会越来越多（大屏移动设备普及）。 那么Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端。 响应式布局原理(媒体查询)CSS3中的Media Query（媒体查询）通过查询screen的宽度来指定某个宽度区间的网页布局。 划分设备 尺寸区间 超小屏幕（手机） 768px以下 小屏设备 768px-992px 中等屏幕 992px-1200px 宽屏设备 1200px以上 1234567891011121314151617181920@media screen and (max-width: 768px)&#123; 适配小屏幕内容尺寸.container&#123; width: 100%; &#125;&#125;@media screen and (min-width: 768px) and (max-width: 992px)&#123; .container&#123; width: 750px; &#125;&#125;@media screen and (min-width: 992px) and (max-width: 1200px)&#123; .container&#123; width: 970px; &#125;&#125;@media screen and (min-width: 1200px)&#123; .container&#123; width: 1170px; &#125;&#125; 对比针对移动端开发区别 开发方式 移动web开发+PC开发 响应式开发 应用场景 一般在已经有PC端的网站，开发移动站的时候，只需单独开发移动端 针对新建站的一些网站，现在要求适配移动端，所以就一套页面兼容各种终端，灵活 开发 针对性强，开发效率高 兼容各种终端，效率低 适配 只适配 移动设备，pad上体验相对较差 可以适配各种终端 效率 代码简洁，加载快 代码相对复杂，加载慢 总结移动web开发和响应式开发都是现在主流的开发模式。使用的都是流式布局，来适配不同设备。由于终端设备的多样化，新建站的站点会优先用响应式来开发。 bootstrap知识内容什么是UI框架user interface 用户界面，指的是有预制样式库，组件，插件，有一套比较完整的网页功能解决方案，称为UI框架 bootstrap是什么 简介： 作者：Twitter 公司两位前端工程师（mark otto &amp;&amp; jacob thornton）在2011发起开发完成的。 特点：组件简洁大方，代码规范精简，界面自定义性强。 目的：提高web开发效率。 文档： 中文官网 http://www.bootcss.com/ 官网 http://getbootstrap.com/ 学习文档 http://bootstrap.css88.com/ 优点： 有自己的生态圈，不断的更新迭代。 提供了一套简洁、直观、强悍的组件。 标准化的html+css编码规范。 让开发更简单，提高了开发的效率。 注意：虽然界面组件样式已经定义好了，但是扩展性相对较强，也就是说我们还可以自定义，修改默认样式。 版本: 2.x.x 停止维护,兼容性好,代码不够简洁，功能不够完善。 3.x.x 目前使用最多,稳定,但是放弃了IE6-IE7。对IE8支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的 WEB 项目。 bootstrap基本模板1234567891011121314151617181920212223242526272829303132333435363738&lt;!--h5文档申明--&gt;&lt;!DOCTYPE html&gt;&lt;!--文档语言申明 en zh-CN zh-tw --&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;!--文档编码申明--&gt; &lt;meta charset="utf-8"&gt; &lt;!--要求当前网页使用浏览器最高版本的内核来渲染--&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; &lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0"&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;!-- 优先加载和浏览器解释 --&gt; &lt;title&gt;title&lt;/title&gt; &lt;!-- Bootstrap 核心样式--&gt; &lt;link href="../lib/bootstrap/css/bootstrap.css" rel="stylesheet"&gt; &lt;!-- html5shiv 和 respond 分别用来解决IE8版本浏览器不支持 H5标签和媒体查询的 不兼容问题--&gt; &lt;!-- HTML5 shiv and Respond.js for IE8 support of HTML5 elements and media queries --&gt; &lt;!-- 警告：不能以file形式打开，本地打开。最好http://打开 --&gt; &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt; &lt;!-- 在 IE 9 一下引入--&gt; &lt;!--[if lt IE 9]&gt; &lt;script src="../lib/html5shiv/html5shiv.min.js"&gt;&lt;/script&gt; &lt;script src="../lib/respond/respond.min.js"&gt;&lt;/script&gt; &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;!--TODO--&gt;&lt;!-- bootstrap依赖jquery--&gt;&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;&lt;script src="../lib/jquery/jquery.min.js"&gt;&lt;/script&gt;&lt;!-- bootstrap js 核心文件--&gt;&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;&lt;script src="../lib/bootstrap/js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; bootstrap常用类 container container-fluid row col-*-* col-*-offset-* col-*-pull-* col-*-push-* pull-left pull-right text-center text-left text-right 怎么使用组件查询官方文档 组件的HTML模板代码结构分析 写一份和组件一致的样式选择器修改预制样式为产品需求样式 检查响应式是否符合产品需求，不满足自行修改 总结bootstrap是一个完整的组件库，包含html,css,js的框架，能够快速的搭建响应式站点。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器同源政策及其规避方法]]></title>
    <url>%2F2017%2F06%2F08%2F%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[浏览器同源政策及其规避方法浏览器安全的基石是”同源政策”（same-origin policy）。很多开发者都知道这一点，但了解得不全面。 本文详细介绍”同源政策”的各个方面，以及如何规避它。 含义 1995年同源策略有Netscape公司引入浏览器，目前所有浏览器都实行这个政策。最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。 协议相同 域名相同 端口相同 例子 举例来说，http://www.example.com/dir/page.html这个网址，协议是http://，域名是www.example.com，端口是80（默认端口可以省略）。它的同源情况如下。 1234http://www.example.com/dir2/other.html：同源http://example.com/dir/other.html：不同源（域名不同）http://v2.www.example.com/dir/other.html：不同源（域名不同）http://www.example.com:81/dir/other.html：不同源（端口不同） 目的 同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。 限制范围 随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制 12345（1） Cookie、LocalStorage 和 IndexDB 无法读取。 （2） DOM 无法获得。（3） AJAX 请求不能发送。 ##cookie Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享 Cookie。 举例来说，A网页是http://w1.example.com/a.html，B网页是http://w2.example.com/b.html，那么只要设置相同的document.domain，两个网页就可以共享Cookie。 123456document.domain = &apos;example.com&apos;;使用条件： 有其他页面 window 对象的引用。 二级域名相同。 协议相同。 端口相同。 现在，A网页通过脚本设置一个 Cookie。 1document.cookie = &quot;test1=hello&quot;; B网页就可以读到这个 Cookie。 1var allCookie = document.cookie; 注意，这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexDB 无法通过这种方法，规避同源政策，而要使用下文介绍的PostMessage API。 另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如.example.com。 1Set-Cookie: key=value; domain=.example.com; path=/ 这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。 iframe如果两个网页不同源，就无法拿到对方的DOM。典型的例子是iframe窗口和window.open方法打开的窗口，它们与父窗口无法通信。 比如，父窗口运行下面的命令，如果iframe窗口不是同源，就会报错。 12document.getElementById(&quot;myIFrame&quot;).contentWindow.document// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame. 上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。 反之亦然，子窗口获取主窗口的DOM也会报错。 12window.parent.document.body// 报错 如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源政策，拿到DOM。 对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题。 片段识别符（fragment identifier） 片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如http://example.com/x.html#fragment的#fragment。如果只是改变片段标识符，页面不会重新刷新 父窗口可以把信息，写入子窗口的片段标识符。 12var src = originURL + &apos;#&apos; + data;document.getElementById(&apos;myIFrame&apos;).src = src; 子窗口通过监听hashchange事件得到通知。 123456window.onhashchange = checkMessage;function checkMessage() &#123; var message = window.location.hash; // ...&#125; 同样的，子窗口也可以改变父窗口的片段标识符。 1parent.location.href= target + &quot;#&quot; + hash; 接着，子窗口跳回一个与主窗口同域的网址。location = ‘http://parent.url.com/xxx.html&#39;; window.name​ 浏览器窗口有window.name属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。 父窗口先打开一个子窗口，载入一个不同源的网页，该网页将信息写入window.name属性。 1window.name = data; 接着，子窗口跳回一个与主窗口同域的网址。 1location = &apos;http://parent.url.com/xxx.html&apos;; 然后，主窗口就可以读取子窗口的window.name了。 1var data = document.getElementById(&apos;myFrame&apos;).contentWindow.name; 这种方法的优点是，window.name容量很大，可以放置非常长的字符串；缺点是必须监听子窗口window.name属性的变化，影响网页性能。 ​ window.postMessage​ 上面两种方法都属于破解，HTML5为了解决这个问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging） 这个API为window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。 举例来说，父窗口http://aaa.com向子窗口http://bbb.com发消息，调用postMessage方法就可以了。 12var popup = window.open(&apos;http://bbb.com&apos;, &apos;title&apos;);popup.postMessage(&apos;Hello World!&apos;, &apos;http://bbb.com&apos;); postMessage方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即”协议 + 域名 + 端口”。也可以设为*，表示不限制域名，向所有窗口发送。 父窗口和子窗口都可以通过message事件，监听对方的消息 123window.addEventListener(&apos;message&apos;, function(e) &#123; console.log(e.data);&#125;,false); message事件的事件对象event，提供以下三个属性 event.source：发送消息的窗口 event.origin: 消息发向的网址 event.data: 消息内容 下面的例子是，子窗口通过event.source属性引用父窗口，然后发送消息。 1234window.addEventListener(&apos;message&apos;, receiveMessage);function receiveMessage(event) &#123; event.source.postMessage(&apos;Nice to see you!&apos;, &apos;*&apos;);&#125; event.origin属性可以过滤不是发给本窗口的消息。 123456789window.addEventListener(&apos;message&apos;, receiveMessage);function receiveMessage(event) &#123; if (event.origin !== &apos;http://aaa.com&apos;) return; if (event.data === &apos;Hello World&apos;) &#123; event.source.postMessage(&apos;Hello&apos;, event.origin); &#125; else &#123; console.log(event.data); &#125;&#125; LocalStorage通过window.postMessage，读写其他窗口的 LocalStorage 也成为了可能。下面是一个例子，主窗口写入iframe子窗口的localStorage。 1234567window.onmessage = function(e) &#123; if (e.origin !== &apos;http://bbb.com&apos;) &#123; return; &#125; var payload = JSON.parse(e.data); localStorage.setItem(payload.key, JSON.stringify(payload.data));&#125;; 上面代码中，子窗口将父窗口发来的消息，写入自己的LocalStorage。 父窗口发送消息的代码如下。 123var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;var obj = &#123; name: &apos;Jack&apos; &#125;;win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, data: obj&#125;), &apos;http://bbb.com&apos;) 加强版的子窗口接收消息的代码如下。 1234567891011121314151617window.onmessage = function(e) &#123; if (e.origin !== &apos;http://bbb.com&apos;) return; var payload = JSON.parse(e.data); switch (payload.method) &#123; case &apos;set&apos;: localStorage.setItem(payload.key, JSON.stringify(payload.data)); break; case &apos;get&apos;: var parent = window.parent; var data = localStorage.getItem(payload.key); parent.postMessage(data, &apos;http://aaa.com&apos;); break; case &apos;remove&apos;: localStorage.removeItem(payload.key); break; &#125;&#125;; 加强版的父窗口发送消息代码如下。 12345678910var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;var obj = &#123; name: &apos;Jack&apos; &#125;;// 存入对象win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &apos;set&apos;, data: obj&#125;), &apos;http://bbb.com&apos;);// 读取对象win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &quot;get&quot;&#125;), &quot;*&quot;);window.onmessage = function(e) &#123; if (e.origin != &apos;http://aaa.com&apos;) return; // &quot;Jack&quot; console.log(JSON.parse(e.data).name); 本文摘自：阮一峰网络日志]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-视差滚动]]></title>
    <url>%2F2017%2F05%2F22%2FH5C3%2F13-%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[视差滚动目标 掌握stellar插件的使用 理解什么是视差滚动效果 知识内容视差滚动 描述 视差滚动（Parallax Scrolling）指网页滚动过程中，多层次的元素进行不同程度的移动，视觉上形成立体运动效果的网页展示技术主要核心就是前景和背景以不同的速度移动，从而创造出3D效果。这种效果可以给网站一个很好的补充。 特性 视差滚动效果酷炫，适合于个性展示的场合。 视差滚动徐徐展开，适合于娓娓道来，讲故事的场合。 视差滚动容易迷航，需要具备较强的导航功能。 原理 传统的网页的文字、图片、背景都是一起按照相同方向相同速度滚动的，而视差滚动则是在滚动的时候，内容和多层次的背景实现或不同速度，或不同方向的运动。有的时候也可以加上一些透明度、大小的动画来优化显示。利用background-attachment属性实现。 使用步骤 引用文件 12&lt;script src="jquery/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="jquery.stellar.min.js"&gt;&lt;/script&gt; html结构 123456789101112131415161718&lt;div class="content" id="content1"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class="content" id="content2"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class="content" id="content3" data-stellar-background-ratio="0.5"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class="content" id="content4" data-stellar-background-ratio="0.5"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class="content" id="content5" data-stellar-background-ratio="0.5"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class="content" id="content6" data-stellar-background-ratio="0.5"&gt; &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt; 基本样式 12345678910111213141516171819202122.content &#123; background-attachment: fixed; height: 400px;&#125;#content1 &#123; background-image: url("..");&#125;#content2 &#123; background-image: url("..");&#125;#content3 &#123; background-image: url("..");&#125;#content4 &#123; background-image: url("..");&#125;#content5 &#123; background-image: url("..");&#125;#content6 &#123; background-image: url("..");&#125; js初始化 1234$.stellar(&#123; horizontalScrolling: false, responsive: true&#125;); 参数解释 名称 说明 horizontalScrolling 和 verticalScrolling 该配置项用来设置视差效果的方向。horizontalScrolling设置水平方向，verticalScro设置垂直方向， 为布尔值，默认为true responsive 该配置项用来制定load或者resize时间触发时是否刷新页面，其值为布尔值，默认为false hideDistantElements 该配置项用来设置移出视线的元素是否隐藏，其值为布尔值，若不想隐藏则设置为false data-stellar-ratio=”2” 定义了此元素针对页面滚动的速度比率，比如，0.5为页面滚动的50%，2为页面滚动的200%，所以数值越大，你可以看到页面元素滚动速度越快。 data-stellar-background-ratio 该配置项用在单个元素中，其值为一个正数，用来改变被设置元素的影响速度。 例如 值为0.3时，则表示背景的滚动速度为正常滚动速度的0.3倍。如果值为小数时最好在样式表中设置 总结多层次的元素进行不同程度的移动，视觉上形成立体运动效果的网页展示技术]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12-拖拽上传]]></title>
    <url>%2F2017%2F05%2F21%2FH5C3%2F12-%E6%8B%96%E6%8B%BD%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[拖拽上传目标 掌握并使用拖拽事件 结合拖拽事件完成拖拽上传 知识内容拖拽事件 拖拽元素 ondrag 应用于拖拽元素，整个拖拽过程都会调用 ondragstart应用于拖拽元素，当拖拽开始时调用 ondragleave应用于拖拽元素，当鼠标离开拖拽元素时调用 ondragend应用于拖拽元素，当拖拽结束时调用 目标元素 ondragenter应用于目标元素，当拖拽元素进入时调用 ondragover应用于目标元素，当停留在目标元素上时调用 ondrop应用于目标元素，当在目标元素上松开鼠标时调用 ondragleave应用于目标元素，当鼠标离开目标元素时调用 拖拽上传1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; .box &#123; width: 200px; height: 200px; border: 1px dashed #ccc; line-height: 200px; text-align: center; color: #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="box"&gt;拖放图片到该区域&lt;/div&gt;&lt;script&gt; var box = document.querySelector('.box'); box.addEventListener('dragenter', function (e) &#123; /*禁用浏览器默认预览文件或下载文件操作*/ e.preventDefault(); &#125;); box.addEventListener('dragover', function (e) &#123; /*禁用浏览器默认预览文件或下载文件操作*/ e.preventDefault(); &#125;); box.addEventListener('drop', function (e) &#123; e.preventDefault(); /*第一个文件数据*/ var file = e.dataTransfer.files[0]; //console.log(file); /*把数据设置到表单数据中*/ var formData = new FormData(); formData.append('dragImage', file); /*通过ajax异步提交*/ var xhr = new XMLHttpRequest(); xhr.open('post','upload.php'); xhr.send(formData); xhr.onreadystatechange = function () &#123; if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; /*上传成功*/ console.log('ok'); var img = new Image(); img.src = xhr.responseText; document.querySelector('body').appendChild(img); &#125; &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结在支持H5的浏览器中可使用拖拽上传]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-离线缓存]]></title>
    <url>%2F2017%2F05%2F20%2FH5C3%2F11-%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[离线缓存目标 理解构建离线应用 知识内容离线缓存使用 关联缓存清单 1&lt;html manifest="demo.appcache"&gt;&lt;/html&gt; 配置缓存清单 123456789101112131415161718192021222324252627CACHE MANIFESTCACHE:#此部分写需要缓存的资源 （#是注释的意思）./images/img1.jpg./images/img2.jpg./images/img3.jpg./images/img4.jpg./images/img5.jpgNETWORK:#此部分要写需要有网络才可访问的资源，无网络刚不访问./js/main.js*FALLBACK:#当访问不到某个资源的情况下，自动由另一个资源替换./css/online.css ./css/offline.css./online.html ./offline.html ​` 优势 1、可配置需要缓存的资源 2、网络无连接应用仍可用 3、本地读取缓存资源，提升访问速度，增强用户体验 4、减少请求，缓解服务器负担 缓存清单 一个普通文本文件，其中列出了浏览器应缓存以供离线访问的资源，推荐使用.appcache为后缀名 例如我们创建了一个名为demo.appcache的文件，然后在需要应用缓存在页面的根元素(html)添加属性manifest=”demo.appcache”，路径要保证正确。 manifest文件格式 1、顶行写CACHE MANIFEST 2、CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等 3、NETWORK: 换行 指定需要在线访问的资源，可使用通配符 4、FALLBACK: 换行 当被缓存的文件找不到时的备用资源 其它 1、CACHE: 可以省略，这种情况下将需要缓存的资源写在CACHE MANIFEST 2、可以指定多个CACHE: NETWORK: FALLBACK:，无顺序限制 3、#表示注释，只有当demo.appcache文件内容发生改变时或者手动清除缓存后，才会重新缓存。 4、chrome 可以通过chrome://appcache-internals/工具和离线（offline）模式来调试管理应用缓存 总结HTML5中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个manifest文件。]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-本地存储]]></title>
    <url>%2F2017%2F05%2F19%2FH5C3%2F10-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%2F</url>
    <content type="text"><![CDATA[本地存储目标 掌握客户端存储技术 应用本地存储在开发中 知识内容document.cookie使用：121. 设置cookie数据：document.cookie = &apos;键=值;Expires=日期&apos;2. 获取cookie数据：document.cookie 1、如果没有设置有效期，会话结束就失效2、如果设置有效期，依据有效期时间失效3、在会话过程中，每次请求在报文的头部会携带cookie信息 window.sessionStorage使用：1234561.获取sessionStorage的长度：window.sessionStorage.length2.根据对应的索引去获取对应sessionStorage的key的值：window.sessionStorage.key(索引);3.添加/编辑sessionStorage的内容：window.sessionStorage.setItem(键,值);4.根据对应的key获取对应的的value：window.sessionStorage.getItem(键);5.根据对应的key删除记录：window.sessionStorage.removeItem(键);6.清空存储：window.sessionStorage.clear(); 1、生命周期为关闭浏览器窗口2、在同一个窗口(页面)下数据可以共享 window.localStorage使用：1234561.获取localStorage的长度：window.localStorage.length2.根据对应的索引去获取对应localStorage的key的值：window.localStorage.key(索引);3.添加/编辑localStorage的内容：window.localStorage.setItem(键,值);4.根据对应的key获取对应的的value：window.localStorage.getItem(键);5.根据对应的key删除记录：window.localStorage.removeItem(键);6.清空存储：window.localStorage.clear(); 1、永久生效，除非手动删除 关闭页面也会存在2、可以多窗口（页面）共享（同一浏览器可以共享） 总结 特性 cookie sessionStorage localStorage 数据生命期 默认关闭浏览器失效 页面会话期间可用 除非数据被清除，否则一直存在 存放数据大小 4K左右（因为每次http请求都会携带cookie） 一般5M或更大 约20M 与服务器通信 由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信 易用性 cookie需要自己封装setCookie，getCookie 可以用源生接口 共同点 都是保存在浏览器端，和服务器端的session机制不同]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-历史浏览记录]]></title>
    <url>%2F2017%2F05%2F19%2FH5C3%2F09-%E5%8E%86%E5%8F%B2%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[history目标 掌握新增API的使用 理解在单页面应用程序的使用 知识内容解释API pushState(data, title, url) 追加一条历史记录 data用于存储自定义数据，通常设为null title历史记录标题，基本上没有被支持，一般设为空 ​+ url 以当前域为基础增加一条历史记录，不可跨域设置 replaceState(data, title, url) 与pushState()基本相同，不同之处在于replaceState()，只是替换当前url，不会增加/减少历史记录。 popstate事件，当前进或后退时则触发 应用场景 在单页面应用程序中，改变地址栏，不发生跳转，使用异步更新网页局部内容 在单页面应用程序中，回退前进历史的时候，更新网页局部内容 常用在对用户体验性能要求较高，有需要去满足SEO的网站 总结在淘宝的搜索页使用这个技术 ，很好的提高了用户体验]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-自定义播放器]]></title>
    <url>%2F2017%2F05%2F19%2FH5C3%2F08-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%92%AD%E6%94%BE%E5%99%A8%2F</url>
    <content type="text"><![CDATA[自定义播放器目标 独立完成自定义播放器处理浏览器表现不一致问题 独立查找API完成自定义播放器功能 知识内容api 音频和视频API一致 方法 方法 描述 addTextTrack() 向音频/视频添加新的文本轨道 canPlayType() 检测浏览器是否能播放指定的音频/视频类型 load() 重新加载音频/视频元素 play() 开始播放音频/视频 pause() 暂停当前播放的音频/视频 属性 属性 描述 audioTracks 返回表示可用音轨的 AudioTrackList 对象 autoplay 设置或返回是否在加载完成后随即播放音频/视频 buffered 返回表示音频/视频已缓冲部分的 TimeRanges 对象 controller 返回表示音频/视频当前媒体控制器的 MediaController 对象 controls 设置或返回音频/视频是否显示控件（比如播放/暂停等） crossOrigin 设置或返回音频/视频的 CORS 设置 currentSrc 返回当前音频/视频的 URL currentTime 设置或返回音频/视频中的当前播放位置（以秒计） defaultMuted 设置或返回音频/视频默认是否静音 defaultPlaybackRate 设置或返回音频/视频的默认播放速度 duration 返回当前音频/视频的长度（以秒计） ended 返回音频/视频的播放是否已结束 error 返回表示音频/视频错误状态的 MediaError 对象 loop 设置或返回音频/视频是否应在结束时重新播放 mediaGroup 设置或返回音频/视频所属的组合（用于连接多个音频/视频元素） muted 设置或返回音频/视频是否静音 networkState 返回音频/视频的当前网络状态 paused 设置或返回音频/视频是否暂停 playbackRate 设置或返回音频/视频播放的速度 played 返回表示音频/视频已播放部分的 TimeRanges 对象 preload 设置或返回音频/视频是否应该在页面加载后进行加载 readyState 返回音频/视频当前的就绪状态 seekable 返回表示音频/视频可寻址部分的 TimeRanges 对象 seeking 返回用户是否正在音频/视频中进行查找 src 设置或返回音频/视频元素的当前来源 startDate 返回表示当前时间偏移的 Date 对象 textTracks 返回表示可用文本轨道的 TextTrackList 对象 videoTracks 返回表示可用视频轨道的 VideoTrackList 对象 volume 设置或返回音频/视频的音量 事件 事件 描述 abort 当音频/视频的加载已放弃时 canplay 当浏览器可以播放音频/视频时 canplaythrough 当浏览器可在不因缓冲而停顿的情况下进行播放时 durationchange 当音频/视频的时长已更改时 emptied 当目前的播放列表为空时 ended 当目前的播放列表已结束时 error 当在音频/视频加载期间发生错误时 loadeddata 当浏览器已加载音频/视频的当前帧时 loadedmetadata 当浏览器已加载音频/视频的元数据时 loadstart 当浏览器开始查找音频/视频时 pause 当音频/视频已暂停时 play 当音频/视频已开始或不再暂停时 playing 当音频/视频在已因缓冲而暂停或停止后已就绪时 progress 当浏览器正在下载音频/视频时 ratechange 当音频/视频的播放速度已更改时 seeked 当用户已移动/跳跃到音频/视频中的新位置时 seeking 当用户开始移动/跳跃到音频/视频中的新位置时 stalled 当浏览器尝试获取媒体数据，但数据不可用时 suspend 当浏览器刻意不获取媒体数据时 timeupdate 当目前的播放位置已更改时 volumechange 当音量已更改时 waiting 当视频由于需要缓冲下一帧而停止 细节注意1234567891011121314151617/*全屏操作后 自带的控制栏会显示 在显示的时候隐藏*/video::-webkit-media-controls &#123; display: none !important;&#125;.controls &#123; width: 700px; height: 40px; background-color: rgba(255, 255, 255, 0.2); border-radius: 4px; position: absolute; left: 50%; margin-left: -350px; bottom: 5px; /*比全屏的状态下的视频元素高*/ z-index: 100000000000; opacity: 1;&#125; 总结需求驱动开发者使用什么API]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-全屏操作]]></title>
    <url>%2F2017%2F05%2F18%2FH5C3%2F07-%E5%85%A8%E5%B1%8F%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[全屏操作目标 完成元素的全屏和取消全屏操作 理解私有前缀处理兼容问题 知识内容全屏操作API Node.requestFullScreen() 开启全屏显示 Node.cancelFullScreen() 关闭全屏显示 注意：cancelFullScreen() 的调用时document h5的api兼容问题 由于其兼容性原因，不同浏览器需要添加前缀如：webkit内核浏览器：webkitRequestFullScreen、webkitCancelFullScreen，如chrome浏览器。Gecko内核浏览器：mozRequestFullScreen、mozCancelFullScreen，如火狐浏览器。 document.isFullScreen检测当前是否处于全屏不同浏览器需要添加前缀document.webkitIsFullScreen、document.mozIsFullScreen 总结能够使用全屏操作 但是要注意 浏览器兼容问题]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-dom扩展]]></title>
    <url>%2F2017%2F05%2F18%2FH5C3%2F06-dom%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[dom扩展目标 能够使用H5扩展API完成页面效果 扩展内容获取元素12345678document.getElementsByClassName ('class'); //通过类名获取元素，以伪数组形式存在。document.querySelector('selector');//通过CSS选择器获取元素，符合匹配条件的第1个元素。document.querySelectorAll('selector'); //通过CSS选择器获取元素，以伪数组形式存在。 类名操作1234567891011Node.classList.add('class'); //添加classNode.classList.remove('class'); //移除classNode.classList.toggle('class'); //切换class，有则移除，无则添加Node.classList.contains('class'); //检测是否存在class 自定义属性 在HTML5中我们可以自定义属性，其格式如下data-*=”” 123456789101112131415161718192021222324252627&lt;div id="demo" data-my-name="itcast" data-age="10"&gt;&lt;!--1. 大家理解的自定义属性：自己定义的属性--&gt;&lt;!--2. 非标准属性：就是自定义属性--&gt;&lt;!--3. 像：name class id title alt 标准属性 反之 非标准--&gt;&lt;!--H5规范 用来存储数据的属性 --&gt;&lt;!--4. 以 data- 开始的属性认为是自定义属性 --&gt;&lt;!--5. 操作自定义属性注意些：--&gt;&lt;!--6. dataset对象 指定的是当前dom元素上的自定义属性的集合 --&gt;&lt;!--7. 获取自定义属性：dataset.属性名称 dataset[属性名称] --&gt;&lt;!--8. 设置自定义属性： dataset.属性名称 = 属性值 dataset[属性名称] = 属性值 --&gt;&lt;!--9. 自定义属性的名称遵从驼峰命名 --&gt;&lt;!--10. dom上的属性的定义 不支持大写 写了也转换成小写--&gt;&lt;script&gt;/* Node.dataset是以对象形式存在的，当我们为同一个DOM节点指定了多个自定义属性时， Node.dataset则存储了所有的自定义属性的值。 */var demo = document.querySelector(反馈);//获取//注：当我们如下格式设置时，则需要以驼峰格式才能正确获取var name = demo.dataset['myName'];var age = demo.dataset['age'];//设置demo.dataset['name'] = 'web developer';&lt;script/&gt; 总结在不使用第三方库的情况下，使用最便捷的方式操作DOM，完成页面效果]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-fullpage]]></title>
    <url>%2F2017%2F05%2F17%2FH5C3%2F05-fullpage%2F</url>
    <content type="text"><![CDATA[全屏切换目标 掌握fullpage的使用完成全屏切换效果 fullpage插件简单介绍 基于 jQuery 的插件，它能够帮你很方便、很轻松的制作出全屏网站。 支持鼠标滚动，支持前进后退和键盘控制，多个回调函数，支持手机、平板触摸事件，支持 CSS3 动画，支持窗口缩放，窗口缩放时自动调整，可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等。 参考文档：http://www.dowebok.com/demo/2014/77/ 使用步骤 引用文件 123&lt;link rel="stylesheet" href="css/jquery.fullPage.css"&gt;&lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="js/jquery.fullPage.js"&gt;&lt;/script&gt; html结构 1234567891011&lt;div id="fullpage"&gt; &lt;div class="section"&gt;第一屏&lt;/div&gt; &lt;div class="section"&gt;第二屏&lt;/div&gt; &lt;div class="section"&gt; &lt;div class="slide"&gt;第三屏的第一屏&lt;/div&gt; &lt;div class="slide"&gt;第三屏的第二屏&lt;/div&gt; &lt;div class="slide"&gt;第三屏的第三屏&lt;/div&gt; &lt;div class="slide"&gt;第三屏的第四屏&lt;/div&gt; &lt;/div&gt; &lt;div class="section"&gt;第四屏&lt;/div&gt;&lt;/div&gt; js初始化 123$(function()&#123; $('#fullpage').fullpage();&#125;); 参考api 配置 选项 类型 默认值 说明 verticalCentered 字符串 true 内容是否垂直居中 resize 布尔值 false 字体是否随着窗口缩放而缩放 slidesColor 数组 无 设置背景颜色 sectionsColor 数组 无 设置背景颜色 anchors 数组 无 定义锚链接 scrollingSpeed 整数 700 滚动速度，单位为毫秒 easing 字符串 easeInQuart 滚动动画方式 menu 布尔值 false 绑定菜单，设定的相关属性与 anchors 的值对应后，菜单可以控制滚动 navigation 布尔值 false 是否显示项目导航 navigationPosition 字符串 right 项目导航的位置，可选 left 或 right navigationColor 字符串 #000 项目导航的颜色 navigationTooltips 数组 空 项目导航的 tip slidesNavigation 布尔值 false 是否显示左右滑块的项目导航 slidesNavPosition 字符串 bottom 左右滑块的项目导航的位置，可选 top 或 bottom controlArrowColor 字符串 #fff 左右滑块的箭头的背景颜色 loopBottom 布尔值 false 滚动到最底部后是否滚回顶部 loopTop 布尔值 false 滚动到最顶部后是否滚底部 loopHorizontal 布尔值 true 左右滑块是否循环滑动 autoScrolling 布尔值 true 是否使用插件的滚动方式，如果选择 false，则会出现浏览器自带的滚动条 scrollOverflow 布尔值 false 内容超过满屏后是否显示滚动条 css3 布尔值 false 是否使用 CSS3 transforms 滚动 paddingTop 字符串 0 与顶部的距离 paddingBottom 字符串 0 与底部距离 fixedElements 字符串 无 normalScrollElements 无 keyboardScrolling 布尔值 true 是否使用键盘方向键导航 touchSensitivity 整数 5 continuousVertical 布尔值 false 是否循环滚动，与 loopTop 及 loopBottom 不兼容 animateAnchor 布尔值 true normalScrollElementTouchThreshold 整数 5 - 方法 名称 说明 moveSectionUp() 向上滚动 moveSectionDown() 向下滚动 moveTo(section, slide) 滚动到 moveSlideRight() slide 向右滚动 moveSlideLeft() slide 向左滚动 setAutoScrolling() 设置页面滚动方式，设置为 true 时自动滚动 setAllowScrolling() 添加或删除鼠标滚轮/触控板控制 setKeyboardScrolling() 添加或删除键盘方向键控制 setScrollingSpeed() 定义以毫秒为单位的滚动速度 回调函数 名称 说明 afterLoad 滚动到某一屏后的回调函数，接收 anchorLink 和 index 两个参数，anchorLink 是锚链接的名称，index 是序号，从1开始计算 onLeave 滚动前的回调函数，接收 index、nextIndex 和 direction 3个参数：index 是离开的“页面”的序号，从1开始计算；nextIndex 是滚动到的“页面”的序号，从1开始计算；direction 判断往上滚动还是往下滚动，值是 up 或 down。 afterRender 页面结构生成后的回调函数，或者说页面初始化完成后的回调函数 afterSlideLoad 滚动到某一水平滑块后的回调函数，与 afterLoad 类似，接收 anchorLink、index、slideIndex、direction 4个参数 onSlideLeave 某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-边框图片]]></title>
    <url>%2F2017%2F05%2F16%2FH5C3%2F04-%E8%BE%B9%E6%A1%86%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[边框图片目标 扩展知识增加一下知识面 原理border-image 设置的图片将会被“切割”成九宫格形式，然后进行设置。如下图 “切割”完成后生成虚拟的9块图形，然后按对应位置设置背景， 其中四个角位置、形状保持不变，中心位置水平垂直两个方向平铺。如下图 1、round和repeat之间的区别** round 会自动调整尺寸，完整显示边框图片。 repeat 单纯平铺多余部分，会被“裁切”而不能完整显示。 2、更改裁切尺寸** border-image-slice: 34 36 27 27 分别设置裁切如下图 属性 border-image-source 图片地址 border-image-slice 图片裁剪尺寸 border-image-width 边框的宽度 border-image-repeat 平铺方式 stretch round repeat 总结 关于边框图片重点理解9宫格的裁切及平铺方式，实际开发中应用不广泛，但是如能灵活动用会给我们带来不少便利。]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-3D转换]]></title>
    <url>%2F2017%2F05%2F16%2FH5C3%2F03-3d%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[3D转换目标 掌握使用CSS完成一些3d效果 理解在网页平面内的3d效果 怎么在网页平面产生3d效果 我们生活的环境是3d的，照片就是3d物体在2d平面呈现的例子 有什么特点： 近大远小 物体后面遮挡不可见 当我们在网页上构建3d效果的时候参考这些特点就能产出3d效果 在现实生活当中 我们通过肉眼去物体的时候和照片的成像是相同的 如果想要在网页产生3d效果需要透视（理解成3d物体投影在2d平面内） 透视和视距 透视（perspective） 在2d平面产生近大远小视觉立体，但是只是效果二维的 原理： a. 模拟人类的视觉位置，可认为安排一只眼睛去看b. 距离电脑平面的距离为视距c. 距离视觉点越近的在电脑平面成像越大，越远成像越远 特点：只是显示3d图像的近大远小效果，无法呈现3d的三维成像的特点，如遮挡 使用场景：只是辅助性的帮助开发者检查3d效果 ​ 3d转换 translateX x轴方向的位移 translateY y轴方向的位移 translateZ z轴方向的位移 rotateX 绕x轴旋转 rotateY 绕y轴旋转 rotateZ 绕z轴旋转 3d呈现 3d呈现（transfrom-style） 在2d平面产生近大远小视觉立体，但是只是效果二维的 原理： a. 第一张图是没有使用3d呈现的 无3d效果b. 第二张图是使用了3d呈现的 出现遮挡三维立体效果 特点：真正意义的3d呈现，三维立体,有遮挡 使用场景：在3d立体图形的构建使用 综合案例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; .box&#123; width: 200px; height: 200px; position: relative; margin: 100px auto; /*辅助3d效果开发 视觉效果 */ /*透视：理解成在屏幕外面安排一只眼睛帮我们开3d效果*/ /* 形成近大远小 效果 */ /*perspective: 300px;*/ /*真正意义的3D呈现 */ transform-style: preserve-3d; transform: rotateX(30deg) rotateY(-30deg); animation: rotate 4s linear infinite; &#125; .box &gt; div&#123; width: 100%; height: 100%; position: absolute; left: 0; top: 0; text-align: center; line-height: 200px; font-size: 20px; opacity: 0.4; &#125; .box .front&#123; background: red; transform: translateZ(100px); &#125; .box .back&#123; background: blue; transform: rotateY(-180deg) translateZ(100px); &#125; .box .left&#123; background: green; transform: rotateY(-90deg) translateZ(100px); &#125; .box .right&#123; background: yellow; transform: rotateY(-270deg) translateZ(100px); &#125; .box .top&#123; background: pink; transform: rotateX(90deg) translateZ(100px); &#125; .box .bottom&#123; background: hotpink; transform: rotateX(-90deg) translateZ(100px); &#125; /* 立方体的中心在电脑平面上 */ /* 当你选择过后正面朝外 Z正方向也是朝外 */ @keyframes rotate &#123; from&#123; &#125; to&#123; transform: rotateX(30deg) rotateY(-390deg); &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="front"&gt;front&lt;/div&gt; &lt;div class="back"&gt;back&lt;/div&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt; &lt;div class="top"&gt;top&lt;/div&gt; &lt;div class="bottom"&gt;bottom&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 总结 怎么在2d的网页体现3d效果 拍照片 物体 呈现 近大远小 在网页 也可以安排一只虚拟的眼睛 帮我们去观察 立体的物体 透视 perspective:100px; 视距 距离越近 近大远小的效果 越明显 作用：辅助观察3d效果，不能真正的呈现3d 3d转换 rotateX rotateY rotateZ translateX translateY translateZ]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-选择器和动画]]></title>
    <url>%2F2017%2F05%2F15%2FH5C3%2F02-%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[选择器和动画属性选择器 E[attr=value] 选中E元素中属性有attr的且属性值为value的元素 E[attr^=value] 选中E元素中属性有attr的且属性值以value开头的元素 E[attr$=value] 选中E元素中属性有attr的且属性值以value结尾的元素 E[attr*=value] 选中E元素中属性有attr的且属性值包含value的元素 伪类选择器 E:first-child 选中E元素的父元素下所有的子元素的第一个元素，如果类型为E选中否则无效 E:last-child 选中E元素的父元素下所有的子元素的最后一个元素，如果类型为E选中否则无效 E:nth-child(n) 选中E元素的父元素下所有的子元素的第n个元素，如果类型为E选中否则无效 E:nth-last-child(n) 选中E元素的父元素下所有的子元素的倒数第n个元素，如果类型为E选中否则无效 伪元素选择器 E::before 选中E元素的内容前伪元素 E::after 选中E元素的内容前伪元素 过渡 transition 需要过渡的属性 过渡时间 过渡的动画速度函数 过渡的延时时间 transition-property 需要过渡的属性 transition-duration 过渡时间单位秒 transition-timing-function 过渡的动画速度函数 如：ease linear transition-delay 过渡的延时时间单位秒 2d转换 transform 转换属性 属性值为不同的转换形式 scale 缩放 translate 位移 rotate 旋转 skew 倾斜 transform-origin 转换中心 动画 animation 动画属性 animation-name 动画序列名称 animation-duration 动画时长 animation-timing-function 动画速度函数 animation-delay 动画延时 animation-iteration-count 动画执行次数 无数次 infinite animation-direction 动画播放方向 默认normal 逆播放 alternate animation-play-state 动画的播放状态 默认 running 暂停 paused animation-fill-mode 动画结束状态 默认 backwards 保持 forwards 123456789@keyframes animationName &#123; form&#123; width:100px; &#125; to&#123; width:200px &#125;&#125;/* animationName 动画序列名称 */]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-关于H5开发]]></title>
    <url>%2F2017%2F05%2F15%2FH5C3%2F01-%E5%85%B3%E4%BA%8EH5%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[关于H5开发目标 作为前端开发人员应该怎么去理解H5开发 不能单纯认为H5仅仅只是H4的下一个版本 个人愚见HTML4.0.1 html是HyperText Markup Language 超文本标记语言的缩写，是一款描述网页的标记语言。 HTML4.0.1简单的讲就是html的一个版，1999年12月发布的一直沿用至今，但是html5在慢慢代替它。 总结一下它的作用是语言规范，开发网页用的。 HTML5 狭义的讲html5的新的一个规范，你可以理解成H5仅仅只是H4的下一个版本。 但是如果把现在的工作岗位前端-H5开发工程师中的H5那就没这么简单了。 理解H5开发 在前端领域H5是一个技术集合（技术栈），而不是一个单纯的技术点，所有不能理解为是一个html规范。 需要从三个方面去梳理一下常见会学习到技术（当然远不止这些）： html 语义化标签 新增表单类型 新增表单属性 css 新增选择器 属性的增强 过渡 转换 动画 媒体查询 javascript 新增应用API canvas绘图 ES6 还可以从职能去理解H5开发是什么： 移动web开发 响应式开发 单页面应用开发 混合APP开发 微信小程序 微信公众号 总结H5开发泛指对h5技术栈(html提升，css提升，javascript提升)的综合使用开发网页应用程序]]></content>
      <tags>
        <tag>H5C3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-Ajax跨域]]></title>
    <url>%2F2017%2F05%2F04%2Fajax%2F13-Ajax%E8%B7%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[ajax跨域什么是ajax跨域简单来说，就是网站A去调用网站B的数据。 常见案例： hao123.com的天气预报。 但是Ajax跨域存在一个问题 — 浏览器的同源策略，该策略会阻止ajax跨域访问 同源策略（Same origin policy）是一种约定，它是浏览器的一种安全功能。 同源: 同协议，同域名，同端口； 不同源则为跨域 同源限制案例: www.study.com/origin/index.html使用ajax，请求www.demo.com/1.php文件中的数据 1) 创建 www.study.com/origin/index.html 文件 2) 创建 www.demo.com/1.php 访问结果: 响应主体: 终端： 看到 Access-Control-Allow-Origin 错误，就说明正在执行跨域请求，请求数据被浏览器的同源策略所阻止。 解决跨域问题有三种方式： 服务器代理 cors （跨域资源共享） jsonp 代理实现ajax跨域核心思想: php中有一个函数 file_get_contents。 该函数能够获取到其他网站的数据。 file_get_contents(‘http://www.baidu.com/index.html&#39;); 案例: www.study.com/proxy/index.html发送ajax请求，请求www.study.com/proxy/proxy.php文件 proxy.php文件使用file_get_contents函数读取www.demo.com/1.php文件中的内容，再返回给index.html文件中的ajax请求 1)创建 www.study.com/proxy/index.html 在该文件中发送ajax请求，请求同服务器(www.study.com)下的 proxy.php文件 2)创建 www.study.com/proxy/proxy.php 在该文件中使用 file_get_contents函数，读取远程服务器(www.demo.com)1.php中的内容 3)创建 www.demo.com/1.php 访问结果: cors跨域cors: 跨域资源共享。 同源策略是浏览器的策略。但是如果服务器允许其他网站的页面进行跨域访问，那么浏览器就不会对返回的数据进行限制了。 核心方法: 在服务器端(PHP文件中)声明不用进行同源限制 如果设置为 * 则是所有外部网站都可以获取数据 header(‘Access-Control-Allow-origin: *’); 只允许www.study.com网站访问并获取数据 header(‘Access-Control-Allow-origin: http://www.study.com&#39;); 案例: www.study.com/cors/index.html通过cors方式，访问www.demo.com/cors.php文件的数据 1)创建 www.study.com/cors/index.html文件 发送ajax请求 2)创建 www.demo.com/cors.php jsonp跨域JSONP(JSON with Padding) : 是一种解决ajax跨域访问的方案。 核心思想: 浏览器虽然有同源策略，但是 src 和 href 两个属性却可以跨域访问。 可以利用这一“漏洞”发送ajax请求。 案例: www.study.com/jsonp/index.html文件中通过script标签的src属性，跨域访问www.demo.com/jsonp.php文件中的数据 1) 创建 www.study.com/json/index.html ,使用 script标签引入了 www.demo.com/jsonp.php文件 2) 创建 www.demo.com/jsonp.php文件 输出个 123 访问结果 — 响应主体，拿到后端的返回值 3) 调整后台返回数据的方式 — 返回了一个 函数字符串 例如: ‘aaa(123)’ 访问结果: 4) 在前端页面提前定义好 函数 aaa() 访问结果 — 123被输出到终端 5) 丰富一下后台返回数据的类型 访问结果: $.ajax方法跨域操作 — jsonp方式$.post $.get $.ajax都能发送跨域请求。 但是，$.post和$.get是要依靠cors方式的， 只有$.ajax能使用jsonp方式 核心: 必须设置请求类型为get --- type: ‘get’ 必须设置dataType为jsonp --- dataType: ‘jsonp’ 必须额外设置一个jsonp参数，该参数值可以是任何英文字符串，常用callback。 jsonp: &apos;callback&apos; 该参数会产生一个随机字符串 前端使用该字符串创建一个函数 后端接收该字符串作为返回函数的名称 示例: 1) 使用jsonp发送跨域请求 $.ajax({ url: &apos;http://www.study.com/test/3.php&apos;, type: &apos;get&apos;, dataType: &apos;jsonp&apos;, jsonp: &apos;callback&apos;, //解决前后端函数名统一的问题 success: function(msg){ alert(msg); alert(msg.name); } }) 2) 后端拼接函数字符串 &lt;?php // 函数名 $callback = $_GET[&apos;callback&apos;]; $str = &quot;$.ajax---&gt;jsonp&quot;; echo $callback . &quot;(&apos;$str&apos;)&quot;; ?&gt; 案例: www.study.com/ajax_jsonp.html 跨域访问www.demo.com/ajax_jsonp.php文件中的内容 1) 创建 www.study.com/ajax_jsonp.html 发送ajax请求 2) 创建www.demo.com/ajax_jsonp.php 返回数据 调用网上接口 — 天气预报网站： www.jisuapi.com api说明: 注册，购买后可在“我的api”中看到 1） 发送ajax请求 2) 将取得数据筛选后显示到网页上]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12-虚拟主机配置]]></title>
    <url>%2F2017%2F05%2F04%2Fajax%2F12-%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[虚拟主机配置什么是虚拟主机虚拟主机，也叫“网站空间”，就是把一台运行在互联网上的物理服务器划分成多个“虚拟”服务器，每一个虚拟服务器都能独立运行一个网站 虚拟主机配置3步骤目标: 将我们的apache做成虚拟主机，同时支持多个网站。 还可以为每个虚拟主机自定义域名 www.study.com 案例: 配置 www.study.com 虚拟主机 1) 修改apache配置文件(httpd.conf)，引入apache的虚拟主机配置文件(httpd-vhost.conf) 去掉该句前的 # 号 2) 修改虚拟主机配置文件 d:\phpstudy\Apache\conf\extra\httpd-vhosts.conf 3) 修改hosts文件 (使用管理员权限修改) c:/windows/system32/drivers/etc/hosts 在浏览器中输入 www.study.com 就会访问本机的apache服务器 重启Apche服务器 注意： www.study.com 指向 d:/phpstudy/WWW/study 目录 配置两个域名： www.study.com www.demo.com 需要调整default不影响打开localhost]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-ArtTemplate模板引擎]]></title>
    <url>%2F2017%2F05%2F04%2Fajax%2F11-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%2F</url>
    <content type="text"><![CDATA[模板引擎为什么要使用模板引擎通过搜索用户名案例我们发现，要渲染到网页上的数据是使用js循环拼接字符串，再将拼接好的字符串填入tbody标签中的。 这种方式可读性差，出错不容易查找。 模板引擎技术就是为了解决字符串拼接问题的。 ==模板引擎技术本质就是拼接字符串。== 传统模式有两种拼接显示字符串的方式: 在后端程序中拼接好，然后以字符串形式返回 后端程序返回json字符串，前端程序接收了之后，解析json进行拼接 模板引擎方式： 模板引擎属于前端程序拼接字符串提前定义好要显示格式，所有数据位置以特殊标记表示出来。模板引擎会自动分析，并将数据填写到对应的位置。 我叫 , 今年 岁了 常见模板引擎ArtTemplate：https://github.com/aui/artTemplate velocity.js：https://github.com/shepherdwind/velocity.js Handlebars：http://handlebarsjs.com artTemplate快速上手基本使用步骤: 1) 使用script标签引入arttemplate库文件 (template-web.js) 2) 定义标签，用来显示最终解析好的模板信息 3) 定义模板和模板中所需数据。 ① 定义要显示在模板中的数据，必须是 json 对象 ② 使用script标签定义模板，type=&quot;text/template&quot; id=&quot;tpl&quot;，并且使用 {{}} 将所有数据位置标记出来 4) 调用template函数，解析模板，将数据和模板组装到一起 5) 将解析好的模板字符串填充到事先定义好的标签中(显示到网页上) 简单案例：拼接模板字符串 “我叫张三，今年20岁”，并输出在网页的div中 模板: 我叫 , 今年 岁了 var json = {“name”:”zs”, “age”:20}; ① 引入 template-web.js库文件 ② 定义标签，用来显示最终解析好的模板信息 ③ 定义数据和模板 ④ 调用template函数将数据和模板揉到一起 ⑤ 将解析好的字符串写入定义好的标签中 关键点： 1) 在定义模板时使用 script 标签， type=”text/==template==” id=”tpl” 2) 定义json对象，json对象中的key一定要和模板中的 一致 3) 调用template函数进行解析 参数1: 模板的id值 参数2: json对象 循环结构 each关键点: 1) template函数需要的参数是一个json对象，所以需要声明json对象，里面是数组 2) 在定义模板时使用each进行循环 1234567891011121314 each结构: &#123;&#123;each data as value&#125;&#125; 输出内容 &#123;&#123;/each&#125;&#125; data: 要循环的数组 value: 循环取出的单元值 注意: 使用 &#123;&#123;/each&#125;&#125; 结束循环 ① 使用script标签引入arttemplate库文件 (template-web.js) ② 定义标签，显示最终结果的标签 ③ 定义数据和模板 ④ 调用template函数，将数组和模板进行解析 ⑤ 将解析好的字符串显示到div中 1234567891011121314151617181920var arr= [ &#123;"name":"zs", "age":20&#125;, &#123;"name":"ls", "age":20&#125;, &#123;"name":"ww", "age":20&#125;,]var arr = [ &#123;"sno":1, "sname":"aaa", "sage":20, "sgender":"nv", "semail":"dasdsad@d.acom", "stel":"12134333"&#125;, &#123;"sno":2, "sname":"aaa", "sage":20, "sgender":"nv", "semail":"dasdsad@d.acom", "stel":"12134333"&#125;, &#123;"sno":3, "sname":"aaa", "sage":20, "sgender":"nv", "semail":"dasdsad@d.acom", "stel":"12134333"&#125;,] 选择结构 — if else123456789101112关键点: 定义模板时使用 &#123;&#123;if 判断条件&#125;&#125; 程序块1 &#123;&#123;else&#125;&#125; 程序块2 &#123;&#123;/if&#125;&#125; 定义数据和模板 使用模板引擎改造搜索用户案例目标: 使用模板引擎来代替原来的字符串拼接 ① 引入库文件 ② 定义标签，显示最终结果的标签 ③ 定义数据和模板 ④ 调用template函数 ⑤ 将解析好的字符串渲染到tbody中 1) 发送ajax请求 2) 后端php接收关键词，查询，再将结果返回给前端 3) 前端显示数据 — 模板引擎 ① 引入 template-web.js 文件 ② 定义显示最终结果的标签 – tbody ③ 定义数据和模板 数据后端返回的 --- 数组，内部是json 需要包装成json 定义模板： each循环json中的数组，还可以增加if判断 ④ 调用template函数组装数据和模板 ⑤ 将结果显示到 tbody中 定义模板: 定义数据： 模板引擎原理简介 核心原理: 使用正则替换模板引擎中的标记 例如: 我叫，今年岁 使用正则表达式找到模板字符串中的和,再用真实的数据进行替换。 核心方法: ① reg.exec(str); reg: 正则表达式 str: 字符串 函数作用: 从str字符串中找到复合reg正则表达式的对象，如果没有则返回null ② str.replace(str1, str2); 函数作用: 在str字符串中找到str1字符串，然后用str2字符串进行替换 例如: str = “abcdefg”; str1 = “bc”; str2 = “zs”; console.log(str.replace(str1, str2)); // azsdefg 掌控每一步中变量的内容。]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-封装方法]]></title>
    <url>%2F2017%2F05%2F03%2Fajax%2F10-%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[封装方法从一般到通用。 从一个具体的案例，完善成一个兼容相同功能函数 1) 编写一个具体案例 2) 分析其中的缺陷 3) 完善缺陷 封装 $.get方法1) 编写一个具体的案例 具体案例: 封装一个get方法，能够发送ajax请求，请求1.php文件，并且能接收到1.php的返回数据 ① 使用原生js完成整个ajax请求过程 ② 定义$对象，再定义get成员方法 分析具体案例存在的问题，一步一步将存在问题修正，就能够形成一个通用的函数了。 具体案例存在的问题: ① 在创建XMLHttpRequest对象时，没有处理浏览器兼容性 ② 只能访问1.php程序 ③ 无法灵活向后台的1.php程序发送参数 ④ 前端无法灵活接收后端返回的数据 ⑤ 返回值类型单一，只能使用字符串 2) 处理创建XMLHttpRequest对象时的兼容性问题 3) 处理只能访问1.php文件的文件的问题。 思路: 定义get函数时设置形参，调用函数时传递实参 ① 修改get方法，设置参数1 — 请求的url地址 ② $调用get方法时，需要传递实参 4) 处理请求后台文件时无法发送数据 思路: 将js对象组装为字符串，拼接在请求的url地址之后 $.get(‘1.php’, {“id”:1, “name”:”zs”} , ….) –&gt; 1.php?id=1&amp;name=zs 本质: {“id”:1, “name”:”zs”} —&gt; id=1&amp;name=zs ① 封装params方法，将js对象转为字符串 i. 创建了一个test.html页面，用来测试js对象转字符串的方法 ii. 将封装好的函数加入到 $ 对象中 ② 在get方法中定义参数2， 并在get方法中调用params方法，将参数2的js对象转为字符串，将字符串参数拼接到url地址当中 5) 处理readyState==4时的回调函数 ① 在$.get方法中设置参数3，在方法体中使用函数形式调用，就相当于执行了一个函数 ② 在调用$.get方法时，以回调函数形式传入参数3 6) 处理能够接收不同类型的返回值 ① 在$.get方法声明时，设置参数4，判断参数4的值，如果是json则进行额外处理 ② 在调用$.get方法时，传入参数4 封装 $.post方法 1) 创建post方法，能够发送ajax请求 2) 处理向后台发送的数据 3) 处理回调函数和返回值类型 1) 封装普通的方法 2) 处理xhr的浏览器兼容性问题 3) 请求地址参数问题 4) 让请求能够发送数据 5) 回调函数 6) 设置返回值类型 封装 $.ajax方法核心思想: 1) 将发送请求的地址、方式、数据、返回值类型、回调函数都封装到js对象中，然后作为参数传入$.ajax方法中。 2) 在$.ajax方法中区分post和get方式，分别调用get方法和post方法。]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-jQuery提供的Ajax方法]]></title>
    <url>%2F2017%2F05%2F03%2Fajax%2F09-jQuery%E6%8F%90%E4%BE%9B%E7%9A%84Ajax%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[jQuery提供的Ajax方法 jQuery提供了4个ajax方法: $.get() $.post() $.ajax() $.getJSON() 前三个常用 $.get$.get(var1, var2, var3, var4); 参数1: 请求的后端程序的地址 参数2: 要发送到后端程序的数据，json对象/js对象（推荐）或者 字符串 参数3: 当readyState==4时的触发函数，该函数中有一个参数，就是后端程序返回的数据 参数4: 设置返回数据的类型: text(默认) json xml 案例: 在get.html文件中发送一个ajax请求，去请求后端的get.php页面，同时将id=1数据发送给后端 示例: 123$.get('get.php', &#123;"goods_id":10101, "_":Math.random()&#125;, function(msg)&#123; alert(msg);&#125;, 'json'); 解析: 上面的代码等价于原生js的 12345678910var xhr = new XMLHttpRequest();xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4)&#123; msg = xhr.responseText; msg = JSON.parse(msg); alert(msg); &#125;&#125;xhr.open('get', 'getData.php?goods_id=10101&amp;_='+Math.random());xhr.send(null); 使用jquery提供的ajax方法，就是为了简化开发。 使用 $.get 改造 1.5的搜索案例 1) 表格和文本框一样 2) $.get发送请求 $.post$.post函数的用法和$.get一模一样，只是发送请求方式变为post $.post(var1, var2, var3 , var4); //最标准的写法 参数1: 请求的后台程序的地址 参数2: 要发送到后台程序的数据，json对象/js对象（推荐） 或者 字符串 参数3: 当readyState=4时的触发函数，该函数中有一个参数，就是后台程序返回的数据 参数4: 设置返回数据的类型: text(默认) json xml 示例: 123$.post('getData.php', &#123;"goods_id":10101&#125;, function(msg)&#123; alert(msg);&#125;, 'json'); 解析: 上面的代码等价于原生js的 123456789101112var xhr = new XMLHttpRequest();xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4)&#123; msg = xhr.responseText; msg = JSON.parse(msg); alert(msg); &#125;&#125;xhr.open('post', 'getData.php');var param = 'goods_id=10101';xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded');xhr.send(param); 案例 — 搜索框下拉列表 数据表设计: key_id: 主键 key_name: 关键词 思路分析: index.html — 在搜索框上绑定keyup事件，获取搜索框内容并发送ajax请求1) 在搜索文本框上绑定键盘弹起事件2) 事件函数 ① 获取搜索框内容 ② 发送ajax请求，等待结果 getKeys.php — 接收关键词，并根据关键词从数据表中查出相关的其他关键词，返回给前端1) 接收关键词2) 编写SQL语句，查询和接收关键词相关的所有关键词3) 将查询结果返回给前端 index.html — 将接收到关键词循环显示到下拉列表（tips）中接收后端返回结果并显示1) 制作下拉列表2) 将后端返回的每条关键词都填充到下拉列表中3) 完善下拉列表 ① 每次循环取出关键词时都先创建div，并将关键词放在div中 ② 为div绑定鼠标悬浮事件（高亮显示）和鼠标移出事件（取消高亮显示） ③ 为div绑定点击事件，将选中的关键词放入搜索框 ④ 将每个div都放入tips ⑤ 将tips显示出来 ⑥ 每次向tips中填充数据时，都要先清空tips 代码实现: index.html — 在搜索框上绑定keyup事件，获取搜索框内容并发送ajax请求 1) 在搜索文本框上绑定键盘弹起事件 2) 事件函数 ① 获取搜索框内容 ② 发送ajax请求，等待结果 getKeys.php — 接收关键词，并根据关键词从数据表中查出相关的其他关键词，返回给前端 1) 接收关键词 2) 编写SQL语句，查询和接收关键词相关的所有关键词 3) 将查询结果返回给前端 下拉列表 index.html 将结果显示到下拉菜单中 关键点总结: 1) 使用键盘弹起事件来触发ajax请求 ① 获取搜索框中的内容 ② 发送ajax请求，并将搜索框中的内容一起发送给后端 2) 接收到的数据需要循环显示在下拉菜单中 ① 将返回的字符串转为数组（内部是json对象） ② 循环数组，取出每一个相似关键词 ③ 在循环中创建div对象，将关键词加入div对象 ④ 在div上绑定鼠标悬浮事件，修改背景和字体颜色 ⑤ 在div上绑定鼠标移出事件，修改背景和字体颜色为初始颜色 ⑥ 在div上绑定点击事件，将内容写在搜索框中，并隐藏下拉列表 ⑦ 将div追加到下拉列表中，然后再将下拉列表显示出来 ⑧ 在循环显示下拉列表之前先清空下拉列表中已有内容 $.ajax方法$.ajax使用JS对象来配置ajax请求 — $.ajax(obj); 必须配置项： url: 要请求的后台程序地址 data: 要发送到后台程序的数据 (建议使用json/js对象格式，也可以使用字符串，也可以是FormData) type: 请求类型 post和get 两种 (put、delete) dataType: 返回值类型 text(默认) 、 json 、xml 、 jsonp(跨域使用) success: 成功完成ajax触发的事件，回调函数，其参数是后端程序的返回数据 简单案例: 1) 发送ajax请求 2) 后端返回数据 其他配置项： cache: 是否进行缓存(true/fasle)，如果设置type为get，一般设置该项为false(不缓存)。 async: 同步/异步设置，true(异步、默认) false(同步)。 timeout: 超时设置，多少ms之后扔未接收到后端返回数据，则结束本次请求。— 进入error方法中 error: 请求失败时的回调函数，该函数有三个参数。参数1是xhr对象，参数2是错误信息（错误信息通常是 “null”, “timeout”, “error”, “not modified” 和 “parsererror”），参数3是异常对象（可选）。 complete: Ajax完成时的回调函数。不论请求成功还是失败都会执行该方法 beforeSend: 发送Ajax之前执行的回调函数。 beforeSend() —&gt; success/error() —&gt; complete() contentType: 头信息设置，使用FormData对象时设置该值为false，其他情况会自动设置，不需要手动设置。 processData: 处理数据方式，使用FormData对象时设置该值为false，其他情况会自动设置，不需要手动设置。 注意: contentType和processData只有在使用FormData对象时，设置为false，其余情况均不用设置 案例 — 添加新管理员 如果发送的数据是FormData，那么就只能使用原生js 或者 $.ajax $.ajax发送请求时，如果发送的数据是FormData时，必须设置 contentType和processData为false 1) 表单页(index.html) 提交按钮上，绑定点击事件，获取表单数据，发送ajax请求 2) php页面接收表单数据，拼接SQL语句并执行 3) 前端接收结果，进行提示 代码实现: 1) 表单页(index.html) 提交按钮上，绑定点击事件，获取表单数据，发送ajax请求 因为用到FormData来获取表单数据，所以必须用$.ajax，发送请求时要额外配置contentType和processData 2) php页面接收表单数据，拼接SQL语句并执行 （自己完成） 3) 前端接收结果，进行提示]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-JSON]]></title>
    <url>%2F2017%2F05%2F03%2Fajax%2F08-JSON%2F</url>
    <content type="text"><![CDATA[JSON什么是JSON？JSON: JavaScript Object Notation 是一种轻量级数据交互格式。 数据交互: 每一种语言的编码都不一样，它们之间互不认识。但是现在的情况是不同的语言开发出的系统也需要进行数据交互，这时候就需要一种大家都认识的语言或者技术来实现。 xml: 扩展标记语言 JSON数据的声明和使用12345声明: var json_obj = &#123;"key1":"value1", "key2":"value2", ...&#125;;key: 双引号包含的字符串value: 数据→数值型、字符串、数组、json对象 12345678910111213141516171819202122//key：必须用双引号var json1 = &#123;"a":"Hello", "b":"world"&#125;;alert(json1.a);var json2 = &#123; "name": "郭德纲", "age": 50, "tudi": ['岳云鹏', '烧饼', '张云雷'], "son": &#123;"name":"郭麒麟", "age":20&#125;&#125;;alert(json2.name);alert(json2.tudi[1]);alert(json2.son.name);//数组，内部的每个单元都是一个jsonvar json3 = [ &#123;"name":"赵四", "age":50&#125;, &#123;"name":"小沈阳", "age":46&#125;, &#123;"name":"刘能", "age":50&#125;, &#123;"name":"宋小宝", "age":52&#125;,];alert(json3[2].name); JSON的本质: JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。 1234567var obj = &#123;a:"hello", b:"world"&#125;; // js对象var obj = &#123;"a":"hello", "b":"world"&#125;; // json格式的js对象，也可以叫json对象 (JSON才是真正的JSON对象)var str = '&#123;"a":"hello", "b":"world"&#125;'; // json，也叫json格式的字符串 必须外层单引号，内存双引号var str = "&#123;'a':'Hello', 'b':'world'&#125;"; //错误，不能这样写，会影响到其他程序的执行 PHP数组转JSON格式的字符串1234567php提供了函数： json_str json_encode($arr);案例1: 索引数组转JSON 数组案例2: 关联数组转 JSON json对象案例3: 二维数组转JSON 一维数组，每个单元都是一个json对象 123456789101112131415161718192021222324252627282930//索引数组$arr = ['zs', 'ls', 'ww'];// 一个索引数组被json_encode之后仍然是一个数组，// 但是是一个字符串形式数组echo json_encode($arr); // '["zs", "ls", "ww"]'echo "&lt;hr&gt;";//关联数组$info = ['id'=&gt;1001, 'name'=&gt;'王小明', 'age'=&gt;8];// 一维关联数组被json_encode之后是一个json字符串echo json_encode($info); // '&#123;"id":1001, "name":"王小明", "age":8&#125;'echo "&lt;hr&gt;";//二维数组$list = [ ['id'=&gt;1001, 'name'=&gt;'王小明', 'age'=&gt;8], ['id'=&gt;1002, 'name'=&gt;'韩梅梅', 'age'=&gt;10], ['id'=&gt;1003, 'name'=&gt;'李雷', 'age'=&gt;9]];// 二维数组，会转为数组，内部的每个单元都是jsonecho json_encode($list);/*'[ &#123;"id":1001,"name":"王小明","age":8&#125;, &#123;"id":1002,"name":"韩梅梅","age":10&#125;, &#123;"id":1003,"name":"李雷","age":9&#125;,]'*/ 执行结果: JSON字符串转JSON对象 javascript代码前端的ajax请求，最后接收到的都是字符串 responseText，以字符串形式接收后端返回的数据12var a = '[&#123;"id":10001,"name":"zs","age":20&#125;,&#123;"id":10002,"name":"ls","age":21&#125;,&#123;"id":10003,"name":"ww","age":19&#125;]' json格式的字符串转为json对象: JSON.parse(json_str); 参数: json格式的字符串 12345678910111213var s = '&#123;"id":1001,"name":"王小明","age":8&#125;';alert(s.name);//将json格式字符串转为jsonvar json = JSON.parse(s);alert(json.name);var arr = '[&#123;"id":1001,"name":"\u738b\u5c0f\u660e","age":8&#125;,&#123;"id":1002,"name":"\u97e9\u6885\u6885","age":10&#125;,&#123;"id":1003,"name":"\u674e\u96f7","age":9&#125;]';alert(arr[1]);var arr1 = JSON.parse(arr);console.log(arr1[1]); 案例 搜索用户名，显示用户列表信息 思路: 1) 创建一个搜索页面，定义好搜索框，表头。在搜索按钮上绑定点击事件。 2) 点击事件能够发送ajax请求，并将用户名文本框中的内容一起发送到后端php程序 3) 后端php程序接收用户名，链接MySQL进行模糊查询，再将数组返回给前端 4) 前端接收到后端php返回值之后，循环显示出来 代码实现 : 1) 创建一个搜索页面，定义好搜索框，表头。在搜索按钮上绑定点击事件。 页面布局 : 2) 点击事件能够发送ajax请求，并将用户名文本框中的内容一起发送到后端php程序,在搜索按钮上绑定点击事件 获取文本框中的用户名，发送ajax请求。 3) 后端php程序接收用户名，链接mysql进行模糊查询，在将数组返回给前端。 核心操作: 将资源转为二维数组，再将二维数组转为json字符串，再返回给前端 --&gt; 4) 前端接收到后端php返回值之后，循环显示出来]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-文件上传与进度条]]></title>
    <url>%2F2017%2F05%2F03%2Fajax%2F07-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9D%A1%2F</url>
    <content type="text"><![CDATA[文件上传与进度条 1) 完成Ajax文件上传 核心: Ajax方式上传文件必须使用FormData对象 关键点: ① 表单使用提交按钮，一定是button ② 获取文件对象 ---- FormData i.根据id获取form表单对象 ---- DOM ii. 实例化 FormData对象，将表单对象作为参数传入 iii. 因为使用了FormData，所以一定要用post方式发送请求，将fd作为参数传入send方法 upload.html 获取文件数据，发送ajax请求 upload.php 2) 调整php配置文件（php.ini），使其支持大文件上传 ① 修改允许上传文件最大的大小 ② 修改post表单提交数据的最大大小 重启Apache服务器。 3) 文件进度条 ① 在页面上设置一个div，用来表示进度条 ② 根据实际上传百分比来绘制进度条的宽度 核心: xhr对象中有一个子对象（upload），upload对象中有一个事件 onprogress。该事件大约每100ms执行一次，里面有两个重要属性 loaded(已上传大小) total（总大小）]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-XMLHttpRequest2.0新特性]]></title>
    <url>%2F2017%2F05%2F03%2Fajax%2F06-XMLHttpRequest2.0%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[XMLHttpRequest2.0新特性timeout 和 ontimeout1234567891011timeout： 请求超时设置。属性，用来设置等待响应时长，如果超过指定时长，则会触发ontimeout事件xhr.timeout = 3000; // 设置等待时长为3秒 ontimeout： 事件，用来设置超过等待时长后的动作 xhr.ontimeout = function () &#123; alert('请求超时'); &#125; 在创建xhr对象之后，来设置timeout属性；如果设置了timeout属性，那么就建议设置ontimeout事件。 FormData表单对象小案例: 点击button按钮时，将用户名和密码值通过ajax发送到后端php页面 FormData对象优势就是能够一次性将表单中的所有数据全部取出，包括文件域的文件对象。 1)创建表单 form标签很重要， method和action不重要 每个表单域需要设置name值 2)发送ajax请求 ①将表单数据取出 FormData i.获取form表单对象: var fm = document.getElementById(‘mainForm’); //DOM对象 ii.实例化FormData对象: var fd = new FormData(fm); ②发送ajax请求 使用FormData对象以后，必须使用post方式来发送ajax请求。 将FormData对象，作为参数传入 send方法中 xhr.send(fd); ③ 使用FormData对象提交表单时，不需要设置 setRequestHeader方法 注意点: ① form标签要给id值，方便获取form标签的DOM对象 ② 每个域都要给 name值 ③ 提交按钮必须用 button，因为submit有跳转功能 代码实现: 1) 使用FormData对象获取所有表单的数据，并发送ajax请求 2) 在formdata.php页面，接收数据 访问结果: FormData的内部构造: key-value]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-同步和异步]]></title>
    <url>%2F2017%2F05%2F02%2Fajax%2F05-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[同步和异步同步/异步概念同步: 顺序执行 第一步---&gt; 第二步 ---&gt; 第三步 .... 异步: 甲在完成一系列工作时，自己完成主工作。将一些分支工作交给乙，甲此时一直在完成自己的工作，并等待乙完成的结果。乙完成后将结果返回给甲。 核心: open方法的参数3 参数3是一个布尔值， true异步方式（默认）， false是同步方式 案例同时显示图片和弹出框 访问时: 先弹出123，点击“确定”之后，才显示图片 — 同步 1) index.html文件 2) index.php文件 异步执行情况: 先显示图片，1秒后才显示时间戳弹出框 同步执行情况: 等待1秒后显示时间戳弹出框，再点击确定之后才显示图片 重点 : 在实际开发中 95% 以上的请求，都使用异步。]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-GET缓存]]></title>
    <url>%2F2017%2F05%2F02%2Fajax%2F04-GET%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[GET缓存什么是缓存？ 浏览器的请求需要从服务器获得许多 css、img、js 等相关的文件，如果每次请求都把相关的资源文件加载一次，对 带宽、服务器资源、用户等待时间 都有严重的损耗。如果浏览器将css、img、js等文件在第一次请求成功后就保存在本机上，以后的每次请求就在本机获得相关的资源文件，那么就可以明显地加快用户的访问速度，同时可以节省各种资源(带宽、服务器资源、用户等待时间)。 GET缓存测试 ajax方式，get会有缓存问题。 案例: index.html页面中创建一个按钮，点击该按钮时发送ajax请求，得到后端php程序返回的当前时间戳并显示。 目标: 点击“获取时间戳”按钮时，触发ajax请求，访问后端的getTime.php文件，得到时间戳并弹出显示 index.html — 发送请求 index.php — 输出当前时间戳即可。 在IE下测试: 显示的时间戳永远都是这个，说明是缓存问题。 解决方法 解决方法有两种: 1) 前端方案: 在open准备ajax请求时，为请求的地址增加随机后缀。相当于每次请求都是新的地址 2) 后端方案: 后端程序设置不允许缓存的头信息，php程序固定使用如下3句即可。 header(&apos;cache-controller:no-cache&apos;); header(&apos;Pragam:no-cache&apos;); header(&apos;Expires:-1&apos;); 1) 前端方案: 2) 后端解决方案: header(&apos;cache-controller:no-cache&apos;); header(&apos;Pragam:no-cache&apos;); header(&apos;Expires:-1&apos;);]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-POST和GET的区别]]></title>
    <url>%2F2017%2F05%2F02%2Fajax%2F03-POST%E5%92%8CGET%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[POST和GET的区别GET方式实现新用户注册—用户名检 步骤: get.html 1) 在用户名文本框上绑定失焦事件(onblur) 2) 失焦事件函数 ① 获取用户名文本框内已填写的用户名 ② 发送ajax请求，并将已填写的用户名一起发送给后端php页面 get.html 1) 接收后端返回的数据，判断是1还是2。 2) 如果等于1，则提示用户名可用；如果等于2，提示用户名被占用 代码实现: get.html 1) 在用户名文本框上绑定失焦事件(onblur) 2) 失焦事件函数 ① 获取用户名文本框内已填写的用户名 ② 发送ajax请求，并将已填写的用户名一起发送给后端php页面 先测试一下前后端的连通性: get.php 1) 接收前端发送过来的用户名 2) 模拟用户被占用的情况 3) 将结果返回给前端（1用户名可用 2用户名被占用） get.html 1) 接收后端返回的数据，判断是1还是2。 2) 如果等于1，则提示用户名可用；如果等于2，提示用户名被占用 关键点总结: 用户名文本框绑定失焦事件 发送ajax请求基本属于流程化操作1) 实例化XMLHttpRequest对象2) 调用open方法准备请求，get方式发送将数据拼接在url地址之后即可 xhr.open(‘get’, ‘get.php?n=’+name);3) 调用send方法发送请求，get方式只需要将 null 作为参数传入即可4) 调用onreadystatechange事件，在readyState=4时使用responseText接收返回值。此步使用alert或者console.log先输出接收的结果即可，不要着急将结果显示在网页上。 创建后端php程序，接收用户名进行验证核心SQL: select * from ali_admin where admin_email = ‘$name’;该SQL语句的执行结果只可能是两种： 0条数据 1条数据(因为admin_email字段唯一) 0条数据: 说明没有该用户名 （没有被占用） 1条数据: 说明已存在该用户名 （已被占用）根据SQL执行结果返回1或者2，1代表未被占用，2代表已被占用 修改get.html文件，将结果显示在网页上获取用来显示结果的span标签，判断接收的结果为1还是2。如果为1，则将用户名可用写入span标签；反之，则将用户名已被占用写入span标签 POST方式实现新用户注册—用户名检测post和get两种方式的整体思路一致，只是细节上有所差别 1) 使用open准备请求时，参数1需要设置为post，参数2只需要设置后端程序地址。 2) 将需要传递到后端的数据拼接成一个独立的字符串，字符串的格式为 var str = ‘key=value&amp;key=value&amp;....’; （内部结构跟get传参时的结构一致） 3) 调用setRequestHeader方法将数据格式转为 application/x-www-form-urlencoded 4) 将拼接好的数据字符串作为参数传入send方法 5) 后端的php程序需要使用 $_POST来接收数据 前端的区别: 后端的区别: 关键点总结: 1) 发送程序时，参数1设置为post，参数2只用设置请求的后端文件路径 xhr.open(&apos;post&apos;, &apos;post.php&apos;); 2) 将需要传递到后端的数据拼接成一个独立的字符串 var str = ‘name=’+name; 3) 调用setRequestHeader方法将数据格式转为 application/x-www-form-urlencoded xhr.setRequestHeader(&apos;content-type&apos;, &apos;application/x-www-form-urlencoded&apos;); 4) 发送请求时，要将之前拼接好的字符串作为参数放入send方法中 xhr.send(str); 补充说明 — 实际验证用户名是否存在的方法 核心： $sql = “select * from ali_admin where admin_email=’$username’”; 该SQL语句要么查询出1条数据，要么查询出0条数据 1条数据说明: 用户名已被占用 0条数据说明: 用户名未被占用 – 用户名可用]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-Ajax入门]]></title>
    <url>%2F2017%2F05%2F02%2Fajax%2F02-Ajax%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Ajax入门（Ajax 开发）概述Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。 Ajax = 异步 JavaScript 和 XML（标准通用标记语言的子集）。 Ajax 是一种用于创建快速动态网页的技术。 Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。 历史： 1999年诞生，微软在IE5中集成了XMLHttpRequest对象，但是并没有受到人们重视。 2005年，google在gtalk即时聊天工具中使用了该对象，从此之后Ajax技术开始受到人们的重视。 发送Ajax请求ajax核心对象 — XMLHttpRequest对象创建XMLHTTPRequest对象要分为(低版本) IE和==非IE两种方式(主流)==： IE浏览器（IE7之前） : var xhr = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;); 非IE浏览器（chrome、firefox、safair、搜狗等，包括IE7+之后） (主流浏览器): var xhr = new XMLHttpRequest(); 案例：创建XMLhttpRequest对象，兼容IE7之前和主流浏览器 //创建XMLHttpRequest对象，兼容低版本IE和非IE浏览器 function getXhr () { var xmlhttp; if (window.XMLHttpRequest) { //IE7+ 和 非IE 中都有 XMLHttpRequest对象 xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;); } return xmlhttp; } alert(getXhr()); chrome访问结果: IE访问结果: 核心方法XMLHttpRequest对象有了，可以发送Ajax请求了。发送请求需要两个方法: open(var1, var2, var3): 准备Ajax请求 var1: 请求方式 get/post var2: 请求的后端程序地址 var3: 异步(true)/同步(false)，可选参数，默认为true 示例: xhr.open(‘get’, ‘index.php’); //准备以get方式请求后端的index.php文件 send(var): 发送Ajax请求 var: 分为两种情况。 如果是get请求，则填写null。 如果是post请求，则填写要发送到后端的数据。 var: 分为两种情况。 如果是get请求，则填写null。 如果是post请求，则填写要发送到后端的数据。 示例: xhr.send(null); 发送请求案例 在index.html页面上创建按钮，点击该按钮时使用get方式请求后端的index.php页面 发送Ajax请求流程: 1) 创建XMLHttpRequest对象 2) 调用open方法准备ajax请求 3) 调用send方法发送ajax请求 代码实现 1) 创建按钮，绑定点击事件 2) 创建XMLHttpRequest对象 3) 调用open方法准备ajax请求 4) 调用send方法发送ajax请求 访问结果: — 通过newwork来确定请求是否发出 点击”btn”时，又发送了请求，请求了 index.php文件，并且正常接收到结果 接收后端响应结果核心属性 — readyStateAjax的整个过程有5个状态，对应readyState的5个值：0-4 《Pragmatic Ajax A Web 2.0 Primer 》 中对readyStae状态的介绍 0: (Uninitialized) the send( ) method has not yet been invoked. 1: (Loading) the send( ) method has been invoked, request in progress. 2: (Loaded) the send( ) method has completed, entire response received. 3: (Interactive) the response is being parsed. 4: (Completed) the response has been parsed, is ready for harvesting. 0 － （未初始化）还没有调用send()方法 1 － （载入）已调用send()方法，正在发送请求 2 － （载入完成）send()方法执行完成，已经接收到全部响应内容 3 － （交互）正在解析响应内容 4 － （完成）响应内容解析完成，可以在客户端调用了 百度百科: 0 （未初始化） 对象已建立，但是尚未初始化（尚未调用open方法） 1 （初始化） 已调用send()方法，正在发送请求 2 （发送数据） send方法调用完成，但是当前的状态及http头未知 3 （数据传送中） 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误， 4 （完成） 数据接收完毕，此时可以通过通过responseBody和responseText获取完整的回应数据 最核心的重点： 4 , 后端返回的数据已经可以在浏览器中使用了。 核心事件 — onreadystatechange onreadystatechange事件: readyState的值每次发生变化都会触发该事件。 0--&gt;1 1--&gt;2 2--&gt;3 3--&gt;4 总共触发4次 其他重要属性 responseText：以字符串形式接收后端程序的返回值。 以PHP为例: PHP程序最终会被解释程序一段字符串，responseText接收的就是这段字符串 responseXML：以XML格式接收后端程序返回值 响应案例 — index.phpindex.php：返回字符串“Hello Ajax”给前端 — 就是 echo “Hello Ajax” index.html： 将Hello Wrold 显示在页面的div中 1) index.php 返回一个字符串（Hello Ajax！！） 2) 在index.html中检测readyState的状态，当readyState状态等于4的时候，使用responseText来接收后端返回的数据 responseText本质是接收后端返回的字符串。 Ajax程序总结 一般我们编写Ajax程序时需要两个页面，三大步骤: 两个页面: 前端静态html页面 (php页面也行)，用来发送ajax请求，将结果渲染到页面上 后端php页面 (jsp、asp也行)，用来接收前端请求，处理数据，并将结果返回给前端页面 三大步骤: 1) 前端静态页面发送ajax请求。 ① 创建 XMLHttpRequest 对象 ② 调用open方法准备ajax请求 ③ 调用send方法发送ajax请求 ④ 调用onreadystatechange事件，判断readyState=4时，使用responseText接收后端返回数据 2) 后端php页面，处理请求并返回结果 3) 前端页面接收结果，显示在网页指定位置 综合案例点击按钮，从student表中随机取出一条学生信息，显示在网页上。 思路分析: 1) 两个页面 前端静态页面: student/index.html 后端php页面: student/index.php 2) 三大步骤 ① index.html 页面设置一个按钮，用来触发ajax请求 ② index.php 随机取出一条学生数据，并返回给index.html页面 $sql = &quot;select * from student order by rand() limit 0,1&quot;; ③ index.html 接收到后显示在页面上 代码实现: 第一步骤: index.html页面发送ajax请求 第二步骤: 后端php页面 第三步骤： index.html – 将接收到的数据渲染到页面 关键点总结: 1) index.html 通过点击事件发送ajax请求 ① 创建XMLHttpRequest对象 ② 调用open方法准备ajax请求 ③ 调用send方法发送ajax请求 此时不要着急将数据渲染到网页上 2) index.php 随机取出一条学生数据，并返回给index.html页面 ① mysqli操作MySQL服务器的6步骤 ② 核心SQL: select * from student order by rand() limit 0,1 ③ 将结果拼接成字符串再输出，因为前端是以字符串形式接收的 3) index.html接收到后显示在页面上 ① 创建一个div标签，用来显示接收到数据 ② 获取div对象，再将数据显示到该标签中]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-Ajax 技术]]></title>
    <url>%2F2017%2F05%2F02%2Fajax%2F01-Ajax%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[Ajax 技术案例—新用户注册时用户名冲突问题传统模式解决方案1) 在注册页面中输入用户名和密码，点击“注册”时，要将表单数据提交给后台 2) 后台PHP页面，接收用户名和密码之后，要去验证用户名是否存在，如果存在则提示用户名存在，再跳转回注册页面，重新输入。 当用户名存在时，提示用户名已被占用，再跳转回登录页 ajax解决方案当光标离开用户名文本框时，就已经验证了用户名是否存在，并给予提示了。 用户名被占用： 用户名可用 : 两种模式对比 传统模式： 两个页面 — 前端注册表单页（index.html） 和 后端数据验证页（index.php） Ajax模式 : 两个页面 — 前端注册表单页（index.html） 和 后端数据验证页（index.php） Ajax的优势：没有页面跳转，刷新页面内容，用户体验提升。 ajax就是在页面没有刷新或者没有跳转的情况下还能更新页面的某一部分数据]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[28-session和cookie的联系]]></title>
    <url>%2F2017%2F04%2F27%2FPHP%2F28-cookie%E5%92%8Csession%E7%9A%84%E8%81%94%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[session和cookie的联系session原理session默认是保存在服务器的文件当中的。 windows默认存放在 c:/windows/temp目录下， phpstudy存放在 phpstudy/tmp/tmp目录下 cookie和session的联系当浏览器访问一个设置session的页面时，服务器会随机自动生成一个session_id（字符串）。通过响应头的set-cookie返回给浏览器，并保存在浏览器的cookie当中，同时服务器中也会生成一个以该session_id为名称的文件，用来记录信息。 浏览器之后每次访问该网站时，都会携带cookie中的session_id，来和服务器中的session文件名进行比对。当文件名和cookie中的session_id一致时，则说明使用的是该session文件，可以从该session文件中读取数据。 案例: 访问 sets.php文件 和 gets.php sets.php gets.php 访问 sets.php文件时，完成两件事情 1) 将session_id随着响应头返回给浏览器，并保存在浏览器中 2) 在服务器端创建一个session文件 sess_958ur7nh1djufrs9aqkia40im1， 将$_SESSION中已保存的数据，存储到该文件中。 gets.php文件 服务器在tmp目录下找到 sess_958ur7nh1djufrs9aqkia40im1 文件，并将文件中的数据取出，返回给浏览器 session和cookie总结cookie小结: 1） 将数据保存在客户端，安全性不好，但是可以保存的数据量较大。 一个网站能向一个浏览器写 20 个cookie 一个浏览器最多保存300个cookie，每个cookie最大4kb 2） 设置cookie使用 setcookie(var1, var2, var3)； var1： cookie名称 var2： 名称对应的值 var3： 有效期。 可选参数，如果不设置该值或者设置为-1，浏览器关闭则cookie消失 3） 使用$_COOKIE 预定义数组来读取cookie 4） cookie的有效范围： 当前目录及子目录；上级目录无效 5） 删除cookie: setcookie(‘name’, null); session小结: 1) 将数据保存在服务器端，安全性高，但是不能保存大量的数据。一般来讲session当中保存的都是用户信息。 2) 使用session时，首先要使用 session_start函数开启session 3) 设置和读取session时，都是用$_SESSION[‘name’] = ‘zs’; $_SESSION[‘name’]; 4) session的有效范围，在一个域名下设置session，在整个域名范围内都有效 5) 删除session unset($_SESSION[‘name’]); //删除单个session session_destroy(); //删除所有session]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[27-session技术]]></title>
    <url>%2F2017%2F04%2F27%2FPHP%2F27-session%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[session技术session介绍因为cookie是保存在客户端的数据，不够安全，所以出现了session。 session会将数据保存到服务器端（保存在 文件、内存服务器或数据表中），安全性就可以得到保证。 设置/读取session重点: php使用session时，首先要使用session_start()函数来开启session。 $_SESSION 超全局变量就能设置和读取session中的内容 1) 设置session 将session作为数组操作就可以。 2) 读取session session作用范围 在当前网站的任何一个页面设置过session，则该网站的所有页面都能得到该session的数据 例如: 在 www.jd.com 的某个页面中设置session，那么在jd网站的任何一个页面都能找到该session 同理，在localhost的某个页面中设置session，那么在localhost的任何一个php页面都能找到 session的有效期浏览器关闭时，session消失 删除session unset($_SESSION[‘name’]); //删除单个session session_destroy(); //删除所有session]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[26-cookie技术]]></title>
    <url>%2F2017%2F04%2F27%2FPHP%2F26-cookie%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[cookie技术什么是cookie？ cookie是将数据持久化存储到客户端的一种技术。 网站可以将数据写到浏览器中， 一个网站最多能在一个浏览器写20个cookie。 一个浏览器能够设置的总cookie数最多为300个，每个不能超过4kb。 cookie既能保存在文件中，也能保存在内存中。 设置/读取cookie1) 设置cookie setcookie(var1 , var2, var3); var1: cookie的名称 var2: 名称对应的值， 可选参数 var3: cookie的有效期， 可选参数 2) 读取cookie信息 使用php的超全局变量 $_COOKIE进行读取 通过浏览器查看cookie信息: cookie有效期 setcookie函数的参数3可以控制cookie有效期 参数3设置为-1 或者 不设置，关闭浏览器即失效 参数3设置为 time()+秒数，则在当前时间点的多少秒之后失效 设置cookie时，如果设置了有效期，则cookie会保存在文件中；如果没有设置有效期，则cookie保存在内存中。 cookie的有效范围 setcookie函数还有参数4、5，可以用来控制cookie的有效访问，但是一般不用。 只需要记住下面的情况即可： 在不使用参数4和5的情况下，cookie在当前目录及子目录中有效，在上层目录中无效。 cookie删除 setcookie函数第二个参数设置为null，就可以删除cookie setcookie(&apos;name&apos;, null); js控制cookie cookie是将数据保存在客户端的，所以可以使用javascript来读取/设置cookie。 设置cookie: document.cookie = “名称=值;expires=时间” 读取cookie: document.cookie 读取cookie: 设置cookie: expires: 用来指定cookie有效期的 cookie原理当浏览器访问一个带cookie的页面时，cookie会随着响应头返回给浏览器。 当再次访问该网站的页面时，cookie会随着请求头一起发送给服务器。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[25-PHP会话控制概述]]></title>
    <url>%2F2017%2F04%2F27%2FPHP%2F25-PHP%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[会话控制概述1) http协议的缺陷 无状态，就是无记忆，不能让同一浏览器和服务器进行多次数据交换时，产生业务的连续性。 2) 什么是会话控制 会话控制就是解决http无记忆的缺陷的。能够==将数据持久化的保存在客户端(浏览器)或者服务器端==，从而让浏览器和服务器进行多次数据交换时，产生连续性。 3) 会话控制的分类 分为两种: cookie（客户端） 和 session（服务器端） cookie应用实例 — 千人千面（猜你喜欢） 不同的用户访问优酷服务器所看的视频类型不一样。 服务器会将浏览器观看过的视频的关键词保存到浏览器的cookie中（文件、内存）。当浏览器再次访问优酷服务器时，服务器会从cookie中读取关键词，再根据关键词推荐视频。 session应用实例 — 支付宝 每个用户访问支付宝进行登录时，用的是同一套程序。服务器会为每一个浏览器进行编号(sessionid)，当用户登录成功后，服务器会创建一个区域(文件、内存服务器)用来保存用户信息。等浏览器下一次访问服务器时，服务器先拿到浏览器的编号，再和已有的编号进行比较，找到相同的区域（文件、内存服务器）。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[24-学生信息管理系统]]></title>
    <url>%2F2017%2F04%2F27%2FPHP%2F24-%E4%BF%AE%E6%94%B9%E4%BF%A1%E6%81%AF%E4%BA%8E%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[修改学生信息核心：构造一条修改数据的SQL语句 update student set sname=’’, sage=’’.. where sno=6 步骤: 1) 在学生列表页(list.php)为每一行都添加一个“编辑”按钮，跳转到编辑表单页(edit.php)，并且要将当前行的sno一起传递到edit.php页面。 2) 创建edit.php页面(和add.html页面结构一样)，接收sno，拼接SQL语句并执行，得到一个一维数组，将该数组的值填充到表单中。 ① 接收sno ② 根据sno 查询学生信息 ③ 将学生信息显示到表单中 – 将add.html中的表单复制过来，稍作修改即可 ④ 保证表单能够提交到modify.php页面即可 3) 创建一个修改页面(modify.php)，接收edit.php页面表单中的值，拼接一个修改的SQL语句，执行该SQL语句。根据修改结果提示修改成功/修改失败，再跳转 ① 接收表单提交的数据 ② 编写修改的SQL语句 — update ③ 链接MySQL服务器并执行SQL语句 关于排错: 核心思想: 如果一个程序中有SQL语句执行，那么该程序出现错误，第一反应去检查SQL语句。 检查方法: 1) 在php页面中使用echo 将sql语句进行输出 2) 在页面上复制SQL语句到navicat中进行测试 第一步: 将SQL语句复制到navicat中执行，获取错误信息。 登录 验证逻辑: 1) 根据用户名从ali_admin表中查询数据。如果有结果，则说明用户名正确；反之，说明用户名错误。 2) 登录表单提交密码和上一步查询出的密码进行比对，两者相等说明密码正确；反之，密码错误。 代码实现: 1) 创建login.html 登录表单页 2) 创建check.php文件 ① 接收表单提交的数据 ② 验证用户名是否正确 核心思路: 根据接收的用户名查询ali_admin表，如果能够查询到数据，说明用户名正确；反之，查询不到数据说明用户名错误。 核心SQL: ==select * from ali_admin where admin_email=&apos;$email&apos;== 该SQL语句的执行结果，只能是0条数据 或者 1条数据 ③ 验证密码是否正确 核心思路: 验证从数据表中查询出的数据中的密码和表单提交的密码是否一致。如果一致，则说明密码正确，可以正常登录；反之，说明密码错误，跳转到login.html页面 测试: 直接访问 list.php页面，依然可以看到页面结果。 因为http协议是无记忆协议，不知道哪个浏览器来过，所以没办法限制是否能够正常访问到哪个页面。 要实现限制的功能，必须配合 会话控制技术 核心思想:1) 登录成功时将用户重要信息写入session 2) 在其他每个页面中都进行session是否存在的验证 1) 登录成功时，设置session 2) 在其他页面中检测session是否存在 3) 将检测session 的代码复制到每个页面中，除了 login.html 和 check.php]]></content>
      <tags>
        <tag>MySQL PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[23-学生信息管理系统]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F23-%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[学生信息管理系统目标: 通过PHP网页来管理数据库，对数据表的数据进行增删改查 数据表设计: sno： 学号 整型 无符号 主键 自增长 sname： 姓名 字符串 sage： 年龄 无符号 微整型 sgender： 性别 枚举 semail： 邮箱 stel： 电话 create table student( sno int UNSIGNED auto_increment PRIMARY key, sname VARCHAR(30) not null, sage tinyint UNSIGNED not null, sgender enum(&apos;男&apos;, &apos;女&apos;) DEFAULT &apos;男&apos;, semail varchar(30), stel char(11) ) engine=myisam DEFAULT charset=utf8; 测试数据: INSERT INTO student VALUES (‘1’, ‘赵老四’, ‘30’, ‘男’, &#39;zls@a.com‘, ‘13512345678’); INSERT INTO student VALUES (‘2’, ‘王翠花’, ‘28’, ‘女’, &#39;wch@b.com‘, ‘13612345678’); INSERT INTO student VALUES (‘3’, ‘孙狗剩’, ‘32’, ‘男’, &#39;sgs@c.com‘, ‘13712345678’); 学生信息列表核心SQL: select * from student 将student表的数据以表格形式显示在网页上 1) 从student表中获取数据 2) 将获取的数据显示表格 3) 释放资源 添加学生信息 核心SQL: insert into student values(null, ‘路飞’, 10, ‘男’, &#39;lf@dasd.com‘, 18012345678); 代码实现: add.html —- 提供一个可以填写的表单 add_deal.php 1) 接收表单数据 2) 拼接SQL语句 3) 链接MySQL服务器并执行SQL语句 4) 处理SQL执行结果： 判断结果，如果是true说明添加成功，如果是false说明添加失败 5) 关闭数据库链接 删除学生核心SQL: delete from student where sno=5 步骤: 1) 在学生信息列表页(index.php)，为每一行都添加一个删除按钮，删除按钮可以跳转到另一个php(del.php)页面，在跳转时，将当前行的sno一起传递到del.php页面。 2) del.php页面，接收sno，拼接删除的sql语句，再执行该SQL。再根据删除结果提示删除成功/删除失败。跳转回学生列表页。 ① 接收学号 sno ② 拼接删除的SQL语句 ③ 链接MySQL服务器并执行SQL语句]]></content>
      <tags>
        <tag>MySQL PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[22-PHP操作MySQL]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F22-PHP%E6%93%8D%E4%BD%9CMySQL%2F</url>
    <content type="text"><![CDATA[PHP操作MySQLPHP当中一共有三组函数可以用来操作MySQL服务器： mysql mysqli pdo PHP操作数据库是固定流程，一共6步: 1) 链接MySQL服务器 2) 选择要操作的数据库 3) 设置字符集 （不设置字符集可能会出现乱码问题） 4) 执行SQL语句 5) 处理SQL执行结果 6) 关闭MySQL链接 除了第五步，其他每一步都是固定的，对应一个mysql的函数 1) 链接MySQL服务器 — mysql_connect(var1, var2, var3) 参数1: MySQL数据库的主机地址 参数2: MySQL用户名 （root） 参数3: 用户名对应的密码 返回值: 数据库链接资源 $conn = mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;); 2) 选择要操作的数据库 — mysql_select_db(var) 参数1: 数据库名称 mysql_select_db(&#39;demo&#39;); 3) 设置字符集 — mysql_query(var); 参数1: sql 语句 —- set names utf8 (设置字符集的sql语句) mysql_query(&#39;set names utf8&#39;); 4) 执行SQL语句 — mysql_query(var); 参数: sql 语句 —- 增删改查SQL语句 返回值: 如果是查询，则返回结果集（资源），该资源里面包含了从数据表中取出的数据 如果是增删改，则返回布尔值，执行成功返回true，失败返回false $result = mysql_query($conn, $sql); 5) 处理 查询结果 mysql_fetch_assoc(var); 参数: 查询结果集（资源） 返回值: 一维数组，下标是数据表字段 将当前行的数据取出并返回成一维数组，同时将指针向下移动一行。 如果已经无法返回一维数组时，则返回false 6) 关闭MySQL链接资源 — mysql_close(var) 参数: 数据库链接资源 案例: 向test库中的student表中，增加一条数据 案例: 查询student表，并将数据以表格形式显示在网页上 核心: mysql_fetch_assoc的执行原理]]></content>
      <tags>
        <tag>MySQL PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[21-删除数据]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F21-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[5. 删除数据格式: delete from 表名 where 删除条件 案例4: 删除cate_id=5的栏目]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20-修改数据]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F20-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[4. 修改数据格式: update 表名 set 字段1=值1, 字段2=值2,… where 修改条件 修改表中的哪一条（几条）数据的 字段1=值1… 案例2: 将id为6的管理员昵称改为凯子 案例3: 将所有男性管理员的年龄都+1 表: ali_admin 字段: admin_age 修改条件: admin_gender=’男’]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19-添加数据]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F19-%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[3. 添加数据格式： insert into 表名(字段1，字段2，…) values(值1，值2，…); 关键点: 1) 字段和值需要一一对应，如果不对应会造成添加失败或者数据错误 2) 如果每个字段都有数据，则不需要在表名后设置字段列表 3) 带有auto_increment属性的字段可以使用null来设置，MySQL会自动填充数据 案例1: 向student表添加一条数据 方式一: 方式二: 方式三:]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18-数据查询]]></title>
    <url>%2F2017%2F04%2F26%2FPHP%2F18-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[2. 数据查询语法格式: SELECT 字段名1, 字段名2, …… FROM 表名 [ WHERE &lt;条件表达式&gt; ] [ ORDER BY &lt;字段名&gt; [ ASC|DESC ]] [ LIMIT START, LENGTH] 2.1 基本查询格式: select 字段名1, 字段名2,…. from 表名 案例1: 查询所有栏目的id和名称 表: ali_cate 字段: cate_id、cate_name 案例2: 查询管理员信息 (全部字段信息) 表: ali_admin 字段: 所有字段 方式一: 在select和from之间，列出所有字段 方式二: 使用 * 来代表所有字段 2.2 带where子句的查询select field1, field2… from 表名 查询表中的所有数据 where 可以使用条件来筛选查询出的结果 案例3: 查询id值为2的栏目的所有信息 表: ali_cate 字段: * 筛选条件: cate_id = 2 案例4: 查询年龄大于等于25的管理员的邮箱和昵称 表: ali_admin 字段: admin_email、 admin_nickname 筛选条件: admin_age &gt;= 25 案例5: 查询年龄在23-28之间的管理员的所有信息 表: ali_admin 字段: * 筛选条件： admin_age&gt;=23 and admin_age&lt;=28 方法一: 方式二: 案例6: 查询年龄不在23-28之间的管理员的所有信息 表: ali_admin 字段: * 筛选条件： `admin_age&lt;23 or admin_age&gt;28` 方法一: 方法二： 案例7: 查询年龄大于25的男性管理员信息 表: ali_admin 字段: * 筛选条件: admin_age&gt;=25 and admin_gender=&apos;男&apos; 2.3 in关键词集合: 一组相同类型的数据，使用()来包含，括号内使用 ， 分隔开 (1, 2, 3, 4, 5) (‘潮科技’, ‘会生活’, ‘奇趣事’, ‘美奇迹’) 案例8: 查询年龄为20、28的女性管理员信息 表： ali_admin 字段： * 筛选条件： admin_gender=&apos;女&apos; and （admin_age=20 or admin_age=28） 方式一: 方式二： 2.4 模糊查询通配符: %: 代表任意长度(包括0)的任意字符 _: 代表1位长度的任意字符 ​ a%b : ab abb a对萨达b a_b: acb atb a的b a_b%: acb a&amp;baaad like: 在执行模糊查询时，必须使用like来作为匹配条件 案例9: 查询邮箱地址中包含字符h的管理员信息 表： ali_admin 字段： * 筛选条件： admin_email like &apos;%h%&apos; 案例10: 查询包含“科技”关键词的文章信息 表： ali_article 字段： * 筛选条件：admin_title like ‘%科技%’ 案例11: 查询邮箱以a字符开头并且包含n的管理员信息 表： ali_admin 字段： * 筛选条件： admin_email like ‘a%n%’ 2.5 order by 排序order by 可以对查询结果按某个字段的升降进行排序 升序 asc （默认值） ， 降序 desc 可进行排序的字段通常是 整型 英文字符串型 日期型 (中文字符串也行,但一般不用) 案例12: 查询所有的栏目信息，并按别名的降序排列 表： ali_cate 字段：* 排序条件： cate_slug desc 案例13: 查询所有栏目信息，并按发布时间升序排列 表：ali_cate 字段： * 排序条件：cate_addtime asc 案例14: 查询所有男性的管理员信息，并按照创建时间降序排列 表： ali_admin 字段：* 筛选条件： admin_gender=&apos;男&apos; 排序：admin_addtime desc 2.6 limit 限制limit用来限制查询结果的起始点和长度 格式: limit var1, var2 var1: 起始点。 查询结果的索引，从0开始。 0代表第一条数据 var2: 长度 案例15: 查询年龄最大的3名男性管理员的信息 表： ali_admin 字段： * 筛选： admin_gender=&apos;男&apos; 排序：order by admin_age desc 限制：limit 0,3 案例16: 将文章按发布时间逆序排列，并取出第三条到第五条 表： ali_article 字段：* 排序： article_addtime desc 限制：limit 2,3 将 * 解释成对应的字段需要 0.0001秒，但是人多了之后就会变慢。 2.7 多表查询关键词: join on 格式: select * from 表1 join 表2 on 链接条件 链接条件一定是 表1的某个字段 = 表2的某个字段 案例: 查询学生的全部信息，系别需要使用系名来进行显示 表： student dept 字段: student.* dept.dept_name 原理: 案例17: 查询所有文章信息，作者使用昵称显示 表： ali_article ali_admin 字段： ali_article.* ali_admin.admin_nickname 案例18: 查询大牛发布的所有文章信息，作者使用昵称显示 表： ali_article ali_admin 筛选： admin_nickname=’大牛’ 案例19: 查询属于潮科技和奇趣事的所有文章 表：ali_cate ali_article 筛选条件： cate_name in (‘潮科技’, ‘奇趣事’) 案例20: 查询所有文章信息，作者使用昵称显示，栏目使用栏目名显示 表： ali_article ali_admin ali_cate]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17-创建数据表]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F17-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[1. 关系型数据库1.1 关系型数据库简介 案例: 创建一个数据表，能够保存学生的基本信息(学号、姓名、年龄等)和学生每一科的考试成绩 1) 一张表的形式 缺点: 重复数据太多（数据冗余） 2) 关系型数据库: 缺点: 表多优点: 数据耦合性低 每个数据表都能够独立管理 1.2 student 和 dept表 目标: 创建student和dept表用来存储学生的基本信息、学院基本信息和学生所属的学院信息 student：学生表，所需字段 学号、姓名、性别、年龄、系别 1234567create table student( sno int UNSIGNED auto_increment primary key, sname varchar(20) not null, sage tinyint UNSIGNED not null, sgender enum('男','女') not null, sdept tinyint UNSIGNED not null)engine=myisam default charset=utf8; dept：系别表，所需字段 系号 系名 1234create table dept( dept_id tinyint UNSIGNED auto_increment primary key, dept_name varchar(20) unique not null)engine=myisam default charset=utf8; 1.3 ali_admin、ali_cate和ali_article的关系 目标: 创建 ali_cate表和ali_article表，用来保存栏目基本信息、文章信息 以及 作者、栏目、文章的关系 ali_cate表（栏目表）： 栏目id (主键)、 栏目名、栏目别名、栏目创建时间 123456create table ali_cate( cate_id tinyint UNSIGNED auto_increment primary key, cate_name varchar(10) unique not null, cate_slug varchar(30) UNIQUE not null, cate_addtime date not null)engine=myisam default charset=utf8; ali_article（文章表）： 文章id（主键）、文章标题、文章内容、文章作者、所属栏目、发布时间、文章状态（草稿、已发布） 123456789create table ali_article( article_id int UNSIGNED auto_increment primary key, article_title varchar(30) UNIQUE not null, article_content text not null, article_adminid int UNSIGNED not null, article_cateid tinyint UNSIGNED not null, article_addtime int not null, article_state enum('草稿','已发布'))engine=myisam default charset=utf8;]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16-创建数据表]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F16-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[创建数据表创建表的基本格式语句格式: CREATE TABLE 表名 ( 列名 数据类型(长度) 完整性约束条件, 列名 数据类型(长度) 完整性约束条件, ...... ) engine=myisam default charset=utf8 注意事项: 列名、数据类型、长度是必有的； 完整性约束条件可以没有 最后的 utf8 没有 - 创建用户表 – users 案例: 在cms数据库中，创建一张users数据表，该表中只保存用户id和用户名两个字段 一定要先选中 cms 库，再去打开查询编辑器 uid int (5) : uid字段是整型的，长度是5 (0–99999) uname varchar(20): uname字段是字符串类型，长度是20]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[15-创建/删除数据库]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F15-%E5%88%9B%E5%BB%BA%E3%80%81%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[创建/删除数据库操作数据库需要使用SQL语句（结构化查询语言） 1) 创建数据库 语法格式: create database 库名; 示例: create database study; 创建一个名为 study的数据库 create database cms: 创建一个名为 cms 的数据库 2) 删除数据库: 语法格式: drop database 库名; 示例: drop database school; 删除school库 drop database cms; 删除cms库]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[14-MySQL数据库服务器]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F14-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[MySQL数据库服务器什么是数据库存储数据的仓库。 常见的数据库: MySQL、 Oracle、 Sqlserver、 DB2等。 MySQL简介MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品 MySQL结构 在一个MySQL服务器中有多个数据库，每个数据库又有多个数据表。 数据是存储在数据表当中的。 数据表的结构和excel一模一样 表结构: 和excel表的结构是一样的。 每一列都是一类数据 --- 字段 每一行代表一条数据 --- 记录 安装客户端MySQL是一款C/S结构的软件。 MySQL本身是服务器端。 常见的客户端: CMD 、 Navicat、 Sqlyog、 phpmyadmin等等 安装 Navicat 1.解压 2.选择安装版本 3.选择安装路径 继续下一步… 4.链接服务器 ① 点击“链接”按钮 — 选择要链接的数据库种类 ② 配置链接信息 用户名： root 该用户是MySQL服务器系统的最高用户，拥有该系统的所有权限 密码： root phpstudy中MySQL系统root用户的默认密码 ③ 点击“localhost”结果 左侧的localhost下的内容都是数据库名称。 information_schema、mysql、performance_schema 这三个是系统数据库。 其他的都是自建数据库 看到上图，说明已经使用navicat 客户端正常链接到了 MySQL服务器了。]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-Http协议]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F13-Http%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[Http协议Http协议概述协议: 就是事先的一种约定、规则、规范、标准。（租房合同、工作合同）。 HTTP协议：HyperText Transfer Protocol 超文本传输协议，客户端（浏览器端）与WEB服务器端之间的交互协议。当浏览器和服务器进行数据交换时，html文件、图片、CSS、JS等都是基于HTTP协议进行传输的。 HTTP协议有两个版本: 1.0 和 1.1，目前使用的基本都是1.1 特点: 通常是基于 B/S 结构软件的。 无连接: 浏览器向服务器发送一次请求，服务器响应一次，链接即结束。 无状态: 无记忆。 服务器不能记住哪个浏览器访问过。 无连接 – 没有持久化链接当浏览器地址栏输入 www.baidu.com/index.html，按下回车时。浏览器向服务器发送请求。 服务器找到index.html文件返回给浏览器之后，本次链接断开。 如果在点击该页面中任何一个链接，则重新建立一次链接。客户端发送请求，服务器响应。之后又断开链接。 请求和响应HTTP协议主要分为两大部分: 请求: 访问服务器的任何一个文件都是一次请求 响应: 服务器处理请求，将结果返回给浏览器。 请求( request / http request)(请求报文)客户端(浏览器)向服务器索要数据时遵循的协议 请求分为3个部分: 请求行 请求头 请求主体请求行: 请求方式、请求URL地址、协议版本号 请求头: 主机域名，客户端(浏览器)的信息等 请求主体: 发送给服务器的数据，get和post都会通过请求主体将数据发送给服务器 可以使用Chrome tools 或者 firebug 来查看请求和响应的信息（F12） 主要请求项: host： 主机名和端口号，80端口默认不显示 accept： 可接受的程序类型 accept-encoding： 可接受的压缩类型 accept-language： 可接受的语言类型 cache-control： 缓存控制 案例1: 访问 localhost/php4/code/http/index.html 文件 通过F12进行查看 点击 index.html就能看到右侧的三个信息 案例2: index.html表单数据提交到index.php文件 post方式提交的数据叫 FormData，以字符串形式将数据进传递 案例3: index.html页面中a标签跳转到get.php文件 get传值叫做 Query String Parameters 响应( response / http response)(响应报文)响应也分为3部分: 响应行 响应头 响应主体 响应行: 协议版本号、响应结果 状态码 响应头: 主要是服务器端的信息 响应主体: 就是从服务器返回给客户端的数据 主要响应项： content-type： 响应内容类型， content-type:text/html，服务器告诉浏览器，返回的这部分数据是文本类型，使用html方式来解析即可。 content-length： 响应内容的长度 ，content-length:336, 从服务器返回给浏览器的数据总长度为336字节 案例1: 访问 localhost/php4/code/http/index.html 文件时的响应信息 案例2: index.html表单数据提交到index.php文件的响应信息 案例3: index.html页面中a标签跳转到get.php文件的响应信息 状态码常见的状态码如下: 200 ok ----- 请求成功 302 redirect|Found ----- 重定向 304 not modified ----- 缓存文件 403 forbidden ----- 禁止访问 （没有权限访问） 404 Not Found ----- 未找到页面 500 internal server error ----- 服务器内部错误 (可能是服务器本身有问题，或者代码错的太离谱) header响应头设置设置响应类型浏览器发起请求的方式是多样的，当发起请求后服务端会有对应的内容响应过来，浏览器会根据响应头==Content-Type==来对响应的内容进行解析 content-type主要的响应类型是 text/html 其他常见类型 : text/css text/javascript image/png image/jpeg image/gif 注意: 所有的响应类型都是 大范围/小类型， 千万不能写反 案例1: php绘制的验证码 verify.php 如果改为 text/html 案例2: link标签发送请求 ① 创建html文件，使用link标签引入一个php文件 ② 在h1.php文件中，设置响应类型（content-type为css） 访问结果: 指定字符集 中文字符集: utf-8 gb2312 gbk header(&apos;Content-Type:text/html;charset=utf-8&apos;); header(&apos;Content-Type:text/html;charset=gb2312&apos;); 页面乱码问题处理方式： 页面乱码是因为 文件编码 和 页面指定编码 不一致，所以解决该问题就是要 统一文件编码和页面指定编码 ① 在页面中设置 header ，编码指定为 utf-8 ② 将文件的编码格式，指定为utf-8 (使用sublime，将保存格式设置为 utf-8 或者 使用editplus另存为文件时，设置utf-8) 如果 header设置为 utf-8，则文件编码格式也要设置为 utf-8 如果 header设置为 gbk，则文件编码格式要设置为 ANSI ① 在sublime创建charset_utf8.php 访问结果: ② 在windows中直接创建 charset_gbk.php 访问结果: 原因: sublime创建的文件是utf-8编码的，和页面中header设置的字符集一致，所以能正常显示。 windows创建的文件是ANSI编码的, 而页面中header设置的字符集是utf-8，两者不一致，所以乱码了。 解决方案: ① windows创建的文件，header要设置为 gb2312或者gbk ② 将windows创建的文件，改为utf-8编码 修改文件编码可以使用editplus或者sublime都行 现在我们常用的sublime和vs，创建的都是utf-8编码格式的文件，所以，header要设置为 utf-8 页面重定向header(&apos;location:页面地址&apos;); header(&apos;refresh:2;url=页面地址&apos;); 扩展内容:]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12-PHP文件读写]]></title>
    <url>%2F2017%2F04%2F25%2FPHP%2F12-PHP%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%2F</url>
    <content type="text"><![CDATA[文件读写读取文件内容123string file_get_contents(string $file);参数: 文件路径，可以是本地文件的路径，也可以是网络地址返回值: 文件内容 123456789/** * 获取文件内容 * 参数: 要获取的文件的路径，该路径可以是本地文件路径， * 也可以是网络文件路径 * 返回值: 文件内容 */echo file_get_contents('./data.txt');echo file_get_contents('http://s1.bdstatic.com/r/www/cache/static/home/css/index.css'); 向文件中写入内容12345int file_put_contents(string $file, string $data[, constants flag]);参数1: 文件路径参数2: 要写入文件的字符串参数3: 可选参数，默认不写，新内容覆盖原文件中的内容；FILE_APPEND是向文件中追加内容返回值: 写入文件的字符串长度 序列化 和 反序列化file_put_contents函数不能将数组直接写入文件，因为数组不能直接转化为字符串。 string ==serialize==($arr): 将数组转为字符串，该字符串是一种特殊结构的字符串。 array unserialize(string): 将序列化的字符串转为数组 序列化:12345678910$arr = [ ['name'=&gt;'张飞', 'size'=&gt;'1920*1200', 'path'=&gt;'./pic/11.jpg'], ['name'=&gt;'吕布', 'size'=&gt;'1920*1200', 'path'=&gt;'./pic/10.jpg'], ['name'=&gt;'安琪拉', 'size'=&gt;'1920*1200', 'path'=&gt;'./pic/6.jpg'],];/*** 能将数组转为带有数组结构的字符串*/echo serialize($arr); 结果: 1234567891011121314151617a:3:&#123; i:0;a:3:&#123; s:4:"name";s:6:"张飞"; s:4:"size";s:9:"1920*1200"; s:4:"path";s:12:"./pic/11.jpg"; &#125; i:1;a:3:&#123; s:4:"name";s:6:"吕布"; s:4:"size";s:9:"1920*1200"; s:4:"path";s:12:"./pic/10.jpg"; &#125; i:2;a:3:&#123; s:4:"name";s:9:"安琪拉"; s:4:"size";s:9:"1920*1200"; s:4:"path";s:11:"./pic/6.jpg"; &#125;&#125; 反序列化:123456789$str = file_get_contents('./data.txt');/*** 将结构化好的字符串转回成数组* 参数: 结构化好的字符串* 返回值: 数组*/$arr = unserialize($str);print_r($arr); 综合案例–壁纸管理目标：以表格形式将data.txt文件中所有的数据展示出来 思路分析： 1) 从文件中读取数据 — 字符串 2) 将字符串恢复成数组结构(unserialize) — 二维数组 3) 循环将数据进行输出 代码实现: 添加新壁纸 思路分析: 三个文件完成该功能 表单页 、 数据处理页 、 数据保存文件 1) 表单页（upload.html） 保证数据能够正常提交，文件能够正常上传 2) 数据处理页 (upload.php) 123① 文件上传② 接收表单数据③ 将数据写入data.txt文件 i. 将接收到的数据构造成一个一维数组 ($info) ii. 将data.txt文件中原有的数据取出，反序列化成二维数组 （$list） iii. 将$info 追加到 $list中 iv. 将$list序列化后，再写回data.txt文件（覆盖） 3) 数据保存页 (data.txt) 在该文件中保存的数据必须是被序列化过的数组 代码实现: add.html add_deal.php 关键点总结： 1) 表单页（upload.html） 表单要上传文件，所以必须有 enctype属性，必须使用post进行数据提交 2) 数据处理页（upload.php）1234① 因为上传的必须是图片，所以要做检测上传文件类型，还要重命名文件防止覆盖② 创建数组用来保存表单接收的数据，数组应该有三个单元 (name size url)③ 要先将data.txt文件中的数据读出来。如果文件为空，则创建一个空数组，再将表单提交的数据追加到数组中；如果文件不为空，则反序列化成一个数组，再将表单数据追加到数组中。④ 将追加后的新数组序列化，再写入data.txt文件中]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-PHP函数]]></title>
    <url>%2F2017%2F04%2F24%2FPHP%2F11-PHP%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[常用函数日期函数12int time(): 获取当前时间点的时间戳 -- 1970.1.1 00:00:00 到现在的秒数string date(format $str, timestamp $int): 可以将时间戳转为年月日时分秒的形式 123456789101112131415161718date函数说明：参数1: 要显示的时间格式参数2: 时间戳, 可选参数, 如果不指定则为当前时间戳返回值: 指定的时间格式时间格式参数:Y: 4位年m: 带前导0的2位月d: 带前导0的2位日H: 带前导0的2位时i: 带前导0的2位分s: 带前导0的2位秒修改时区有两种方法:1) 使用函数 ---- date_default_timezone_set(); 临时修改2) 修改php配置文件 php.ini 永久修改北京时间: PRC (中国人民共和国) 或者 asia/shanghai (亚洲/上海) 在php.ini文件中永久修改时区的配置项 重启apache服务器，才能使最新的配置项生效。 （只要修改过Apache或者php的配置文件，就都需要重启Apache服务器才能生效。Apache配置文件 httpd.conf） 变量函数123bool empty($var): 判断变量是否为空。如果为空返回 true；反之，则返回falsebool isset($var): 判断一个变量是否被设置。 如果已设置返回true，反之，返回falsevoid unset($var): 删除变量，无返回值 数组函数123bool in_array(mixed, arr): 检查一个值是否存在于一个数组当中array explode(delimiter, str): 使用一个字符串将另一个字符串分割为数组string implode(str, arr): 使用一个字符串将一个数组链接为字符串 字符串函数123456int strlen(str): 获取字符串长度int strpos/strrpos($str, $char): 查询$char字符串在$str字符串中的第一次/最后一次出现的下标string substr（str, start[, length]）: 字符串截取string str_replace（search, replace, str）: 字符串替换string trim（str）: 删除字符串左右两边的空格void die/exit([str]): 结束当前脚本]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-PHP函数]]></title>
    <url>%2F2017%2F04%2F24%2FPHP%2F10-PHP%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数什么是函数函数(function) 是一段完成指定任务的已经命名的代码块。 PHP函数包括内置函数（系统函数）和自定义函数两类 函数的格式PHP声明函数的方式和Javascript一致。1234567891011121314151617181920212223242526272829303132333435 function 函数名称（[参数1 [,参数2 [,…]]]） &#123; 函数体; //如需函数有返回值时使用 [return 返回值;] &#125; ``` ## 变量的作用域 核心概念: 在函数体外定义的变量，在函数体内无效 在函数体内定义的变量，在函数体外无效![](/images/php/1533949815695.png)- 全局变量 和 局部变量: - 局部变量: 函数体内的变量，该变量只在函数范围内有效。 - 全局变量: 函数体外的变量，在整个php文件中都有效（除了函数）。## 文件包含文件包含一共有4个函数: include、include_once、require、require_once **文件A中包含文件B，那么文件B就相当于文件A的一部分。** 注意事项: ```php 如果文件A和文件B定义了相同的变量，则会发生覆盖。 如果文件A和文件B定义了相同的函数，则会发生致命错误。 include require include_once require_once 四个语句的区别： 1) include在包含一个不存在的文件时，会产生一个Warning错误，程序不会中断继续执行；而require会产生Fatal错误，中断执行。 2) include_once和require_once的区别：include_once只会加载一次相同的文件，而inlcude会加载多次。 3) 在实际开发中基本使用 include_once或者require_once static静态变量 当一个变量使用static进行修饰时，该变量在整个php页面运行过程中只有一份。 每次调用 aaa() 函数时，都会去静态内存区寻找是否有 $i。如果没有，则创建$i并进行赋值；如果有，则直接使用，跳过赋值过程。 static在递归操作中非常有用。 global全局变量 如果在一个函数体内想强行使用函数体外定义的变量，可以使用global关键词来声明。 $GLOBALS的功能和global差不多，都不推荐使用。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-PHP文件上传]]></title>
    <url>%2F2017%2F04%2F24%2FPHP%2F09-PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[文件上传 文件上传属于一种特殊的表单提交，也需要两个页面 — 表单页 和 数据处理页。 upload.html表单页 upload.php 上传文件处理页 文件上传核心点总结: 核心点一：表单设计表单标签form中必须额外增加 enctype属性，必须使用post提交表单 文件域必须有name属性和值 核心点二 — $_FILES$_FILES是一个二维数组，保存了上传文件的相关信息： 第一维下标是 文件域的name值 第二维有5个固定单元 name: 上传的文件名 type: 上传的文件类型 tmp_name: 上传文件在服务器临时存储的路径 error: 错误码，错误码有0-4 5个值。 等于0时，代表文件正常上传 0：代表正常上传，没有错误 1：代表上传文件大小超过了 php.ini中 upload_max_filesize 定义的大小 2：代表上传文件大小超过了 php.ini中 post_max_size 定义的表单最大值 3：文件只有部分被上传 4：没有文件被上传 size: 上传文件的大小 bit 核心点三 — move_uploaded_file**从$_FILES中我们可以知道，文件已经正常上传到服务器了。 所以，接下来就需要将文件从临时保存路径，移动到我们希望保存的路径中。 move_uploaded_file (参数1， 参数2)； 参数1: 临时路径 —&gt; $_FILES[‘pic’][‘tmp_name’] 参数2: 目标路径 —&gt; 使用相对路径移动到当前目录下 ./]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-PHP超全局变量]]></title>
    <url>%2F2017%2F04%2F24%2FPHP%2F08-PHP%E8%B6%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[超全局变量(预定义数组)什么是超全局变量超全局变量是PHP内置的变量，在每一个php文件中都可以直接使用。 特点: 在每个页面都能直接使用 内部都是**关联数组**结构 非常重要: $_GET、$_POST、$_SESSION、$_COOKIE、$_FILES知道: $_SERVER、$_REQUEST、$GLOBALS $_SERVER$_SERVER记录了服务器和客户端的主要信息，和当前页面的信息 重点记住的内容: REQURES_URI ： 访问的文件地址 SCRIPT_NAME： 脚本名称（路径） PHP_SELF： 自身文件名 访问的文件的绝对路径。 此处的绝对路径是和域名绝对 /php2/code/server.php –&gt; localhost/php2/code/server.php get/post方式接收表单数据表单处理通常需要两个页面： 1) form.html，表单页，用户可以在表单页上填写相关数据 2) form.php , 数据接收处理页， 接收用户在表单填写的数据，然后做进一步处理 代码实现： form.html form.php注意: 表单中每个域的name值，会作为$_POST的下标 表单提交关键点总结: 表单页: form.html 1) 必须有form表单标签，form必须有action 和 method 两个属性 action: 指定表单数据提交的位置 — php/jsp/asp文件的路径 method: 表单提交的方式， post 、get(默认) 2) 每个表单域都要有name属性 input select textarea 3) 必须有submit类型的按钮 数据接收处理页： form.php 1) method=post时，使用$_POST接收数据 2) method=get时，使用$_GET接收数据 3) 不管是$_POST还是$_GET，都是一个关联数组，数组的下标就是表单域中 name 属性的值 每种域和类型的提交方式 表单标签： form 、 input 、 select 、 textarea 表单提交的实际上是每个域的value值 1) input type= text/password/hidden/email 提交的就是value属性中的值 2) input type=radio 提交的是选中项的value值。value必须设置，否则后端会接收 on 3) input type=checkbox 在name的值后增加[] 转换成数组结构，后端才能接收到所有的已勾选项 4) select name值需要定义在select标签中； value定义在option中，每条option都有自己的value 如果不定义option中的value，则会将option中间的内容发送到后端页面中 5) textarea name值定义在textarea标签中，value没有显式的表示出来，就是开始标签和结束标签之间的内容 post和get的区别 (非常重要)通过URL地址栏来区分post和getget将提交数据拼接成字符串显示在URL地址栏中post不显示 1) 提交方式 get会将数据显式的拼接到url地址栏中 (字符串)例如： form.php?id=10001&amp;username=heiheihei&amp;passwd=123456&amp;key=value….key=value方式传参，多个参数之间使用&amp;符号隔开 id、username、passwd等等（键/key）都是表单域的name值 1、heiheihei、123456等等（值/value）都是表单域的value值 post不会显示出来 2) 传递数据量大小 post最小值是2M，默认8M，可以通过修改php配置(php.ini)文件来修改大小，理论上没有上限的。 get会受到浏览器的地址栏的限制。有的是2k，有的是8K(chrome) 3) 应用范围不一样 post在绝大多数情况下都使用在表单提交中。 get的应用范围比较广。在a标签的href中，location.href中等都能使用get方式。 $_REQUEST $_REQUEST 即可以接收get方式提交的表单，也能接收post方式提交的表单。但是因为速度比较慢，所以现在被弃用。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-PHP数组]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F07-PHP%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组 12var arr = [123, 'abc', 234]; console.log(arr[1]); PHP的数组分为索引数组和关联数组两类: 12索引数组: **下标是数字**的数组就是索引数组关联数组: **下标是字符串**的数组就是关联数组 (重点) 格式： 12$arr = array();$arr = []; 123456789//声明索引数组// 0 1 2$arr1 = array('福禄娃', '海绵宝宝', '猪猪侠');$arr2 = array(3=&gt;'蜘蛛侠', 6=&gt;'钢铁侠', 10=&gt;'煎饼侠');$arr3 = ['张无忌', '赵敏', '灭绝师太'];//声明关联数组 -- 下标是字符串$info = ['name'=&gt;'张二狗', 'age'=&gt;20, 'gender'=&gt;'男'];$goods_info = ['goods_name'=&gt;'小米 8', 'goods_price'=&gt;1999]; 数组读写 不管是索引还是关联数组，都是通过下标来进行读写控制的。123456echo $arr2[6];//下标是字符串，一定要加引号// 如果不加引号就会变为常量echo $info['name'];$goods_info['goods_name'] = '小米 note 3'; 数组遍历foreach 语句结构，用来遍历数组(关联数组和索引数组均可)。 格式: 123foreach($arr as $key=&gt;$value)&#123;程序体&#125;foreach($arr as $value)&#123;程序体&#125; $arr : 要遍历的数组 12$key: 单元的下标，可以是任意变量名$value: 单元的值，可以是任意变量名 12345678910111213141516171819202122&lt;?php $arr = ['张无忌', '赵敏', '灭绝师太'];//第一次循环，将第一个单元取出//将单元的下标，赋值给$key//将单元的值， 赋值给$value//第二次循环，将第二个单元取出，赋值步骤同上foreach ($arr as $key=&gt;$value) &#123; echo $key . "-" . $value . '&lt;br&gt;';&#125;$goods_info = ['goods_name'=&gt;'小米 8', 'goods_price'=&gt;1999];foreach ($goods_info as $k=&gt;$v) &#123; echo $k . '-' . $v . '&lt;br&gt;';&#125;//如果as后面只有一个变量，该变量就是数组的单元值foreach ($goods_info as $value) &#123; echo $value;&#125;?&gt; 二维数组和多维数组 一维数组的单元中，保存了一个数组，那么该数组就是二维数组 二维数组可以想象成一个表格 二维数组同样也用下标来进行控制 二维数组常用来存储一组相似/相关的数据 二维数组的每个单元都保存一个一维数组，就是三维数组；三维数组的每个单元都保存一个数组就是四维数组； 依次类推，可以到n维。在一般开发中，最常用的是一维和二维数组，三维极少使用。 123456//同质数据$list = [0=&gt;['name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'],1=&gt;['name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'],2=&gt;['name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女'],]; 遍历二维数组核心思想： 使用foreach取出第一维的数据（数组），第二层通过下标输出 12345678910111213141516171819$list = [0=&gt;['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'],1=&gt;['id'=&gt;2, 'name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'],2=&gt;['id'=&gt;3, 'name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女'],];//通常在实际开发当中，都只用一层foreach;//第二层数据的显示，使用$value[下标]//$value是一位数组//第一次循环: $value = ['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'];//第二次循环: $value = ['id'=&gt;2, 'name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'];//第三次循环: $value = ['id'=&gt;3, 'name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女']foreach ($list as $key=&gt;$value) &#123; echo $value['id'] . ' '; echo $value['name']. ' '; echo $value['age']. ' '; echo $value['gender']; echo "&lt;br&gt;";&#125; 将数组输出成一个表格方式一 : 使用echo来输出整体的表格结构，再用foreach来循环输出tbody中的结构和数据12345678910111213141516171819202122232425$list = [0=&gt;['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'],1=&gt;['id'=&gt;2, 'name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'],2=&gt;['id'=&gt;3, 'name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女'],];echo "&lt;table border='1' width='600'&gt;";echo "&lt;thead&gt;";echo "&lt;tr&gt;";echo "&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;";echo "&lt;/tr&gt;";echo "&lt;/thead&gt;";echo "&lt;tbody&gt;";//以第一次循环为例//$value = ['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'];foreach ($list as $value) &#123; echo "&lt;tr&gt;"; echo "&lt;td&gt;".$value['id']."&lt;/td&gt;"; echo "&lt;td&gt;".$value['name']."&lt;/td&gt;"; echo "&lt;td&gt;".$value['age']."&lt;/td&gt;"; echo "&lt;td&gt;".$value['gender']."&lt;/td&gt;"; echo "&lt;/tr&gt;";&#125;echo "&lt;/tbody&gt;";echo "&lt;/table&gt;"; 方式二: 提前定义好表格结果，只循环tbody中的内容 12345678910111213141516171819202122232425262728&lt;?php //同质数据$list = [0=&gt;['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'],1=&gt;['id'=&gt;2, 'name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'],2=&gt;['id'=&gt;3, 'name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女'],];?&gt;&lt;table border="1" width="600" class="a"&gt; &lt;thead class="b" style="color:red"&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php foreach ($list as $value) &#123; ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $value['id']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $value['name']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $value['age']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $value['gender']; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php &#125; ?&gt; &lt;/tbody&gt;&lt;/table&gt; print_r函数 该函数不但能够输出基本类型，还能够输出数组，在项目开发时经常使用该函数查看数组中的所有数据。 debug的核心思想就是跟踪变量，一段程序中所有变量中保存的是自己需要的数据，程序才在自己的掌控之下。 12$info = ['id'=&gt;10001, 'name'=&gt;'张飞', 'age'=&gt;21, 'gender'=&gt;'男'];print_r($info); 123456$list = [0=&gt;['id'=&gt;1, 'name'=&gt;'zs', 'age'=&gt;20, 'gender'=&gt;'男'],1=&gt;['id'=&gt;2, 'name'=&gt;'ls', 'age'=&gt;21, 'gender'=&gt;'女'],2=&gt;['id'=&gt;3, 'name'=&gt;'ww', 'age'=&gt;19, 'gender'=&gt;'女'],];print_r($list); 使用 echo 来输出数组，则会得到以下错误]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-PHP流程控制]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F06-PHP%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[流程控制选择结构 (if…else)1234567891011121314if(判断表达式)&#123; 程序块1;&#125; else &#123; 程序块2;&#125;if(判断表达式)&#123; 程序块;&#125; elseif(判断表达式) &#123; 程序块;&#125; ...&#123;&#125; else &#123; 程序块;&#125; 小练习：判断三个变量中的最大值 123456789101112131415161718header('content-type:text/html;charset=utf-8');$a = 40;$b = 50;$c = 30;if ($a &gt; $b) &#123; if ($a &gt; $c) &#123; echo '最大值是：$a'; &#125; else &#123; echo '最大值是：$c'; &#125;&#125; else &#123; if ($b &gt; $c) &#123; echo '最大值是：$b'; &#125; else &#123; echo '最大值是：$c'; &#125;&#125; 小练习：判断时间，提示不同的问候语 12345678910111213141516header('content-type:text/html;charset=utf-8');$time = 10; //此处应该动态获取当前时间（小时）。因为没有学过动态获取时间，先固定成某个值if ($time &gt;= 0 &amp;&amp; $time &lt; 6) &#123; echo "凌晨好";&#125; else if ($time &gt;= 6 &amp;&amp; $time &lt; 12) &#123; echo "上午好";&#125; else if ($time &gt;= 12 &amp;&amp; $time &lt; 18) &#123; echo "下午好";&#125; else if ($time &gt;= 18 &amp;&amp; $time &lt; 24) &#123; echo "晚上好";&#125; else &#123; echo "时间有误";&#125;#不允许这么写。没有这种语法 6 &lt;= $time &lt; 12 循环结构 (while / for / do…while)123456789101112131415while(判断表达式)&#123; 程序块;&#125;for(赋值表达式; 判断表达式; 步进表达式)&#123; 程序块;&#125;do&#123; 程序块&#125; while(判断表达式)下面循环执行几次?for(i = 1; i == 1; $i++)&#123;&#125;for(i = 1; i = 1; $i++)&#123;&#125; 小练习：输出1-100之间的偶数 12345for ($i = 1; $i &lt;= 100; $i++) &#123; if ($i % 2 == 0) &#123; echo $i . "&lt;br&gt;"; &#125;&#125; 小练习：输出九九乘法口诀表 123456for ($i = 1; $i &lt;= 9; $i++) &#123; for ($j = 1; $j &lt;= $i; $j++) &#123; echo $i * $j . "&amp;nbsp;"; &#125; echo "&lt;br&gt;";&#125; 分支结构 (switch)12345678910111213switch(变量)&#123; case 值1: 程序块1； break; case 值2: 程序块2； break; ... default: 程序块&#125;// 变量一般使用 : 整型 字符 字符串 小练习：不同语言的”我爱你”1234567891011121314151617181920212223header('content-type:text/html;charset=utf-8');$lang = 'dasdsad';switch ($lang) &#123; case 'zh-cn': echo "我爱你"; break; case 'en-us': echo "I love you"; break; case 'de-de': echo "Ich liebe dich"; break; case 'ja-jp': echo "あなたのことが好きです"; break; case 'fr-fr': echo "Je t'aime!"; break; default: echo "语种错误"; break;&#125; 特殊语句 (continue、 break) contiune: 结束当前循环，直接跳入下一次循环 break: 结束整个循环]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-PHP变量]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F05-PHP%E5%8F%98%E9%87%8F%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[变量变量命名规则： 由字母、数字、下划线组成，必须以字母或者下划线起头 变量的长度可以是任意的，但不能超过255个字符 最前面需要加 $ 变量名最好有意义，能够做到见名知意 当变量名由多单词组成时，最好使用下划线分割或者使用驼峰命名法 PHP变量区分大小写 1234567891011121314151617181920&lt;?php // 正确的变量名$int = 123;$str = 'abc';$str1 = "def";// 变量名区分大小写$INT = 234;echo $int;echo $INT;// 推荐的变量名$goods_name = "华为 保时捷";$goodsPrice = 10888;$a = 'big';$big = 123;echo $$a; //可变变量 echo $big?&gt; 思考：以下变量名哪些是正确的： 1$a、 $var、 $_123、 $1b、 $b1c2、 $_#abc 双引号和单引号的区别双引号中的变量会被解释为值 单引号中的变量会被解释为字符串 单引号的执行速度会快于双引号的速度 常量保存不会发生改变的数据(如：3.1415， 路径等)时，最好使用常量。 常量的使用方法： 1) 声明: define(常量名, 常量值, 大小写区分标志); true（不区分）/false（区分/默认）; 2) 调用: echo 常量名; 运算符运算符种类 算术运算符 字符串运算符 赋值运算符 比较运算符 逻辑运算符 其他运算符 算术运算符： 特殊案例:1234567$str = "abc";$int = 20;echo $str + $int; //20$str = "5";$int = 20;echo $str + $int; //25 赋值运算符： $a += $b $a = $a + $b 比较运算符： 逻辑运算符： 异或: (了解)1234true xor true = falsetrue xor false = truefalse xor true = truefalse xor false = false 其他运算符： 三元运算符: 判断表达式？值1：值2 php默认内置有4种错误： 1234notice： 通知错误Warning error： 警告错误Parse error： 解析错误Fatal error： 致命错误 @不能屏蔽掉所有的错误。 也不建议在实际开发中使用该符号12345678&lt;?php // 语法错误是不能被屏蔽掉的@$books = "JavaScript"echo $books;// 大多数其他错误是可以被屏蔽掉的@abc();?&gt; 字符串链接运算符 字符串拼接: （ . ） 在php中字符串拼接: . 与js中的 + 号 拼接符使用方式一致 在php中 + 号 是运算符。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-PHP运行原理]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F04-PHP%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[PHP运行原理##HTML运行原理 1) 在浏览器的URL地址栏中输入 www.baidu.com/index.html 地址，点回车。请求就发送给百度服务器。 2) 百度服务器找到index.html文件，并将文件的内容返回给浏览器 3) 浏览器接收到index.html中的内容，渲染到页面上。 同理: localhost/a.html , 则会返回 本机web服务器根目录下 a.html文件的内容。浏览器拿到内容后进行渲染。 PHP运行原理 apache不认识php 浏览器也不认识php 1) 在浏览器地址栏中输入 localhost/index.php ,点回车之后。将请求发送给apache服务器。 2) 服务器找到 index.php文件之后，转发给php解释器 3) php解释器将index.php文件中的php代码全部转为html，再返回给apache 4) apache将处理好的html返回给浏览器，浏览器渲染后就可以看到页面 PHP的数据类型 PHP数据类型一共有8种: 基本类型(标量): 整型: 整数， 例如: 10, 234, -20, -35 浮点型: 小数, 例如: 3.1415, 2.13, 35.123 布尔值: true/false 字符串: 使用单引号/双引号包含的内容, 例如: ‘abc’, “王者荣耀” 复合类型: 数组 对象 特殊类型: 资源 null (空)]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-PHP介绍]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F03-PHP%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[初识PHP第一个程序 — Hello World1) 在WWW目录下创建如下目录结构： php1/code/ 2) 在code目录下创建 hello.php 文件 3) 使用sublime（或其他编辑器）打开hello.php，编写如下代码 4) 访问测试 在浏览器中输入：localhost/php1/code/hello.php 程序解析1) php文件不能使用中文进行命名， 浏览器地址栏不允许出现中文———在实际开发中摒弃中文 2) 在浏览器中查看任何文件（不管是html还是php）都必须使用localhost 3) PHP程序可以和HTML进行混编，可以写在HTML中的任何位置，head、body，任何标签，任何属性均可 4) php语言的标记12&lt;?php php代码 ?&gt; 标准标记&lt;? php代码 ?&gt; 短标记（需要修改php.ini文件打开） 5) 指令分隔符：必须使用（不然会报错）1PHP语句使用 ‘;’ 结束 6) echo相当于js的 document.write 能够在页面上输出内容，包括输出标签、css样式代码等 7) php文件中可以编写html、css、js代码，但是html文件中不能编写php代码。也就是说后缀是php的文件才能编写php代码 URL解析URL地址说明URL: uniform resource locator 统一资源定位器 localhost &lt;==&gt; http://localhost:80/index.html （全URL） http: 超文本传输协议 localhost: 域名。（一般域名：www.taobao.com，www.sina.com.cn） localhost是特殊域名，每一台电脑都有，并且指向当前使用的电脑 80: 端口号。 apache的默认端口号为80，所以可以省略不写 (tips:很多web服务器默认端口都是80 Nginx IIS) index.html: 访问的文件的路径 (localhost指向了 d:/phpstudy/WWW)，所以该url地址访问的是 d:/phpstudy/WWW/index.html文件 如果没有指定访问的文件，则默认会访问index.html文件；如果没有index.html文件，则会以列表形式显示当前目录下的所有文件夹和文件localhost: D:\phpStudy\WWW IPIP: Internet Protocol 互联网协议，是为计算机网络相互连接进行通信而设计的协议。 处于网络（互联网、局域网）上的任何一台计算机都有一个独立的ip地址。 1ip地址由4段3位长度的数字组成， 3位数字的取值范围 0-255。如： 102.15.201.10 特殊ip:12127.0.0.1 : 回环地址，每一台电脑都有该ip，指向当前使用的电脑192.168.**.* *: 该网段是专门用于做==局域网==的ip段。 域名域名（Domain Name）： 每个网站都有一个自己的域名。人们可以在浏览器中输入域名来访问对应的网站。 淘宝: www.taobao.com 百度: www.baidu.com 特殊域名：1localhost: 本地主机。在浏览器中输入localhost就会访问当前操作的这台电脑的web服务器。 DNS DNS: Domain Name System 域名系统。在DNS服务器中保存了域名和IP的映射关系。主要工作是将域名转换为IP地址，因为我们通过浏览器访问网站时，实际上是去找对应的IP地址。 域名: 网站的名称，就相当于人名。 IP: 网站在网络上的实际地址，就相当于人的住址。 一般访问网站时都是输入域名的(例如： www.tmall.com www.163.com)，但是在实际访问时域名会被DNS转换为IP地址。 DNS工作机制图: hosts文件可以手动设置域名和IP的映射关系 dns缓存可以保存曾经访问过的域名和IP的映射关系 工作步骤: 1) 在浏览器中输入 www.taobao.com，按下回车 2) 浏览器首先在本机中的 hosts文件和dns缓存中查询，www.taobao.com的IP地址。如果有，则获取该IP地址，然后去访问淘宝服务器。 如果没有，则向dns服务器发送解析请求。 3) dns服务器获取到浏览器请求信息之后， 将域名转换为IP地址，再将IP地址返回给浏览器。 4) 浏览器获取到IP地址，然后通过IP地址访问淘宝服务器。 windows下查看dns缓存: 1windows下查看dns缓存: 思考：IP地址和域名是不是一一对应的？ 有域名没有IP； 有IP没有域名；一个IP可以对应多个域名。 端口 端口是英文port的意译。端口可以理解为区分服务器上服务的标号。 已被占用的著名端口号： 1234580: Web端口号， Apache、Nginx、IIS21: FTP端口号， FTP软件22: SSH端口号25: sendmail端口号...... 因为Web服务的默认端口号是80，所以在地址栏可以不输入，但是如果将端口号改为其他的（如：8088），那就必须输入端口号，才能正常访问。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-PHP安装环境 （phpstudy）]]></title>
    <url>%2F2017%2F04%2F23%2FPHP%2F02-PHP%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装环境 （phpstudy） phpstudy是一个集成环境，集成了Apache（IIS和nginx）、PHP、MySQL。 安装该软件后，PHP开发的程序就能运行了。 准备工作解压phpstudy包 解压后: 安装双击安装文件即开始安装 特别注意: phpstudy的安装路径中不允许出现中文，今后安装所有开发相关的软件时也都安装在英文路径下 此处选择“是” (也许会在这之前弹出一个空白的网页，不要管他，关闭就会出现下面的情况) 设置防火墙允许访问， Apache和MySQL都要允许 开启Apache和MySQL服务： 绿色圆圈表示启动， 红色方块表示停止 打开浏览器输入 测试: 开启任意浏览器，输入下列地址 127.0.0.1 、 127.0.0.1:80 localhost 、 localhost:80 看到上图说明已经安装成功 phpstudy目录结构 phpstudy集成了 Apache、IIS、nginx三种最常见的web服务器软件和多个版本的PHP，并且通过图形化控制面板（phpstudy.exe）可以自由切换 切换服务器和php版本： 默认使用的是 Apache + php-5.4.45 Apache目录结构配置文件中带 # 的都是注释项，不带的是有效的配置项 主要配置项： 重点: Listen: 如果报80端口被占用可以修改为其他值，例如：8088 DocumentRoot: 配置html、css、js、php等文件保存的路径。 浏览器中输入localhost或者127.0.0.1，系统就会去DocumentRoot指定的目录去寻找对应的文件。 DirectoryIndex: 默认访问文件配置 localhost =&gt; localhost/index.html localhost : 首先在www目录下找 index.html；如果没有index.html，找index.php；如果没有Index.php找index.htm；没有则找 l.php。 如果连 l.php都没有，则会将 www 目录下的所有文件和文件夹以列表形式显示出来 PHP目录结构 php.ini: php配置文件。 进入到 php-5.4.45目录带 ； 是注释，不带的是有效配置项 WWW目录我们今后编写的所有网页文件（html、css、js、php）和网页所需要的资源文件（图片、音频、视频） 都需要保存在该目录下。 当我们通过浏览器访问任意页面时，都需要在浏览器的url地址栏输入类似地址来进行访问，不论是php文件还是html文件。 例如： localhost/index.html localhost/admin/showlist.php localhost会找 d:/phpstudy/www 目录下的文件]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-PHP介绍]]></title>
    <url>%2F2017%2F04%2F22%2FPHP%2F01-PHP%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[PHP介绍前言: PHP是现在非常流行的一种后端开发语言，常见的语言还有：JSP、ASP.NET、 Ruby等。相对于其他的语言来讲，PHP更容易上手，并且开发速度快、功能强大。 web服务器什么是服务器？ 服务器可以从硬件、软件(系统软件、应用软件)两个角度描述。 按硬件描述： 服务器就是一台超级计算机。 按系统划分： 在硬件上安装了什么操作系统，就可以称为该系统的服务器1例如: linux服务器、windows服务器、unix服务器等。 按软件划分： 在操作系统中安装了什么软件，就可以称作该软件的服务器1例如: ==web服务器、数据库服务器==、邮件服务器等。 Web服务器 Web服务器就是安装了Web服务软件，能够提供网站服务的服务器。淘宝、京东、新浪等等 常见的Web软件：12Apache、Nginx、IIS、Tomcat、Node等。Apache服务器、Nginx服务器、IIS服务器、Tomcat服务器、Node服务器 Apache是世界使用排名第一的Web服务器软件。我们将编写好的html、css、js等文件存入apache，就能够通过网络来访问这些文件了。 PS: web服务器又叫做http/httpd服务器 PHP概述PHP简介 PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。主要适用于Web领域的开发，能够完成动态网页的制作。 例如：淘宝的搜索功能，不同的关键词能够动态产生不同的网页。 PHP特点 PHP是目前最流行的网站开发语言（B/S结构）之一。 PHP是一种在服务器端执行的嵌入HTML文档的脚本语言。 PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创新的语法。 PHP是一种解释型弱类型语言 （弱类型 解释执行 / 强类型 编译执行） 支持几乎所有流行的数据库以及操作系统。 源码开放、免费（free） zend B/S结构和C/S结构 C/S软件体系结构，即Client/Server (客户机/服务器)结构。1核心特点：要下载一个客户端，例如：QQ、微信、LOL、王者荣耀、绝地求生等。 C/S结构的软件，服务器主要做数据转发工作。以QQ聊天为例：1任何两个人聊天的内容都会发送到QQ服务器上，然后再由QQ服务器进行转发 例：王小贱和小仙女聊天 1王小贱发送一句话，这句话会先发送到QQ服务器，再由QQ服务器转发到小仙女的客户端。 B/S软件体系结构，即Browser/Server （浏览器/服务器）结构。 B/S结构软件，服务器承担了所有业务，浏览器只是用来显示最终内容的。 思考问题： B/S的优势和劣势， C/S的优势和劣势。 B/S的优势: 部署方便，容易维护。用户使用方便（一个浏览器即可）。 B/S的劣势: 客户端功能简单 C/S的优势: 功能强大 C/S的劣势: 必须下载客户端非常麻烦，升级维护麻烦]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16-jquery操作DOM(节点)]]></title>
    <url>%2F2017%2F03%2F26%2FjQuery%2F16-jQuery%E6%93%8D%E4%BD%9CDOM%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[jquery操作DOM(节点)创建元素123//$(htmlStr)//htmlStr：html格式的字符串$(“&lt;span&gt;这是一个span元素&lt;/span&gt;”); 添加元素添加新建的元素123456//方法一：将jQuery对象添加到调用者内部的最后面。 var $span = $(“&lt;span&gt;这是一个span元素&lt;/span&gt;”);$(“div”).append($span);//方法二：参数传字符串，会自动创建成jquery对象$(“div”).append(“&lt;span&gt;这是一个span元素&lt;/span&gt;”); 添加已经存在的元素123var $p = $(“p”);$(“div”).append($p);//注意：如果添加的是已经存在的元素，那么会把之前的元素给干掉。（类似于剪切的功能）。 类似的用法：append prepend after before 使用html方法创建元素1234//设置内容$(“div”).html(“&lt;span&gt;这是一段内容&lt;/span&gt;”);//获取内容$(“div”).html() 清空元素empty：清空指定节点的所有元素，自身保留(清理门户)1$(“div”).empty();//清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码） 清空元素的第二种方法1$(“div”).html(“”);//使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。 删除元素 remove：相比于empty，自身也删除（自杀）1$(“div”).remove(); 克隆元素 作用：复制匹配的元素1234// 复制$(selector)所匹配到的元素（深度复制）//cloneNode(true)// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。$(selector).clone();]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[15-jquery动画]]></title>
    <url>%2F2017%2F03%2F25%2FjQuery%2F15-jQuery%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[jquery动画通过下拉菜单引入动画。 jquery提供了三组动画，这些动画都是标准的、有规律的效果，jquery还提供了自定义动画的功能。 显示与隐藏显示(show)与隐藏(hide)是一组动画： show方法详解：123456show([speed], [callback]);//speed(可选)：动画的执行时间1.如果不传，就没有动画效果。2.毫秒值(比如1000),动画在1000毫秒执行完成(推荐)3.固定字符串，slow(200)、normal(400)、fast(600)，如果传其他字符串，则默认为normal。//callback(可选):执行完动画后执行的回调函数 hide方法详解：与show方法的用法完全一致。 show/hide：修改的是元素的width、height、opacity。 滑入与滑出滑入(slideUp)与滑出(slideDown)是一组动画，效果与卷帘门类似slideUp/slideDown,使用方法与show/hide基本一致。123456slideUp(speed, callback);//speed(可选)：动画的执行时间1.如果不传，默认为normal，注意区分show/hide。2.毫秒值(比如1000),动画在1000毫秒执行完成(推荐)3.固定字符串，slow(200)、normal(400)、fast(600)//callback(可选):执行完动画后执行的回调函数 滑入滑出切换12$(selector).slideToggle(speed,callback);//如果是隐藏状态，那么执行slideDown操作，如果是显示状态，那么执行slideUp操作。 slideUp/slideDown：修改的是元素的height 淡入与淡出 fadeIn/fadeOut使用方法与show/hide、slideDown/slideUp一致。123456fadeIn(speed, callback);//speed(可选)：动画的执行时间1.如果不传，默认是normal。2.毫秒值(比如1000),动画在1000毫秒执行完成(推荐)3.固定字符串，slow(200)、normal(400)、fast(600)//callback(可选):执行完动画后执行的回调函数 淡入淡出切换：12fadeToggle(speed, callback);//如果当前元素处于隐藏状态，那么执行fadeIn操作，如果处于显示状态，那么执行fadeOut操作。 淡入淡出到某个值与淡入淡出的区别：淡入淡出只能控制元素的不透明度从 完全不透明 到完全透明；而fadeTo可以指定元素不透明度的具体值。并且时间参数是必需的！1234fadeTo(speed, value, callback)//可以设置具体的透明度//speed（必须）//value 0-1之间的数值(比如0.4)，表示淡到某一个值。//callback(可选) 回调函数 fade系列方法：修改的是元素的opacity 1.jQuery给我们提供了三组动画，show/hide、slideUp/slideDown、fadeIn/fadeOut 2.动画切换方法：slideToggle、fadeToggle，注意：show和hide没有切换的方法。 3.淡入淡出到某个值：fadeTo方法。 4.show/slideDown/fadeIn三个是显示效果、hide/slideUp/fadeOut三个是隐藏效果。 5.show/hide修改的是元素的height,width,opacity。slide系列方法修改的是元素的height。fade系列方法修改的是元素的opacity。这三种方法修改的这些值，都是带数字的，因为带了数字才能做渐变。 自定义动画animate：自定义动画1234$(selector).animate(&#123;params&#125;,[speed],[callback]);// &#123;params&#125;：要执行动画的CSS属性，带数字（必选）// speed：执行动画时长（可选）// callback：动画执行完后立即执行的回调函数（可选） 动画支持的属性动画支持的属性：http://www.w3school.com.cn/jquery/effect_animate.asp easing参数控制动画在不同元素的速度，默认为“swing” “swing”：在开头和结尾移动慢，在中间移动速度快 “linear”：匀速移动 动画队列问题引出事件队列效果 在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放到动画队列中，等前面的动画执行完成了才会执行（联想：地铁进站）。 停止动画stop方法：停止动画效果123stop(clearQueue, jumpToEnd);//第一个参数：是否清除队列//第二个参数：是否跳转到最终效果 最常用的停止动画：stop();]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[14-jQuery操作样式]]></title>
    <url>%2F2017%2F03%2F25%2FjQuery%2F14-jQuery%E6%93%8D%E4%BD%9C%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[jQuery操作样式css操作 功能：设置或者修改样式，操作的是style属性 设置单个样式12345//name：需要设置的样式名称//value：对应的样式值css(name, value);//使用案例$("#one").css("background","gray");//将背景色修改为灰色 设置多个样式12345678//参数是一个对象，对象中包含了需要设置的样式名和样式值css(obj);//使用案例$("#one").css(&#123; "background":"gray", "width":"400px", "height":"200px"&#125;); 获取样式1234//name:需要获取的样式名称css(name);//案例$("div").css("background-color"); 注意：获取样式操作只会返回第一个元素对应的样式值。 class操作添加样式类1234//name：需要添加的样式类名，注意参数不要带点.addClass(name);//例子,给所有的div添加one的样式。$("div").addClass("one"); 移除所有样式类1234//不带参数，移除所有的样式类removeClass()//例子，移除div所有的样式类$("div").removeClass(); 移除单个样式类1234//name:需要移除的样式类名removeClass("name");//例子，移除div中one的样式类名$("div").removeClass("one"); 判断是否有样式类1234//name:用于判断的样式类名，返回值为true falsehasClass(name)//例子，判断第一个div是否有one的样式类$("div").hasClass("one"); 切换样式类1234//name:需要切换的样式类名，如果有，移除该样式，如果没有，添加该样式。toggleClass(name);//例子$("div").toggleClass("one"); 经验总结： 1.如果操作到的样式非常少，可以考虑css方法 2.如果操作到的样式非常多，那么可以通过class方法来操作，将样式写到一个class类里面。 3.如果考虑到后期维护方便，将css从js中分离出来，那么推荐使用class的方式来操作。]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-jQuery插件机制]]></title>
    <url>%2F2017%2F03%2F24%2FjQuery%2F13-jQuery%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[jQuery插件机制第三方插件jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。 jquery.color.js animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。 如何使用第三方插件： 1.引入jQuery文件 2.引入插件 3.使用插件 制作插件 jQuery对象扩展方法1$.fn. pluginName = function() &#123;&#125;; jQuery UI jQueryUI专指由jQuery官方维护的UI方向的插件。 官方API：http://api.jqueryui.com/category/all/ 其他教程：jQueryUI教程 基本使用: 1.引入jQueryUI的样式文件 2.引入jQuery 3.引入jQueryUI的js文件 4.使用jQueryUI功能]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12-jQuery多库共存]]></title>
    <url>%2F2017%2F03%2F24%2FjQuery%2F12-jQuery%E5%A4%9A%E5%BA%93%E5%85%B1%E5%AD%98%2F</url>
    <content type="text"><![CDATA[多库共存我们知道jQuery占用了$这个标识符，如果引用的其他库也用到$这个标识符，这时候为了保证每个库都能正常使用，这时候就存在了多库共存的问题。 后引入的$的会覆盖掉先引入的库中的$。 $ === jQuery 解决办法： jQuery的$和jQuery是两个相同的变量，因此遇到多库共存的时候，可以让jquery交出$符的控制权，这个时候还是可以使用$.123456console.log($);//function(selector, context)&#123;&#125;//$.noConflict();//释放$的控制权console.log($);&#123;name:"zhangsan",age:12&#125;jQuery(function () &#123; jQuery("div").html("我不是div的内容");&#125;);]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-jQuery链式编程与隐式迭代]]></title>
    <url>%2F2017%2F03%2F24%2FjQuery%2F11-jQuery%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E9%9A%90%E5%BC%8F%E8%BF%AD%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[链式编程 链式编程原理：return this;通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。 end(); // 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。 隐式迭代 隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。如果获取的是多元素的值，大部分情况下返回的是第一个元素的值。设置性操作的时候：设置的是所有的元素获取性操作：获取的是第一个元素。 each方法 有了隐式迭代，为什么还要使用each函数遍历？ 大部分情况下是不需要使用each方法的，因为jQuery的隐式迭代特性。如果要对每个元素做不同的处理，这时候就用到了each方法 作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数 123// 参数一表示当前元素在所有匹配元素中的索引号// 参数二表示当前元素（DOM对象）$(selector).each(function(index,element)&#123;&#125;);]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-jQuery事件对象（）]]></title>
    <url>%2F2017%2F03%2F24%2FjQuery%2F10-jQuery%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[jQuery事件对象（） 对象属性 解释 event.type 事件类型 event.data 存储绑定事件时传递的附加数据 event.target 点了谁就是谁 event.currentTarget 当前DOM元素，等同于this event.delegateTarget 代理对象 screenX和screenY 对应屏幕最左上角的值 offsetX和offsetY 点击的位置距离元素的左上角的位置 clientX和clientY 距离页面左上角的位置（忽视滚动条） ageX和pageY 距离页面最顶部的左上角的位置（会计算滚动条的距离） event.witch 鼠标按键类型，1=鼠标左键 2=鼠标中键 3=鼠标右键” event.keyCode 按下的键盘代码, event.stopPropagation() 阻止事件冒泡行为 event.preventDefault() 阻止浏览器默认行为 return false；]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-jQuery的on事件绑定与解绑]]></title>
    <url>%2F2017%2F03%2F24%2FjQuery%2F09-jQuery%E7%9A%84on%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E7%BB%91%2F</url>
    <content type="text"><![CDATA[on事件绑定优势：最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。1234567891011// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）// 第四个参数：handler，事件处理函数$(selector).on(events[,selector][,data],handler);例子：// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定$(selector).on( "click","span", function() &#123;&#125;);// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定（不使用代理）。$(selector).on( "click", function() &#123;&#125;); 事件解绑unbind()方式（不用）作用：解绑事件12$(selector).unbind(); //解绑所有的事件$(selector).unbind("click"); //解绑指定的事件 undelegate() 方式（不用）作用：解绑事件12$( selector ).undelegate(); //解绑所有的delegate事件$( selector).undelegate( "click" ); //解绑所有的click事件 off方式（重点）作用：解绑事件123456// 解绑匹配元素的所有事件 $(selector).off(); // 解绑匹配元素的所有click事件 $(selector).off("click"); // 解绑所有代理的click事件，元素本身的事件不会被解绑 $(selector).off( "click", "**" ); 事件触发 简单事件触发 1$(selector).click(); //触发 click事件 trigger方法触发事件 1$(selector).trigger("click"); triggerHandler触发 事件响应方法，不触发浏览器行为 比如:文本框获得焦点的默认行为1$(selector).triggerHandler("focus");]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-jQuery事件机制]]></title>
    <url>%2F2017%2F03%2F23%2FjQuery%2F08-jQuery%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[jQuery事件机制 JavaScript中已经学习过了事件，但是jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。 jQuery事件的发展历程 简单事件绑定&gt;&gt;bind事件绑定&gt;&gt;delegate事件绑定&gt;&gt;on事件绑定(推荐) 简单事件绑定 click(handler) 单击事件 mouseenter(handler) 鼠标进入事件 mouseleave(handler) 鼠标离开事件 scroll(handler) 滚动事件 缺点：一次只能绑定一个事件 bind事件绑定 不推荐使用，jQuery1.7版本后被on取代 123456//绑定多个事件//第一个参数：事件类型//第二个参数：事件处理程序$("p").bind("click mouseenter", function()&#123; //事件响应方法&#125;); 缺点：不支持动态创建出来的元素绑定事件。 delegate事件绑定 支持动态绑定事件123456// 第一个参数：selector，要绑定事件的元素// 第二个参数：事件类型// 第三个参数：事件处理函数$(".parentBox").delegate("p", "click", function()&#123; //为 .parentBox下面的所有的p标签绑定事件&#125;); 理解：为什么delegate支持动态绑定事件？原因是事件冒泡机制。因为事件时绑定到父元素上的，由子元素触发。]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-jQuery操作坐标值]]></title>
    <url>%2F2017%2F03%2F23%2FjQuery%2F07-jQuery%E6%93%8D%E4%BD%9C%E5%9D%90%E6%A0%87%E5%80%BC%2F</url>
    <content type="text"><![CDATA[jQuery操作坐标值offset 设置或者获取元素相对于文档document的位置。 1234//设置位置$(selector).offset(&#123;left:100, top: 150&#125;);//获取位置$(selector).offset(); 注意：使用offset操作，如果元素没有设置定位(默认position:static)，则会把position修改为relative.会修改left、top position 获取相对于其最近的有定位的父元素的位置。 12// 获取，返回值为对象：&#123;left:num, top:num&#125;$(selector).position(); 注意：position方法只能获取，不能设置 scrollTop 设置或者获取垂直滚动条的位置1234// 有参数表示设置偏移，参数为数值类型$(selector).scrollTop(100);// 无参数表示获取偏移$(selector).scrollTop(); scrollLeft 设置或者获取水平滚动条的位置1234// 有参数表示设置偏移，参数为数值类型$(selector).scrollLeft(100);// 无参数表示获取偏移$(selector).scrollLeft();]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-jQuery操作尺寸]]></title>
    <url>%2F2017%2F03%2F22%2FjQuery%2F06-jQuery%E6%93%8D%E4%BD%9C%E5%B0%BA%E5%AF%B8%2F</url>
    <content type="text"><![CDATA[jQuery操作尺寸height 设置或者获取高度1234//带参数表示设置高度$("img").height(200);//不带参数获取高度$("img").height(); 返回值是number类型（比如200），而使用$(“img”).css(“width”)返回的是字符串（比如200px） width 设置获取获取宽度，与高度操作功能一样1234//带参数表示设置宽度$("img").width(200);//不带参数获取宽度$("img").width();]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-jQuery操作值与内容]]></title>
    <url>%2F2017%2F03%2F22%2FjQuery%2F05-jQuery%E6%93%8D%E4%BD%9C%E5%80%BC%E4%B8%8E%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[jQuery操作值与内容val方法 val方法用于设置和获取表单元素的值，例如input、select、textarea的值1234//设置值$("#name").val("张三");//获取值$("#name").val(); html方法1234//设置内容 $("div").html("&lt;span&gt;这是一段内容&lt;/span&gt;"); //获取内容 $("div").html() text方法1234//设置内容$("div").text("&lt;span&gt;这是一段内容&lt;/span&gt;");//获取内容$("div").text() html方法与text方法的区别： html方法会识别html标签，text方法会把内容直接当成字符串，并不会识别html标签。]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-jQuery操作DOM]]></title>
    <url>%2F2017%2F03%2F22%2FjQuery%2F04-jQuery%E6%93%8D%E4%BD%9CDOM%2F</url>
    <content type="text"><![CDATA[jQuery操作DOMjQuery操作属性 设置单个属性 123456//第一个参数：需要设置的属性名//第二个参数：对应的属性值attr(name, value);//用法举例$("img").attr("title","哎哟，不错哦");$("img").attr("alt","哎哟，不错哦"); 设置多个属性 12345678//参数是一个对象，包含了需要设置的属性名和属性值attr(obj)//用法举例$("img").attr(&#123; title:"哎哟，不错哦", alt:"哎哟，不错哦", style:"opacity:.5" &#125;); 获取属性 12345//传需要获取的属性名称，返回对应的属性值attr(name)//用法举例var oTitle = $("img").attr("title");alert(oTitle); 注意： 1.获取属性时，只会获取到第一个元素对应的属性，与css方法一样 2.获取属性时，如果该属性不存在，那么会返回undefined 移除属性 1234//参数：需要移除的属性名，如果传空，那么不会有任何操作，注意，并不是移除所有的属性。区分removeClass。removeAttr(name);//用法举例$("img").removeAttr("title"); prop 注意：在jQuery1.6之后，对于checked、selected、disable这类boolean类型的属性来说，如果使用attr方法获取属性值，得到的不是true和false，而是checked以及undefined。，使用prop方法来获取或者设置checked、selected、disable这类的值。prop方法使用跟attr方法一样。1234//设置属性$(":checked").prop("checked",true);//获取属性$(":checked").prop("checked");//返回true或者false]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-jQuery选择器]]></title>
    <url>%2F2017%2F03%2F21%2FjQuery%2F03-jQuery%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[jQuery选择器jQuery选择器概述 为什么要学习jQuery选择器？考虑兼容性的话，js提供的获取元素的方法太少了,只有两个，不能够满足我们的要求，比如想要通过class来获取元素就不行了。12document.getElementById('btnShowDiv');document.getElementsByTagName('div'); 什么是jQuery选择器？ jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。12$("#btnShowDiv")//id选择器$("div")//标签选择器 jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】 jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。 jQuery选择器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 &lt;body&gt; &lt;ul id="list"&gt; &lt;li&gt; &lt;ul&gt; &lt;li&gt;这是后代li&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;这是子代li&lt;/li&gt; &lt;li&gt;这是子代li&lt;/li&gt; &lt;li&gt;这是子代li&lt;/li&gt; &lt;li&gt;这是子代li&lt;/li&gt; &lt;/ul&gt; &lt;!-- &lt;div id="box"&gt;&lt;/div&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;p class="box"&gt;&lt;/p&gt; &lt;span&gt;&lt;/span&gt; --&gt; &lt;/body&gt; &lt;script src="jQuery-1.12.4.min.js"&gt;&lt;/script&gt;&lt;script&gt; $(document).ready(function () &#123; // jQuery的选择器大部分跟css的选择器 // 1 id选择器 // $('#box').text('这是box'); // 2 class选择器 // $('.box').text('这是类名为box的div'); // 3 标签选择器 // $('div').text('这是div'); // 4 交集选择器 // $('div.box').text('这是类名为box的div'); // 5 并集选择器 // $('.box,span').text('这是div和p标签'); // 过滤选择器： /*$('li:odd').text('索引为奇数的li'); $('li:even').text('索引为偶数的li'); $('li:eq(2)').text('这是第三个li');*/ /*$('li:odd').css('backgroundColor', 'red'); $('li:even').css('backgroundColor', 'blue');*/ // 层级选择器 // 1 子代选择器 // $('#list&gt;li').css('backgroundColor', 'red'); // 2 后代选择器 // $('#list li').css('backgroundColor', 'red'); &#125;);&lt;/script&gt; 基本选择器 名称 用法 描述 ID选择器 $(“#id”); 获取指定ID的元素 类选择器 $(“.class”); 获取同一类class的元素 标签选择器 $(“div”); 获取同一类标签的所有元素 并集选择器 $(“div,p,li”); 使用逗号分隔，只要符合条件之一就可。获取所有的div、p、li元素 交集选择器（标签指定式选择器） $(“div.redClass”); 注意选择器1和选择器2之间没有空格，class为redClass的div元素，注意区分后代选择器。 总结：跟css的选择器用法一模一样。 层级选择器 名称 用法 描述 子代选择器 $(“ul&gt;li”); 使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素 后代选择器 $(“ul li”); 使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等 跟CSS的选择器一模一样。 过滤选择器 这类选择器都带冒号： | | 用法 | 描述 || ————– | ———————————- | ———————————- || :eq（index） | $(“li:eq(2)”).css(“color”, “red”); | 获取到的li元素中，选择索引号为2的元素，索引号index从0开始。 || :odd | $(“i:odd”).css(“color”, “red”); | 获取到的li元素中，选择索引号为奇数的元素 || :even | $(“li:even”).css(“color”, “red”); | 获取到的li元素中，选择索引号为偶数的元素 | 筛选选择器(方法) 筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。 用法 说明 children(selector) $(“ul”).children(“li”) 相当于$(“ul&gt;li”)，子类选择器 find(selector) $(“ul”).find(“li”); 相当于$(“ul li”),后代选择器 siblings(selector) $(“#first”).siblings(“li”); 查找兄弟节点，不包括自己本身 parent() $(“#first”).parent();1; 查找父亲 eq(index) $(“li”).eq(2);1; 相当于$(“li:eq(2)”),index从0开始 ​1234567891011121314151617181920212223242526272829303132333435363738394041&lt;script src="jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function () &#123; // 筛选选择器: 均为方法形式，作用是为了完善链式编程 // 1 children() 子代选择器 // 参数：选择器字符串，如果不传默认选择所有子元素 // $('#list').css('width', '300px').children('.item').css('backgroundColor', 'red'); // 2 find() 后代选择器 // 参数：选择器字符串（必须有），如果不传会被忽略。 // $('#list').css('width', '300px').find('li').css('backgroundColor', 'red'); // 3 parent() 父元素选择器，相当于parentNode // 参数：选择器字符串，如果不传默认选择所有父元素 // $('p').parent('.box').css('backgroundColor', 'red'); // 4 parents() 祖先元素选择器 // 参数：选择器字符串，如果不传默认选择所有的祖先元素，但是推荐传入参数。 // $('.text').parents('div').css('backgroundColor', 'red'); // 5 siblings() 兄弟元素获取 // 参数：选择器字符串，可选。 // $('.li').siblings('.item').text('这是其他同级元素'); // 6 next() 和 prev() // 参数：选择器字符串，可选。 // $('.li').next().text('这是后一个li'); // $('.li').prev().text('这是前一个li'); // 7 nextAll() 和 prevAll() // 参数：选择器字符串，可选。 // $('.li').nextAll('.item').text('这是后面的所有li'); // $('.li').prevAll('.item').text('这是前面的所有li'); // 8 eq() 按索引获取指定的元素 // 当需要按索引取值时推荐使用.eq()的形式，不需要进行字符串拼接。 var index = 2; // $('li:eq(' + index + ')'); $('li').eq(index).text('这是第三个li'); &#125;); &lt;/script&gt;]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-jQuery入口函数]]></title>
    <url>%2F2017%2F03%2F21%2FjQuery%2F02-jQuery%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[入口函数 jQuery入口函数的两种写法 1234567//第一种写法$(document).ready(function() &#123; &#125;);//第二种写法$(function() &#123; &#125;); 对比JavaScript的入口函数jQuery的入口函数,执行时机 1.JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。 jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。12345678910111213141516171819 // DOM中的入口函数执行时机：页面完全加载后（结构，图片，文件）window.onload = function () &#123; console.log('DOM的入口函数');&#125;;// jQuery的入口函数执行时机：结构加载完毕后执行// jQuery入口函数的书写方式：$(document).ready(function () &#123; console.log('jQuery的入口函数1');&#125;);$(function () &#123; console.log('jQuery的入口函数2');&#125;);// 如果需要使用jQuery设置页面完全加载后执行操作，可以使用以下形式：$(window).load(function () &#123; console.log('这是jQuery在页面加载后执行的操作');&#125;); jQuery提供了两个定级对象123456789101112 // $ jQuery// 实际上$和jQuery是同一个对象，只不过起了两个名字console.log($ === jQuery); // true// 2 $ 实际上是一个函数console.log(typeof $); // 'function'// $根据传入的参数形式不同，会具有不同的功能$('div'); // 选择器$(function () &#123;&#125;); // 入口函数$(document); // 可以让一个DOM对象具有更多的功能 了解jQuery的$符号 $是什么 其实$就是一个函数：$();参数不一样，功能不一样 $常用的几种情况：1234$(function() &#123;&#125;);//参数是function，说明是入口函数$("#btnSetConent");//参数是字符串，并且以#开头，是一个标签选择，查找id=“btnSetContent”的元素$("div");//查找所有的div元素$(document).ready(funciton()&#123;&#125;)//将document转换成jQuery对象 补充: $ === jQuery,也就是说能用$的地方，完全可以用jQuery，$仅仅是简写形式。 jQuery对象与DOM对象之间的转换 1.什么是DOM对象？ DOM对象：通过DOM方式获取的页面元素。 jQuery对象：通过jQuery方式获取的页面元素。 使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。比如使用document.getElement*系列的方法返回的就是dom对象。 2 DOM对象和jQuery对象的关系 jQuery对象是伪数组形式，内部放置了DOM对象 我们称jQuery对象是DOM对象的包装集。1234 var box = document.getElementById('box');var $box = $('div'); console.dir(box); console.log($box); 3.功能的区别： DOM对象只能使用DOM的功能，无法使用jQuery功能 jQuery对象只能使用jQuery功能，不能使用DOM功能12 box.text('这是box');$box.innerHTML = '这是box的内容'; 4 DOM对象与jQuery对象的转换方式 4.1 将DOM对象转换为jQuery对象:将DOM对象传入到$()中 1$(box).text('这是新内容'); 4.2 将jQuery对象转换为DOM对象 利用索引取出jQuery对象中的DOM对象(推荐)123$box[0].innerHTML = '这是box的新内容';利用get(索引)$box.get(0).innerHTML = '这也是新内容'; 什么是jquery对象？ jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。比如使用$()方法返回对象都是jquery对象。12$("div");//标签选择器返回的jquery对象。$("#btnShowDiv");//id选择器返回的jquery对象。 jquery对象只能使用jquery对象的方法1234var $obj = $("div");$obj.html("jquery对象设置文本的方法");$obj.show();//jquery对象显示文本$obj.click(function() &#123;&#125;);//jquery对象绑定事件 错误的用法123$("div").innerHTML;//jquery对象不能调用dom方法//dom对象不能调用jquery方法。document.getElementById("btnShowDiv").show(); 深入了解jQuery对象 jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合）联想记忆：衣服和洗衣机的关系 jQuery对象和DOM对象的相互转换 jquery对象转DOM对象123456var $li = $("li");//第一种方法（推荐使用）$li[0]//第二种方法$li.get(0)//其实jQuery对象转DOM对象的实质就是取出jQuery对象中封装的DOM对象。 DOM对象转jquery对象（联想记忆：我有钱[美元]，所以我的功能就更强大）12var $obj = $(domObj);// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象 区分jQuery和JavaScript JavaScript是一门编程语言，jquery是用JavaScript实现的一个JavaScript库，目的是简化我们的开发。（联想记忆：不能扛着洗衣机去出差）]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-jQuery简介]]></title>
    <url>%2F2017%2F03%2F21%2FjQuery%2F01-jQuery%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[jQuery简介 jQuery让js的开发变得更加简单 jQuery解决了浏览器的兼容性问题 jQuery基本概念为什么要学习jQuery？ 什么是jQuery？ jquery的官网:http://jquery.com/ 说白了：jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。 js库：把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js） 学习jQuery，主要是学什么呢？ 学习jQuery，主要学习jQuery的一大堆的api。 API：application programming interface：应用程序编程接口，说白了，API就是方法。 obj.funName(params); 注意：方法调用的时候，都带小括号(),使用jQuery的方法的时候，不要忘了小括号。 怎样使用jQuery？ 下载jquery 官网下载地址：http://jquery.com/download/ jQuery的文件相关内容： 下载文件：https://cdnjs.com/libraries/jquery/ jQuery详细解释 版本介绍 根据版本jQuery一共分为3类 jquery大版本分为1.x和2.x（3.0）区别：2.x版本不再支持IE6/7/8 1.x： 兼容所有现代浏览器（ie678和其他浏览器），使用最为广泛 1.12.4 是1.x的最新版本，不会再设置新功能了 2.x： 不支持ie678,几乎没人用 3.x： 不支持ie678,官方主要更新维护的版本 同一版本分类 jQuery每一个版本又分为压缩版和未压缩版： jquery.js：未压缩版本（开发版本），代码可读性高，推荐在开发和学习阶段使用，方便查看源代码。 jquery.min.js：压缩版本，去除了注释、换行、空格、并且将一些变量替换成了a,b,c之类的简单字符，基本没有可读性，推荐在项目生产环境使用，因为文件较小，减少网络压力。 3.x版本还提供了精简版，删除了部分功能，体积小。 关于jquery3.0翻译：jquery3.0现在发布了，这个版本自从2014年10月就开始测试了，我们的目标是创建一个更苗条、更快的jquery版本（并且能向后兼容）。我们已经移除了IE旧版本的解决方案，并且带来了一些较为现代的web API，但这是有道理的。3.0是2.x分支的延续，但是有一些突破性的改变。但是1.12和2.2分支将会在同一时间继续获得关键性的支持补丁。但是他们不会再有任何新的功能和重大的修订。jQuery3是jQuery的未来，如果你需要兼容IE6-8，你可以继续使用1.12版本。 引包的注意点 忘记引包或者引包在入口函数的后面。 引包路径错误(404) 使用jQuery实现div动态展示的步骤：12345678910111.引包（引入jQuery文件）&lt;script src="jquery-1.11.1.js"&gt;&lt;/script&gt;2.入口函数$(document).ready(function () &#123;&#125;);3.功能实现$("#btnShowDiv").click(function () &#123; $("div").show(1000);&#125;); div动态展示JavaScript与jquery的对比 JavaScript jquery 入口函数 只能有一个，如果有多个，后面的会覆盖前面 可以有多个，并且不会发生覆盖的情况 代码容错性 代码容错性差，代码出现错误，会影响到后面代码的运行。 代码容错性好，屏蔽错误，并且不会影响后面代码的运行。 浏览器兼容性 兼容性差，比如火狐不支持innerText 对浏览器兼容性做了封装，因此不存在兼容性问题 操作复杂性 DOM操作复杂，对于一些简单的动画效果，实现起来比较麻烦 DOM操作简单，支持隐式迭代，实现动画非常简单。 使用js实现效果的缺点： 1 入口函数执行的时机较晚，需要等待所有内容加载完毕 2 DOM操作较为繁琐（经常遍历） 3 兼容性问题 4 实现动画操作较为复杂 5 容错性差（报错导致后续代码不执行）]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[40-伪数组和数组]]></title>
    <url>%2F2017%2F03%2F19%2FJS%2F40-%E4%BC%AA%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[伪数组和数组在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。 对象与数组的关系在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。所有 JavaScript 的内置构造函数都是继承自 Object.prototype 。在这个前提下，可以理解为使用 new Array() 或 [] 创建出来的数组对象，都会拥有 Object.prototype 的属性值。 1234var obj = &#123;&#125;;// 拥有 Object.prototype 的属性值var arr = [];//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值 可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。 什么是数组数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码： 12345678910var obj = &#123;&#125;;var arr = [];obj[2] = 'a';arr[2] = 'a';console.log(obj[2]); // =&gt; aconsole.log(arr[2]); // =&gt; aconsole.log(obj.length); // =&gt; undefinedconsole.log(arr.length); // =&gt; 3 obj[2]输出’a’，是因为对象就是普通的键值对存取数据 而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据 obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined 而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值 为什么arr.length输出3，而不是1 在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数 什么是伪数组 拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解) 不具有数组所具有的方法 伪数组，就是像数组一样有 length 属性，也有 0、1、2、3 等属性的对象，看起来就像数组一样，但不是数组，比如: 12345678910111213141516171819202122232425262728293031323334353637 var fakeArray = &#123; "0": "first", "1": "second", "2": "third", length: 3 &#125;; for (var i = 0; i &lt; fakeArray.length; i++) &#123; console.log(fakeArray[i]); &#125; Array.prototype.join.call(fakeArray,'+');``` 常见的伪数组有：- 函数内部的 `arguments`- DOM 对象列表（比如通过 `document.getElementsByTags` 得到的列表）- jQuery 对象（比如 `$("div")` ）伪数组是一个 Object，而真实的数组是一个 Array。伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：```javascript var arr = Array.prototype.slice.call(arguments); Array.prototype.forEach.call(arguments, function(v) &#123; // 循环arguments对象 &#125;); // push // some // every // filter // map // ... 以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用： 1234567891011121314var obj = &#123;0: 'a',1: 'b',2: 'c',length: 3&#125;;[].push.call(obj, 'd')console.log([].slice.call(obj));[].forEach.call(obj, function (num, index) &#123;console.log(num)&#125;) 小结 对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array 数组是基于索引的实现， length 会自动更新，而对象是键值对 使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法 静态成员 Object.assign() Object.create() Object.keys() Object.defineProperty() 实例成员 constructor hasOwnProperty() isPrototypeOf propertyIsEnumerable() toString() valueOf() 代码风格 JavaScript Standard Style Airbnb JavaScript Style Guide() { 校验工具 JSLint JSHint ESLint B Chrome 开发者工具C 文档相关工具 电子文档制作工具: docute 流程图工具：DiagramDesigner]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[39-正则表达式]]></title>
    <url>%2F2017%2F03%2F18%2FJS%2F39-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[正则表达式 了解正则表达式基本语法 能够使用JavaScript的正则对象 什么是正则表达式 正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。 正则表达式的作用 作用：用于对字符串进行处理。匹配，替换，提取。 实现方式：不是js中独有的功能。 大多数变成语言都对正在有时限方式，在js中采用了内置对象设置方式实现。 给定的字符串是否符合正则表达式的过滤逻辑(匹配) 可以通过正则表达式，从字符串中获取我们想要的特定部分(提取) 强大的字符串替换能力(替换) 正则表达式的特点 灵活性、逻辑性和功能性非常的强 可以迅速地用极简单的方式达到字符串的复杂控制 对于刚接触的人来说，比较晦涩难懂 正则表达式的测试 在线测试正则 工具中使用正则表达式 sublime/vscode/word 演示替换所有的数字 正则表达式的组成 普通字符 特殊字符(元字符)：正则表达式中有特殊意义的字符 示例演示： \d 匹配数字 ab\d 匹配 ab1、ab2 元字符串通过测试工具演示下面元字符的使用 常用元字符串 元字符 说明 \d 匹配数字 \D 匹配任意非数字的字符 \w 匹配字母或数字或下划线 \W 匹配任意不是字母，数字，下划线 \s 匹配任意的空白符 \S 匹配任意不是空白符的字符 . 匹配除换行符以外的任意单个字符 ^ 表示匹配行首的文本(以谁开始) $ 表示匹配行尾的文本(以谁结束) 限定符 限定符 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 其它1234567[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思[^] 匹配除中括号以内的内容\ 转义符| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱() 从两个直接量中选择一个，分组 eg：gr(a|e)y匹配gray和grey[\u4e00-\u9fa5] 匹配汉字 案例验证手机号： 1^\d&#123;11&#125;$ 验证邮编： 1^\d&#123;6&#125;$ 验证日期 2012-5-01 1^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$ 验证邮箱 xxx@xxx.cn： 1^\w+@\w+\.\w+$ 验证IP地址 192.168.1.1 1^\d&#123;1,3&#125;\(.\d&#123;1,3&#125;)&#123;3&#125;$ JavaScript 中使用正则表达式方式1： 12var reg = new Regex('\d', 'i');var reg = new Regex('\d', 'gi'); 方式2： 12var reg = /\d/i;var reg = /\d/gi; 参数 标志 说明 i 忽略大小写 g 全局匹配 gi 全局匹配+忽略大小写 正则匹配简单类和test方法使用 简单类：表示当前正则用于匹配含义内部字符串的字符串 只要字符串中含义abc即可，位置不限 1234567var reg = /abc/// 正则方法：test() - 参数为要匹配得字符串，返回布尔类型值console.log(reg.test('abc')); // trueconsole.log(reg.test('abc123123')); // trueconsole.log(reg.test('123123abc')); // trueconsole.log(reg.test('123abc123')); // trueconsole.log(reg.test('123a1b1c123')); // false 字符类和反向类字符类： 标识方式：在正常内部使用[]标识 含义：[ ]内部整体表示一位字符，内部书写的多个字符表示此位置的多种情况 var reg = /[abcd]/; 基本形式 示例：例如需要检测的字符串有以下四种情况abc bbc cbc dbc 12345var reg = /[asbc]bc/;console.log(reg.test('abc')); //trueconsole.log(reg.test('bbc')); //trueconsole.log(reg.test('cbc')); //trueconsole.log(reg.test('dbc')); //false 反向类： 基于字符类的功能 标识方式：在字符类[]内部最开始位置书写一个^ 含义：可以匹配除内部字符串外的其他字符，当前字符有没有都不影响，主要看其他字符 12345var reg = /[^abc]/;console.log(reg.test('abc')); //falseconsole.log(reg.test('123')); //trueconsole.log(reg.test('fhs')); //trueconsole.log(reg.test('zabc')); //true 范围类和组合类范围类： 是对字符类功能的扩展,在字符类内部使用 - 标识范围 作用：是对字符类功能得扩展 标识方式：在字符类内部使用-标识范围 ​ 1234var reg = /[b-h]/;console.log(reg.test('d'));// trueconsole.log(reg.test('a'));// falseconsole.log(reg.test('h'));// true 常用范围类表示方式 1.表示所有得小写字母 /[a-z]/ 2.表示所有得大写字母 /[A-Z]/ 3.表示所有得数字 /[0-9]/ ​ 组合类：是对范围类的功能扩展 作用：用于同时属性多种规则 12345var reg = /[a-z0-9]/;console.log(reg.test('3'));console.log(reg.test('h'));console.log(reg.test('D'));console.log(reg.test('Z')); 预定义类 预定义类：正则表达式内部预先提供好得匹配方式 1.数字字符操作 \d - 用于表示数字字符匹配 - 相当于[0-9] 1234var reg = /\d/;console.log(reg.test('sdfghj5kfghj')); // trueconsole.log(reg.test('sdfghj8kfghj')); // true \D 用于表示非数字字符 相当于[^0-9] 123456var reg = /\D/;console.log(reg.test('1234567890'));console.log(reg.test('a'));console.log(reg.test('C'));console.log(reg.test('-')); 2.单词字符操作： ​ \w - 用于表示单词字符 - [0-9a-zA-Z_] 1234567var reg = /\w/;console.log(reg.test('456'));console.log(reg.test('fgh'));console.log(reg.test('TYU'));console.log(reg.test('_'));console.log(reg.test('*$#@!~^&amp;')); \W - 用于表示非单词字符 1234567var reg = /\W/;console.log(reg.test('456'));console.log(reg.test('fgh'));console.log(reg.test('TYU'));console.log(reg.test('_'));console.log(reg.test('*$#@!~^&amp;')); 3.可见和不可见字符匹配 \s - 不可见字符 - 通常用于识别空格和换行 - [ \f\n\r\t\v] 123456var reg = /\s/;console.log(reg.test('abcde45678GHJK_')); // falseconsole.log(reg.test(' ')); // trueconsole.log(reg.test('\n')); // trueconsole.log(reg.test('\t')); // true \S - 可见字符 - 很少使用 123456var reg = /\S/;console.log(reg.test('abcde45678GHJK_')); // trueconsole.log(reg.test(' ')); // falseconsole.log(reg.test('\n')); // falseconsole.log(reg.test('\t')); // false 本身具有匹配功能，用于匹配可见字符，含有空格 通常用于匹配用户输入得内容，由于用户可能输入空格，使用\S不行，使用 点 即可 1234var reg = /./;console.log(reg.test('abc'));console.log(reg.test('123'));console.log(reg.test(' ')); 小结：以后不可见字符使用\s,可见字符使用英文点符号。 匹配日期 123var dateStr = '2015-10-10';var reg = /^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/console.log(reg.test(dateStr)); 边界 1 检测起始位置内容 标识方式：在正则最开始位置书写^ 123var reg = /^abc/; console.log(reg.test('abcghjkl')); console.log(reg.test('1abcghjkl')); 2 检测结束位置内容 标识方式：在正则最后位置书写$ 123var reg = /abc$/;console.log(reg.test('1111abc'));console.log(reg.test('1111abc222')); 3 严格匹配:将^和$同时使用，必须与内容得内容完全一致 1234567var reg = /^a[qwe]c$/console.log(reg.test('abc123'));console.log(reg.test('abc'));console.log(reg.test('abcabc'));console.log(reg.test('aqc'));console.log(reg.test('awc'));console.log(reg.test('aec')); 量词 自定义量词： 1234567// 1 &#123;n&#125; 用于指定重复次数 var reg = /^a&#123;3&#125;$/; console.log(reg.test('aa')); // false console.log(reg.test('aaa')); // true console.log(reg.test('aaaa')); // false console.log(reg.test('aaaaa')); // false 1234567// 2 &#123;n,&#125; 用于指定至少重复几次 var reg = /^a&#123;3,&#125;$/; console.log(reg.test('aa')); // false console.log(reg.test('aaa')); // true console.log(reg.test('aaaa')); // true console.log(reg.test('aaaaa')); // true 12345678// 3 &#123;n,m&#125; 用于指定重复得次数范围 var reg = /^a&#123;3,5&#125;$/; console.log(reg.test('aa')); // false console.log(reg.test('aaa')); // true console.log(reg.test('aaaa')); // true console.log(reg.test('aaaaa')); // true console.log(reg.test('aaaaaaa')); // false 预定义量词：1234567891011121314151617181920212223242526272829// 1 * 出现0次或多次即可(有没有出现都可以) /var reg = /^a$/; console.log(reg.test('')); // true console.log(reg.test('aa')); // true console.log(reg.test('aaa')); // true// 例如说，需要进行邮箱内容匹配// zxx@sina.com.cn// 域名部分得.cn是可有可无的，可以使用*// /^\w&#123;3,5&#125;@\w&#123;2,5&#125;.\w&#123;2,5&#125;(.\w&#123;2,5&#125;)*$/// 2 + 至少出现1次 var reg = /^a+$/; console.log(reg.test('')); // false console.log(reg.test('a')); // true console.log(reg.test('aa')); // true console.log(reg.test('aaa')); // true // zxx@sina.com.cn// 例如：域名部分得.com和.cn规则相同，可以简化为使用+// /^\w&#123;3,5&#125;@\w&#123;2,5&#125;(.\w&#123;2,5&#125;)+$/// 3 ? 出现0次或1次 var reg = /^a?$/; console.log(reg.test('')); // true console.log(reg.test('a')); // true console.log(reg.test('aa')); // false console.log(reg.test('aaa')); // false 正则替换/提取 replace() 字符串得替换方法 123456789101112131415var str = 'a-a-a-a-a'; console.log(str.replace('a', 'z')); console.log(str.split('a').join('z')); var str = '5a-4A-3A-2A-1a';//replace()得参数1，支持正则表达式//正则得匹配模式：//将匹配模式得字符，书写到正则得后面,或者new RegExp('\d', 'gi')//g - 全局匹配 //i - 忽略大小写 console.log(str.replace(/\d/g, 'z')); console.log(str.replace(/a/g, 'z')); console.log(str.replace(/a/ig, 'z')); 2 提取操作： 例如：老板给你发了一个邮件，邮件中有各个不份额负责人得名称以及对应得邮箱地址 1234567891011121314151617181920var str = '张三:zhangsan1@qq.com呵呵呵，还有一个张三:zhangsan2@qq.com呵呵呵，还有一个张三:zhangsan9@qq.com呵呵呵，还有一个张三:zhangsan3@qq.com呵呵呵，还有一个'; // 2.1 字符串得match()方法： // - 参数：要替换内容得规则，正则对象 console.log(str.match(/\w+@\w+.\w+/g)); console.log(str.match(/\w+@\w+.\w+/g).join(';') + ';'); // 2.2 正则对象的exec()方法 // - 参数：要进行提取得字符串 // - 使用方式：必须使用同一个正则对一个字符串进行多次调用提取操作，每次返回某一个结果 // - 当一轮提取完毕，再继续提取，会返回null var reg = /(\w+)@(\w+.\w+)/g; // 思考：由于字符串中满足条件得邮箱个数是无法确定得，不能手动调用多次，需要进行处理。 console.log(reg.exec(str)); console.log(reg.exec(str)); console.log(reg.exec(str)); console.log(reg.exec(str)); console.log(reg.exec(str)); ​ 或者和括号 | 或者 1234567// var reg = /a|b|c/; // 相当于 /[abc]/var reg = /ab|cd|ef/;console.log(reg.test('ab'));console.log(reg.test('cd'));console.log(reg.test('ef')); 小结： ​ 如果是单个字符得多种情况，使用字符类[]操作 ​ 如果是多个字符得多种情况，使用或者|操作 括号：用于表示整体 1234567var reg = /abc&#123;3&#125;/; console.log(reg.test('abcabcabc')); // false console.log(reg.test('abccc')); // true var reg = /(abc)&#123;3&#125;/; console.log(reg.test('abcabcabc')); // true console.log(reg.test('abccc')); // false 12 案例：表单验证12345QQ号：&lt;input type="text" id="txtQQ"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;邮箱：&lt;input type="text" id="txtEMail"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;手机：&lt;input type="text" id="txtPhone"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;生日：&lt;input type="text" id="txtBirthday"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;姓名：&lt;input type="text" id="txtName"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt; 12345678910111213141516171819202122232425262728293031323334353637383940//获取文本框var txtQQ = document.getElementById("txtQQ");var txtEMail = document.getElementById("txtEMail");var txtPhone = document.getElementById("txtPhone");var txtBirthday = document.getElementById("txtBirthday");var txtName = document.getElementById("txtName");//txtQQ.onblur = function () &#123;//获取当前文本框对应的spanvar span = this.nextElementSibling;var reg = /^\d&#123;5,12&#125;$/;//判断验证是否成功if(!reg.test(this.value) )&#123; //验证不成功 span.innerText = "请输入正确的QQ号"; span.style.color = "red";&#125;else&#123; //验证成功 span.innerText = ""; span.style.color = "";&#125;&#125;;//txtEMailtxtEMail.onblur = function () &#123;//获取当前文本框对应的spanvar span = this.nextElementSibling;var reg = /^\w+@\w+\.\w+(\.\w+)?$/;//判断验证是否成功if(!reg.test(this.value) )&#123; //验证不成功 span.innerText = "请输入正确的EMail地址"; span.style.color = "red";&#125;else&#123; //验证成功 span.innerText = ""; span.style.color = "";&#125;&#125;; 表单验证部分，封装成函数： 12345678910111213141516171819var regBirthday = /^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/;addCheck(txtBirthday, regBirthday, "请输入正确的出生日期");//给文本框添加验证function addCheck(element, reg, tip) &#123;element.onblur = function () &#123; //获取当前文本框对应的span var span = this.nextElementSibling; //判断验证是否成功 if(!reg.test(this.value) )&#123; //验证不成功 span.innerText = tip; span.style.color = "red"; &#125;else&#123; //验证成功 span.innerText = ""; span.style.color = ""; &#125;&#125;;&#125; 通过给元素增加自定义验证属性对表单进行验证： 1234567&lt;form id="frm"&gt;QQ号：&lt;input type="text" name="txtQQ" data-rule="qq"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;邮箱：&lt;input type="text" name="txtEMail" data-rule="email"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;手机：&lt;input type="text" name="txtPhone" data-rule="phone"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;生日：&lt;input type="text" name="txtBirthday" data-rule="date"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;姓名：&lt;input type="text" name="txtName" data-rule="cn"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/form&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// 所有的验证规则 var rules = [ &#123; name: 'qq', reg: /^\d&#123;5,12&#125;$/, tip: "请输入正确的QQ" &#125;, &#123; name: 'email', reg: /^\w+@\w+\.\w+(\.\w+)?$/, tip: "请输入正确的邮箱地址" &#125;, &#123; name: 'phone', reg: /^\d&#123;11&#125;$/, tip: "请输入正确的手机号码" &#125;, &#123; name: 'date', reg: /^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/, tip: "请输入正确的出生日期" &#125;, &#123; name: 'cn', reg: /^[\u4e00-\u9fa5]&#123;2,4&#125;$/, tip: "请输入正确的姓名" &#125;]; addCheck('frm'); //给文本框添加验证 function addCheck(formId) &#123; var i = 0, len = 0, frm =document.getElementById(formId); len = frm.children.length; for (; i &lt; len; i++) &#123; var element = frm.children[i]; // 表单元素中有name属性的元素添加验证 if (element.name) &#123; element.onblur = function () &#123; // 使用dataset获取data-自定义属性的值 var ruleName = this.dataset.rule; var rule =getRuleByRuleName(rules, ruleName); var span = this.nextElementSibling; //判断验证是否成功 if(!rule.reg.test(this.value) )&#123; //验证不成功 span.innerText = rule.tip; span.style.color = "red"; &#125;else&#123; //验证成功 span.innerText = ""; span.style.color = ""; &#125; &#125; &#125; &#125; &#125; // 根据规则的名称获取规则对象 function getRuleByRuleName(rules, ruleName) &#123; var i = 0, len = rules.length; var rule = null; for (; i &lt; len; i++) &#123; if (rules[i].name == ruleName) &#123; rule = rules[i]; break; &#125; &#125; return rule; &#125;]]></content>
      <tags>
        <tag>regexp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[38-函数递归]]></title>
    <url>%2F2017%2F03%2F17%2FJS%2F38-%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%2F</url>
    <content type="text"><![CDATA[函数递归递归(递归函数)： 一个函数在内部调用自身，称为递归。 递归最容易出现得问题： 1 死’循环’ 必须给递归设置结束条件 例如，记录递归执行得次数，次数到达，return(使用较少，通常使用for) 例如：观察功能中得规律，设置结束条件 2 性能问题： 需要尽量减少递归执行得次数 ​ 斐波那契数列(兔子)： 1 1 2 3 5 8 13 21 34 55 89 数列规律：最前面两个数是1，后续得值为前两个值得和 ​ 设置一个功能，可以计算出数列中某个位置得值, n代表得是第几个数 123456789101112131415161718192021222324252627282930313233343536373839404142434445/*function getFb (n) &#123; // 根据规律已知，位置1和2得值为1 if (n === 1 || n === 2) &#123; return 1; &#125; return getFb(n - 1) + getFb(n - 2); &#125; console.log(getFb(51)); // 对递归进行优化操作: // 问题：有些值计算多次，导致调用次数过多，如果这个值 仅仅计算1次，执行会快很多 // 解决方式： // 使用一个对象记录某个位置和对应得值 var obj = &#123;&#125;; var count = 0; function getFb (n) &#123; count++; // 根据规律已知，位置1和2得值为1 if (n === 1 || n === 2) &#123; return 1; &#125; // 进行递归操作之前，先检测obj中是否存在对应得数据 // 如果存在，直接返回，如果不存在，计算后保存在obj中给下次使用。 return obj[n] ? obj[n] : obj[n] = getFb(n - 1) + getFb(n - 2); &#125; console.log(getFb(1500), count);*/ // 将递归函数和进行优化得数据设置在一个函数中，确保数据得安全。 var getFb = (function () &#123; // obj这个数据只和getFb函数得功能相关，不应该被其他代码操作，应当设置为私有变量 var obj = &#123;&#125;; function getFb (n) &#123; // 根据规律已知，位置1和2得值为1 if (n === 1 || n === 2) &#123; return 1; &#125; // 进行递归操作之前，先检测obj中是否存在对应得数据 // 如果存在，直接返回，如果不存在，计算后保存在obj中给下次使用。 return obj[n] ? obj[n] : obj[n] = getFb(n - 1) + getFb(n - 2); &#125; return getFb; &#125;)(); console.log(getFb(20)); 递归执行模型123456789101112131415161718192021222324function fn1 () &#123;console.log(111)fn2()console.log('fn1')&#125;function fn2 () &#123;console.log(222)fn3()console.log('fn2')&#125;function fn3 () &#123;console.log(333)fn4()console.log('fn3')&#125;function fn4 () &#123;console.log(444)console.log('fn4')&#125;fn1() 举个栗子：计算阶乘的递归函数1234567function factorial (num) &#123;if (num &lt;= 1) &#123; return 1&#125; else &#123; return num * factorial(num - 1)&#125;&#125; 深拷贝1234567891011121314151617181920212223242526272829303132333435363738394041var obj = &#123; name : 'jack', age : 18, aiHao : ['游泳', '打代码', '跑步'], gf : &#123; name1 : 'rose', age1 : 21 &#125; &#125;; // 普通遍历操作：浅拷贝 /*var obj2 = &#123;&#125;; for (var k in obj) &#123; obj2[k] = obj[k]; &#125; obj.aiHao[0] = '吃饭'; console.log(obj2.aiHao);*/ // 深拷贝操作：用于对复杂数据类型进行完整拷贝 var obj2 = &#123;&#125;; function deepCopy (obj, obj2) &#123; for (var k in obj) &#123; // 利用这个条件，检测数据是基本数据类型还是复杂数据类型 if (typeof obj[k] !== 'object' || obj[k] === null) &#123; // 当某个属性是基本数据类型时，直接拷贝即可 obj2[k] = obj[k]; &#125; else &#123; // 当某个属性是复杂数据类型时，需要再次进行拷贝操作 // 需要考虑数据到底是数组还是对象结构 obj2[k] = obj[k].constructor === Array ? [] : &#123;&#125;; deepCopy(obj[k], obj2[k]); &#125; &#125; &#125; deepCopy(obj, obj2); // obj.gf.name1 = 'lucy'; console.log(obj); console.log(obj2);// 特殊点：这个功能没有明显得设置结束条件，原因为数据不可能为无限维度。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[37-闭包]]></title>
    <url>%2F2017%2F03%2F16%2FJS%2F37-%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[什么是闭包 闭包就是能够读取其他函数内部变量的函数， 闭包(闭包函数)：能够操作某些私有变量得函数称为闭包函数。 由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量， 因此可以把闭包简单理解成 “定义在一个函数内部的函数”。 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 闭包的用途： 可以在函数外部读取函数内部成员 让函数内成员始终存活在内存中 一些关于闭包的例子示例1： 123456789101112var lis = document.getElementsByTagName('li'); for (var i = 0; i &lt; lis.length; i++) &#123; (function (j) &#123; // 使用一个立即执行函数进行作用域得创建,j就是一个私有变量 // var j = i; lis[i].onclick = function () &#123; // i不能使用：取值为循环结束得值，如果可以得到循环过程中i的值，即可解决这个问题。 console.log(j); &#125;; &#125;)(i); &#125; 示例2： 123456var arr = [10, 20, 30]for(var i = 0; i &lt; arr.length; i++) &#123;arr[i] = function () &#123; console.log(i)&#125;&#125; 示例3： 12345678console.log(111)for(var i = 0; i &lt; 3; i++) &#123;setTimeout(function () &#123; console.log(i)&#125;, 0)&#125;console.log(222) 闭包的思考题思考题 1： 1234567891011var name = "The Window";var object = &#123;name: "My Object",getNameFunc: function () &#123; return function () &#123; return this.name; &#125;;&#125;&#125;;console.log(object.getNameFunc()()) 思考题 2： 1234567891011var name = "The Window"; var object = &#123; name: "My Object",getNameFunc: function () &#123; var that = this; return function () &#123; return that.name; &#125;;&#125;&#125;;console.log(object.getNameFunc()())]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[36-作用域、作用域链、预解析]]></title>
    <url>%2F2017%2F03%2F15%2FJS%2F36-%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E3%80%81%E9%A2%84%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[作用域、作用域链、预解析 全局作用域 函数作用域 预解析： 预解析 在每个作用域开启前均会发生预解析操作。 在当前作用域中的var变量声明，将声明提升到当前作用域顶端，赋值保留在原位置。 找当前作用域中的函数声明语句，将函数体整体提升当前作用域顶端，调用保留在原位置。 以上两步不分先后。 作用域： 分类：全局作用域，局部作用于(函数作用域)。 作用：现在变量的访问范围。 作用域的访问规则(作用域链)：向上查找。 没有块级作用域 12345678910&#123;var foo = 'bar'&#125;console.log(foo)if (true) &#123;var a = 123&#125;console.log(a) 作用域链示例代码： 123456789101112131415161718var a = 10function fn () &#123;var b = 20function fn1 () &#123; var c = 30 console.log(a + b + c)&#125;function fn2 () &#123; var d = 40 console.log(c + d)&#125;fn1()fn2()&#125; 内层作用域可以访问外层作用域，反之不行]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[35-函数进阶]]></title>
    <url>%2F2017%2F03%2F15%2FJS%2F35-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[函数进阶函数的定义方式 函数声明 函数表达式 new Function 函数声明123function fun () &#123;&#125; 函数表达式(推荐)123var fun = function () &#123;&#125; 构造函数创建方式：(书写较为繁琐，通常不推荐使用) 12var fun = new Function('a', 'b','console.log(199, a, b);');fun(200, 300); 函数声明与函数表达式的区别 函数声明必须有名字 函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用 函数表达式类似于变量赋值 函数表达式可以没有名字，例如匿名函数 函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用 函数声明语句的问题： 将函数声明语句书写在if..else中时，不同得浏览器展现得效果是不同得。 下面是一个根据条件定义函数的例子： 123456789if (true) &#123;function f () &#123; console.log(1)&#125;&#125; else &#123;function f () &#123; console.log(2)&#125;&#125; 以上代码执行结果在不同浏览器中结果不一致。 不过我们可以使用函数表达式解决上面的问题： 这是函数表达式得设置方式 1234567891011var fif (true) &#123;f = function () &#123; console.log(1)&#125;&#125; else &#123;f = function () &#123; console.log(2)&#125;&#125; 小结论： 推荐使用函数表达式进行函数操作。 如果习惯使用函数声明语句，可以在特殊场景中更换为函数表达式即可。 函数的调用方式 普通函数 构造函数 对象方法 函数内 this 指向的不同场景函数的调用方式决定了 this 指向的不同： 调用方式 非严格模式 备注 普通函数调用 window 严格模式下是 undefined 构造函数调用 实例对象 原型方法中 this 也是实例对象 对象方法调用 该方法所属对象 紧挨着的对象 事件绑定方法 绑定事件对象 定时器函数 window 这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。 函数也是对象 所有函数都是 Function 的实例 call、apply、bind 那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用， 这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。 然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。 这就是接下来我们要学习的 call、apply、bind 三个函数方法。 call call() 用于调用函数，参数1 可以修改this的指向 只有本次调用时this会被修改123456789101112131415 var fun = function(a,b)&#123; console.log(this,a,b); &#125; fun(100,200); fun.call(&#123;name:'jack'&#125;,200,300);``` `call()` 方法调用一个函数, 其具有一个指定的 `this` 值和分别地提供的参数(参数的列表)。- 注意：该方法的作用和 `apply()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。语法：```javascript fun.call(thisArg[, arg1[, arg2[, ...]]]) 参数： thisArg 在 fun 函数运行时指定的 this 值 如果指定了 null 或者 undefined 则内部 this 指向 window arg1, arg2, ... 指定的参数列表 apply apply() - 用于调用函数，参数1可以修改this的指向 只有本次调用时this会被修改。 与call的区别： 后续的实参值需要以数组形式传入1234567var fun = function(a,b)&#123; console.log(this,a,b);&#125;;fun(100,200);fun.apply(&#123;age:18&#125;,[100,200]);fun();fun.apply(); apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数。 注意：该方法的作用和 call() 方法类似，只有一个区别，就是 call() 方法接受的是若干个参数的列表，而 apply() 方法接受的是一个包含多个参数的数组。 语法： 1fun.apply(thisArg, [argsArray]) 参数： thisArg argsArray apply() 与 call() 非常相似，不同之处在于提供参数的方式。apply() 使用参数数组而不是一组参数列表。例如： 1fun.apply(this, ['eat', 'bananas']) bind bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。 当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。 一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。 语法： 1fun.bind(thisArg[, arg1[, arg2[, ...]]]) 参数： thisArg 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。 arg1, arg2, … 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。 返回值： 返回由指定的this值和初始化参数改造的原函数拷贝。 bind() - 用于创建函数副本，可以帮定副本内的this指向和某些实参 3.1 this的绑定操作 参数1：用于绑定函数副本中的this，无法在通过call或者apply进行修改 返回值：返回的函数副本1234567891011var fun = function()&#123; console.log(this);&#125;;fun(); //会调用函数,执行代码fun.call(); //会调用函数,执行代码fun.apply();//会调用函数,执行代码var fun2 = fun.bind(&#123;name :'jack'&#125;)//不会调用函数，而是返回函数副本console.log(fun2);fun2();//this为绑定的对象fun2.call(&#123;age:18&#125;);//this为绑定的对象，无法修改fun2.apply(&#123;age:18&#125;);//this为绑定的对象，无法修改 3.2绑定后续实参 当使用bind绑定参数后，副本中的对应实参就是固定值了，调用时传参表示后续参数12345var fun = function (a, b, c) &#123; console.log(a, b, c);&#125;;var fun2 = fun.bind(null, 100);fun2(200, 300); 示例：1234567891011121314151617181920212223242526272829// 例子：使用某些功能时，如果某些参数长期设置为固定值，可以使用bind方式进行绑定 var btn = document.getElementById('btn'); /*btn.addEventListener('click', function () &#123; console.log('这是点击事件1'); &#125;); btn.addEventListener('click', function () &#123; console.log('这是点击事件2'); &#125;); btn.addEventListener('click', function () &#123; console.log('这是点击事件3'); &#125;); btn.addEventListener('click', function () &#123; console.log('这是点击事件4'); &#125;);*/ var btnClick = btn.addEventListener.bind(btn, 'click'); btnClick(function () &#123; console.log('这是点击事件1'); &#125;); btnClick(function () &#123; console.log('这是点击事件2'); &#125;); btnClick(function () &#123; console.log('这是点击事件3'); &#125;); btnClick(function () &#123; console.log('这是点击事件4'); &#125;); // bind - ie9以下不支持，但是常用. 小结 call 和 apply 特性一样 都是用来调用函数，而且是立即调用 但是可以在调用函数的同时，通过第一个参数指定函数内部 this 的指向 call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可 apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递 如果第一个参数指定了 null 或者 undefined 则内部 this 指向 window bind 可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数 它和 call、apply 最大的区别是：bind 不会调用 bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递 在 bind 的同时，以参数列表的形式进行传递 在调用的时候，以参数列表的形式进行传递 那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准 两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部 函数的其它成员 arguments 实参集合 caller 函数的调用者 length 形参的个数 name 函数的名称 12345678910111213function fn(x, y, z) &#123;console.log(fn.length) // =&gt; 形参的个数console.log(arguments) // 伪数组实参参数集合console.log(arguments.callee === fn) // 函数本身console.log(fn.caller) // 函数的调用者console.log(fn.name) // =&gt; 函数的名字&#125;function f() &#123;fn(10, 20, 30)&#125;f() 高阶函数 函数可以作为参数 参数： 使用场景：当函数内的某些数据不确定时，采用参数。 形参和实参： 书写位置：形参书写在函数体的小括号中，相当于一个局部变量 实参书写在函数调用中，用于以值传递的方式给形参赋值 函数可以作为返回值 返回值： 函数根据功能分为两类。获取操作和设置操作 获取操作必须设置返回值，设置操作不需要设置返回值。 作为参数12345678910function eat (callback) &#123;setTimeout(function () &#123; console.log('吃完了') callback()&#125;, 1000)&#125;eat(function () &#123;console.log('去唱歌')&#125;) 作为返回值1234567891011function genFun (type) &#123;return function (obj) &#123; return Object.prototype.toString.call(obj) === type&#125;&#125;var isArray = genFun('[object Array]')var isObject = genFun('[object Object]')console.log(isArray([])) // =&gt; trueconsole.log(isArray(&#123;&#125;)) // =&gt; true 函数的属性 函数的属性： length - 用于获取形参个数12345678910111213141516171819 var fun = function (a,b,c)&#123;&#125;; console.log(fun.length);``` - 2. prototype - 用于获取原型对象 - 这个属性是给构造函数准备的，普通函数不使用- 3. caller - 用于表示函数的调用位置 - 返回值： - 全局调用函数，返回null - 在某个函数内调用当前函数，返回调用位置```javascript var fun = function()&#123; console.log(fun.caller); &#125;; var fun2 = function()&#123; fun(); &#125;; fun2(); arguments属性 - 相当于函数内的arguments伪数组对象 这个属性官方已经不推荐使用了，推荐使用arguments对象结构12345var fun = function()&#123; console.log(arguments); console.log(fun.arguments);&#125;fun(1,2,3); 4.1 arguments的使用 作用：用于获取函数传入的所有实参 返回值：伪数组对象(没有数组的方法) 常用的使用场景：模拟函数重载(根据实参的个数不同，设置不同的功能) 123456789101112131415161718//例如，函数传1个参数，直接打印，两个参个求和，3个参数求最大值var fun = function()&#123; if(arguments.length === 1)&#123; console.log(arguments[0]); &#125;else if(arguments.length === 2)&#123; console.log('和为:' + (arguments[0] + arguments[1])); &#125;else if (arguments.length === 3)&#123; var ag1 = arguments[0]; var ag2 = arguments[1]; var ag3 = arguments[2]; var max = ag1 &gt; ag2 ? ag1 : ag2; console.log(max &gt; ag3 ? max : ag3); &#125;&#125;;fun(100);fun(100,200);fun(100,200,350); 4.2 arguments.callee - 用于获取当前函数 官方不推荐使用这个属性，直接使用名字即可1234var fun = function()&#123; console.log(arguments.callee);&#125;;fun(); 函数的其他使用方式(函数闭包) 函数的使用方式： 1 基本使用形式：函数声明语句，函数表达式 2 立即执行函数(自调用函数)12345678910111213141516171819202122232425262728// - (function () &#123;&#125;)(); // - 注意：最后要加;// - 作用：在书写位置执行一次，用于减少全局变量得使用// - 使用场景：会将每个独立的功能外使用立即执行函数包裹。（多个功能代码，多人得代码）// - 常用的参数：var count = 100;(function () &#123; (function () &#123; (function (window, document, count) &#123; // var win = window; window.count; // window得属性中，document属性使用是最多的 // 为了减少对window对象属性得访问次数，可以将document进行相同设置 // 如果在具体操作时还需要使用某些内容，也可以按照上面得方式进行设置，例如count &#125;)(window, document, count); &#125;)(); (function () &#123; &#125;)(); count; var num = 100;&#125;)();(function () &#123; var num = 100;&#125;)(); 模块化操作123456789101112131415// 模块：模块实际上就是'部分' // 模块化：将一团功能代码清晰得分割为多个部分就成为模块化。 // 模块化的操作方式： // 1 使用立即执行函数 // - 将每个模块外使用立即执行函数包裹 // - 需要将每个模块中得主体功能进行'暴露'操作:将主体功能设置给window的属性 // - 通常还可以将每个模块得功能代码使用独立得文件保存 // 使用这种模块化操作方式得问题： // * 依赖关系(例如game模块需要使用snake和food模块，我们就称game依赖于snake和food) // - 由于多个功能相互之间具有依赖关系,意味着文件得引入顺序需要考虑 // 2 使用requirejs进行模块化操作 // - requirejs是一个js库，这个库跟jQuery没有关系 // - 作用：用于进行模块化操作]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[34-继承与多态]]></title>
    <url>%2F2017%2F03%2F14%2FJS%2F34-%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[继承什么是继承 继承：为了实现更好的数据共享。 例如：继承指的是对象与对象之间的继承操作。（你有的我也想有） 现实生活中的继承 程序中的继承 借用构造函数继承 这种继承方式称为借用构造函数继承。 好处：可以继承构造函数体中的属性，可以传参 缺点：无法继承原型中的方法12345678910111213141516171819202122232425262728293031323334353637383940function People (name, age) &#123; this.name = name; this.age = age;&#125;People.prototype.sayHi = function () &#123; console.log('你好，我是' + this.name);&#125;;function Student (name, age, school) &#123; // 在Student中this为s1，将this传入到People.call(this)中 // 表示将People中的this指向s1，People中的属性都会设置给s1 People.call(this, name, age); // 这种继承方式称为借用构造函数继承。 // 好处：可以继承构造函数体中的属性，可以传参 // 缺点：无法继承原型中的方法 this.school = school;&#125;Student.prototype.sayHi = function () &#123; console.log('你好，我是' + this.name);&#125;;Student.prototype.study = function () &#123; console.log('每天代码1w行');&#125;;var p1 = new People('jack', 18);var s1 = new Student('rose', 21, '北大');console.log(s1.name, s1.age, s1.school)function fun (name, age) &#123; console.log(name, age, this);&#125;// 普通的函数内使用this，指向windowfun('jack', 100);// call方法的参数1用于设置某个函数内的this指向var obj = &#123;name : 'jack'&#125;;fun.call(obj, 'rose', 21); 原型继承方法 这种继承方式称为原型继承 好处：可以继承原型中的所有功能 缺点：属性虽然也可以继承，但是是固定值，没有意义 1234567891011121314151617181920212223242526272829303132 function People (name, age) &#123; this.name = name; this.age = age;&#125;People.prototype.sayHi = function () &#123; console.log('你好，我是' + this.name);&#125;;People.prototype.sayHi1 = function () &#123; console.log('你好，我是' + this.name);&#125;;People.prototype.sayHi2 = function () &#123; console.log('你好，我是' + this.name);&#125;;People.prototype.sayHi3 = function () &#123; console.log('你好，我是' + this.name);&#125;;function Student (school) &#123; this.school = school;&#125;Student.prototype = new People('rose', 18);Student.prototype.study = function () &#123; console.log('每天代码1w行');&#125;;// var p1 = new People('jack', 18);var s1 = new Student('北大');console.log(s1.name, s1.age, s1.school);var s2 = new Student('清华');console.log(s2.name); 组合继承 组合继承是最常用的一种继承方式 实际上就是将借用构造继承和原型继承一起使用了而已。1234567891011121314151617181920212223242526 function People (name, age) &#123; this.name = name; this.age = age;&#125;People.prototype.sayHi = function () &#123; console.log('你好，我是' + this.name);&#125;;function Student (name, age, school) &#123; People.call(this, name, age); this.school = school;&#125;// 由于使用了借用构造函数继承方式，原型继承就不需要传参数了，没有意义Student.prototype = new People();Student.prototype.constructor = Student;Student.prototype.study = function () &#123; console.log('每天代码1w行');&#125;;// var p1 = new People('jack', 18);var s1 = new Student('jack', 21, '北大');console.log(s1.name, s1.age, s1.school);s1.sayHi();console.log(s1.constructor); console.log(s1); 要注意的点： 1 由于原型继承方式直接覆盖了Student的原型，需要手动设置constructor 2 由于覆盖，需要将原型中新的方法设置在继承操作的后面 拷贝继承方式：12345678910111213141516171819202122// 1 单个对象的继承操作 var obj = &#123; name : 'jack', age : 18, sayHi : function () &#123; console.log('这是sayHi'); &#125; &#125;; var obj2 = &#123; school : '北大', sayHehe : function () &#123; console.log('这是sayHehe'); &#125; &#125;; // 遍历，依次设置每个属性 for (var k in obj) &#123; obj2[k] = obj[k]; &#125; console.log(obj2); 构造函数之间的拷贝继承12345678910111213141516171819202122function People (name, age) &#123; this.name = name; this.age = age; &#125; People.prototype.sayHi = function () &#123; console.log('你好，我是' + this.name); &#125;; function Student (name, age, school) &#123; People.call(this, name, age); this.school = school; &#125; Student.prototype.study = function () &#123; console.log('每天代码1w行'); &#125;; // 我们希望可以得到构造函数People原型中的方法，就可以利用遍历方式，将People原型中的功能直接设置给Student的原型 for (var k in People.prototype) &#123; Student.prototype[k] = People.prototype[k]; &#125; var s1 = new Student('jack', 18, '清华'); s1.sayHi(); 原型链继承方式12345678910111213141516171819202122232425262728function People (name, age) &#123; this.name = name; this.age = age;&#125;People.prototype.sayHi = function () &#123; console.log('这是sayHi');&#125;;function Student (name, age, school) &#123; People.call(this, name, age); this.school = school;&#125;// 使用原型继承可以继承原型中得所有功能，但是会增加一些不必要得属性// Student.prototype = new People();// 为了去除不必要得属性，可以使用一个空函数进行功能得中转function Fun () &#123;&#125;Fun.prototype = People.prototype;Student.prototype = new Fun();Student.prototype.constructor = Student;Student.prototype.study = function () &#123; console.log('这是study');&#125;;var s1 = new Student('jack', 18, '黑马');console.log(s1); 构造函数和实例对象和原型对象之间的关系1234567 function CreateObj () &#123;&#125;CreateObj.prototype.sayHi = function () &#123; console.log('这是sayHi方法');&#125;;var c1 = new CreateObj(); 实例对象都具有proto属性，指向了原型对象。 构造函数都具有prototype属性，指向了原型对象。 原型对象都具有constructor属性，指向构造函数，这个属性可以被实例对象访问。 多态 多态：多态在js中的使用较少。 含义：一个功能针对不同的数据进行使用时，呈现得功能是不同的。 由于js是弱类型语言，变量声明使用var，表示不用确定变量得类型。使用多态不适合 而且操作较为繁琐，通常不使用。 123456789101112// 功能：打印传入得值function fun (value) &#123; // console.log(value); if (typeof value === 'string') &#123; console.log('哈哈哈，这是字符串' + value); &#125; else if (typeof value === 'number') &#123; console.log('这个value和100得和为：' + (value + 100)); &#125;&#125;fun(100);fun('abc');]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[33-原型]]></title>
    <url>%2F2017%2F03%2F13%2FJS%2F33-%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[原型内容引导： 使用 prototype 原型对象解决构造函数的问题 分析 构造函数、prototype 原型对象、实例对象 三者之间的关系 属性成员搜索原则：原型链 实例对象读写原型对象中的成员 原型对象的简写形式 原生对象的原型 Object Array String … 原型对象的问题 构造的函数和原型对象使用建议 更好的解决方案： prototypeJavascript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。 这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 prototype 对象上。 1234567891011121314151617function Person (name, age) &#123; this.name = name this.age = age&#125;console.log(Person.prototype)Person.prototype.type = 'human'Person.prototype.sayName = function () &#123; console.log(this.name)&#125;var p1 = new Person(...)var p2 = new Person(...)console.log(p1.sayName === p2.sayName) // =&gt; true 这时所有实例的 type 属性和 sayName() 方法，其实都是同一个内存地址，指向 prototype 对象，因此就提高了运行效率。 构造函数、实例、原型三者之间的关系 任何函数都具有一个 prototype 属性，该属性是一个对象。 123456function F () &#123;&#125;console.log(F.prototype) // =&gt; objectF.prototype.sayHi = function () &#123; console.log('hi!')&#125; 构造函数的 prototype 对象默认都有一个 constructor 属性，指向 prototype 对象所在函数。 1console.log(F.constructor === F) // =&gt; true 通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针 __proto__。 12var instance = new F()console.log(instance.__proto__ === F.prototype) // =&gt; true __proto__ 是非标准属性。 实例对象可以直接访问原型对象成员。 1instance.sayHi() // =&gt; hi! instanceof - 实例 12345678910111213141516171819202122232425function People (name, age) &#123; this.name = name; this.age = age;&#125;People.prototype.sayHi = function () &#123; console.log('这是sayHi');&#125;;function Student (name, age, school) &#123; People.call(this, name, age); this.school = school&#125;Student.prototype = new People();Student.prototype.constructor = Student;Student.prototype.study = function () &#123; console.log('这是study');&#125;;var s1 = new Student('jack', 18, '北京');//instance - 实例//instanceof - 检测，如果某个构造函数存在与某个实例对象的原型链中，即可返回trueconsole.log(s1 instanceof Student); //trueconsole.log(s1 instanceof People); //trueconsole.log(se instanceof Object); //true 总结： 任何函数都具有一个 prototype 属性，该属性是一个对象 构造函数的 prototype 对象默认都有一个 constructor 属性，指向 prototype 对象所在函数 通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针 __proto__ 所有实例都直接或间接继承了原型对象的成员 属性成员的搜索原则：原型链 原型链的作用 原型链式用来描述是对象和原型对象之间关系的方式 对象的属性访问过程 沿原型链向上查找 原型链的终点 Object.prototype 了解了 构造函数-实例-原型对象 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。 每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性 搜索首先从对象实例本身开始 如果在实例中找到了具有给定名字的属性，则返回该属性的值 如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性 如果在原型对象中找到了这个属性，则返回该属性的值 也就是说，在我们调用 person1.sayName() 的时候，会先后执行两次搜索： 首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。 ”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。 ”于是，它就读取那个保存在原型对象中的函数。 当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。 而这正是多个对象实例共享原型所保存的属性和方法的基本原理。 总结： 先在自己身上找，找到即返回 自己身上找不到，则沿着原型链向上查找，找到即返回 如果一直到原型链的末端还没有找到，则返回 undefined 实例对象读写原型对象成员读取： 先在自己身上找，找到即返回 自己身上找不到，则沿着原型链向上查找，找到即返回 如果一直到原型链的末端还没有找到，则返回 undefined 值类型成员写入（实例对象.值类型成员 = xx）： 当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上 也就是说该行为实际上会屏蔽掉对原型对象成员的访问 引用类型成员写入（实例对象.引用类型成员 = xx）： 同上 复杂类型修改（实例对象.成员.xx = xx）： 同样会先在自己身上找该成员，如果自己身上找到则直接修改 如果自己身上找不到，则沿着原型链继续查找，如果找到则修改 如果一直到原型链的末端还没有找到该成员，则报错（实例对象.undefined.xx = xx） 更简单的原型语法我们注意到，前面例子中每添加一个属性和方法就要敲一遍 Person.prototype 。为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象： 1234567891011function Person (name, age) &#123; this.name = name this.age = age&#125;Person.prototype = &#123; type: 'human', sayHello: function () &#123; console.log('我叫' + this.name + '，我今年' + this.age + '岁了') &#125;&#125; 在该示例中，我们将 Person.prototype 重置到了一个新的对象。这样做的好处就是为 Person.prototype 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 constructor 成员。 所以，我们为了保持 constructor 的指向正确，建议的写法是： 123456789101112function Person (name, age) &#123; this.name = name this.age = age&#125;Person.prototype = &#123; constructor: Person, // =&gt; 手动将 constructor 指向正确的构造函数 type: 'human', sayHello: function () &#123; console.log('我叫' + this.name + '，我今年' + this.age + '岁了') &#125;&#125; 原生对象的原型 所有函数都有 prototype 属性对象。 Object.prototype Function.prototype Array.prototype String.prototype Number.prototype Date.prototype … 练习：为数组对象和字符串对象扩展原型方法。 原型对象的问题 共享数组 共享对象 如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。 一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。 原型对象使用建议 私有成员（一般就是非函数成员）放到构造函数中 共享成员（一般就是函数）放到原型对象中 如果重置了 prototype 记得修正 constructor 的指向]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[32-构造函数]]></title>
    <url>%2F2017%2F03%2F13%2FJS%2F32-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[构造函数内容引导： 构造函数语法 分析构造函数 构造函数和实例对象的关系 实例的 constructor 属性 instanceof 操作符 普通函数调用和构造函数调用的区别 构造函数的返回值 构造函数的静态成员和实例成员 函数也是对象 实例成员 静态成员 构造函数的问题 更优雅的工厂函数：构造函数 一种更优雅的工厂函数就是下面这样，构造函数： 123456789101112function Person (name, age) &#123;this.name = namethis.age = agethis.sayName = function () &#123; console.log(this.name)&#125;&#125;var p1 = new Person('Jack', 18)p1.sayName() // =&gt; Jackvar p2 = new Person('Mike', 23)p2.sayName() // =&gt; Mike 解析构造函数代码的执行 在上面的示例中，Person() 函数取代了 createPerson() 函数，但是实现效果是一样的。这是为什么呢？ 我们注意到，Person() 中的代码与 createPerson() 有以下几点不同之处： 没有显示的创建对象 直接将属性和方法赋给了 this 对象 没有 return 语句 函数名使用的是大写的 Person 而要创建 Person 实例，则必须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤： 创建一个新对象 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象） 执行构造函数中的代码 返回新对象 下面是具体的伪代码： 12345678910111213141516function Person (name, age) &#123;// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象// var instance = &#123;&#125;// 然后让内部的 this 指向 instance 对象// this = instance// 接下来所有针对 this 的操作实际上操作的就是 instancethis.name = namethis.age = agethis.sayName = function () &#123; console.log(this.name)&#125;// 在函数的结尾处会将 this 返回，也就是 instance// return this&#125; 构造函数和实例对象的关系 使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。 在每一个实例对象中的__proto__中同时有一个 constructor 属性，该属性指向创建该实例的构造函数： 123console.log(p1.constructor === Person) // =&gt; trueconsole.log(p2.constructor === Person) // =&gt; trueconsole.log(p1.constructor === p2.constructor) // =&gt; true 对象的 constructor 属性最初是用来标识对象类型的，但是，如果要检测对象的类型，还是使用 instanceof 操作符更可靠一些： 12console.log(p1 instanceof Person) // =&gt; trueconsole.log(p2 instanceof Person) // =&gt; true 总结： 构造函数是根据具体的事物抽象出来的抽象模板 实例对象是根据抽象的构造函数模板得到的具体实例对象 每一个实例对象都具有一个 constructor 属性，指向创建该实例的构造函数 注意： constructor 是实例的属性的说法不严谨，具体后面的原型会讲到 可以通过实例的 constructor 属性判断实例和构造函数之间的关系 注意：这种方式不严谨，推荐使用 instanceof 操作符，后面学原型会解释为什么 构造函数的问题使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：1234567891011function Person (name, age) &#123;this.name = namethis.age = agethis.type = 'human'this.sayHello = function () &#123; console.log('hello ' + this.name)&#125;&#125;var p1 = new Person('zxx', 18)var p2 = new Person('Jack', 16) 在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。 那就是对于每一个实例对象，type 和 sayHello 都是一模一样的内容， 每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。1console.log(p1.sayHello === p2.sayHello) // =&gt; false 对于这种问题我们可以把需要共享的函数定义到构造函数外部： 123456789101112131415function sayHello = function () &#123;console.log('hello ' + this.name)&#125;function Person (name, age) &#123;this.name = namethis.age = agethis.type = 'human'this.sayHello = sayHello&#125;var p1 = new Person('zxx', 18)var p2 = new Person('Jack', 16)console.log(p1.sayHello === p2.sayHello) // =&gt; true 这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。 你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题： 12345678910111213141516171819202122var fns = &#123;sayHello: function () &#123; console.log('hello ' + this.name)&#125;,sayAge: function () &#123; console.log(this.age)&#125;&#125;function Person (name, age) &#123;this.name = namethis.age = agethis.type = 'human'this.sayHello = fns.sayHellothis.sayAge = fns.sayAge&#125;var p1 = new Person('zxx', 18)var p2 = new Person('Jack', 16)console.log(p1.sayHello === p2.sayHello) // =&gt; trueconsole.log(p1.sayAge === p2.sayAge) // =&gt; true 至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。但是代码看起来还是那么的格格不入，那有没有更好的方式呢？ 小结 构造函数语法 分析构造函数 构造函数和实例对象的关系 实例的 constructor 属性 instanceof 操作符 构造函数的问题]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[31-创建对象]]></title>
    <url>%2F2017%2F03%2F12%2FJS%2F31-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[创建对象 我们可以直接通过 new Object() 创建： 1234567var person = new Object()person.name = 'Jack'person.age = 18person.sayName = function () &#123;console.log(this.name)&#125; 每次创建通过 new Object() 比较麻烦，所以可以通过它的简写形式对象字面量来创建1234567var person = &#123;name: 'Jack',age: 18,sayName: function () &#123; console.log(this.name)&#125;&#125; 对于上面的写法固然没有问题，但是假如我们要生成两个 person 实例对象呢？ 123456789101112131415var person1 = &#123;name: 'Jack',age: 18,sayName: function () &#123; console.log(this.name)&#125;&#125;var person2 = &#123;name: 'Mike',age: 16,sayName: function () &#123; console.log(this.name)&#125;&#125; 通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。 简单方式的改进：工厂函数 我们可以写一个函数，解决代码重复问题： 123456789function createPerson (name, age) &#123;return &#123; name: name, age: age, sayName: function () &#123; console.log(this.name) &#125;&#125;&#125; 然后生成实例对象： 12var p1 = createPerson('Jack', 18)var p2 = createPerson('Mike', 18) 这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题， 但却没有解决对象识别的问题（即怎样知道一个对象的类型）。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30-面向对象]]></title>
    <url>%2F2017%2F03%2F12%2FJS%2F30-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[JavaScript 面向对象编程面向对象介绍 面向对象简介： 面向对象是一种编程思想，面向过程也是一种编程思想。 面向：专注于 面向过程：我们以前书写的代码大部分都是面向过程的，专注于功能操作的细节，每个步骤都需要自己进行处理。 面向对象(工具)：我们以前也进行过面向对象的操作，例如，使用内置对象的功能，使用jQuery的功能。 面向过程就像我们自己在家做饭：买菜，洗菜，切菜，炒菜，放调料，称出来，刷锅 面向对象就像我们去饭馆吃饭：找到心仪的饭馆，吃就可以了(交钱) 注意：能不能说面向对象比面向过程好呢？不能，两种编程思想不具有可比性。 面向对象的特性： javascript原生不支持面向对象，es6 可以通过其他操作去模拟面向对象。 封装性 - 对象(工具)封装 继承性 - 为了实现功能的复用 多态性 - 增强功能使用的灵活性 什么是对象 Everything is object （万物皆对象） 对象到底是什么，我们可以从两次层次来理解。 (1) 对象是单个事物的抽象。 一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。 (2) 对象是一个容器，封装了属性（property）和方法（method）。 属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。 在实际开发中，对象是一个抽象的概念，可以将其简单理解为：数据集或功能集。 ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。 提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。 什么是面向对象 面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。 面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。 它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。 在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。 因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。 面向对象与面向过程： 面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊 面向对象就是找一个对象，指挥得结果 面向对象将执行者转变成指挥者 面向对象不是面向过程的替代，而是面向过程的封装 扩展阅读： 维基百科 - 面向对象程序设计 知乎：如何用一句话说明什么是面向对象思想？ 知乎：什么是面向对象编程思想？ 程序中面向对象的基本体现 在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（ Class ）的概念。 我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。 假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示： 12var std1 = &#123; name: 'Michael', score: 98 &#125;var std2 = &#123; name: 'Bob', score: 81 &#125; 而处理学生成绩可以通过函数实现，比如打印学生的成绩： 123function printScore (student) &#123; console.log('姓名：' + student.name + ' ' + '成绩：' + student.score)&#125; 如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是 Student 这种数据类型应该被视为一个对象，这个对象拥有 name 和 score 这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 printScore 消息，让对象自己把自己的数据打印出来。 抽象数据行为模板（Class）： 12345678function Student (name, score) &#123; this.name = name this.score = score&#125;Student.prototype.printScore = function () &#123; console.log('姓名：' + this.name + ' ' + '成绩：' + this.score)&#125; 根据模板创建具体实例对象（Instance）： 12var std1 = new Student('Michael', 98)var std2 = new Student('Bob', 81) 实例对象具有自己的具体行为（给对象发消息）： 12std1.printScore() // =&gt; 姓名：Michael 成绩：98std2.printScore() // =&gt; 姓名：Bob 成绩 81 面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念， 而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。 所以，面向对象的设计思想是： 抽象出 Class 根据 Class 创建 Instance 指挥 Instance 得结果 面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[29-回顾掌握]]></title>
    <url>%2F2017%2F03%2F11%2FJS%2F29-%E5%9B%9E%E9%A1%BE%E6%8E%8C%E6%8F%A1%2F</url>
    <content type="text"><![CDATA[重新介绍 JavaScriptJavaScript 是什么 解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言 语言特点：动态，头等函数 (First-class Function) 又称函数是 JavaScript 中的一等公民 执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境 但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js 编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格 JavaScript 与浏览器的关系 JavaScript 的组成 组成部分 说明 Ecmascript 描述了该语言的语法和基本对象 DOM 描述了处理网页内容的方法和接口 BOM 描述了与浏览器进行交互的方法和接口 JavaScript 可以做什么 Any application that can be written in JavaScript, will eventually be written in JavaScript.凡是能用 JavaScript 写出来的，最终都会用 JavaScript 写出来 知乎 - JavaScript 能做什么，该做什么？ 最流行的编程语言 JavaScript 能做什么？ JavaScript 发展历史 JavaScript 标准参考教程 - JavaScript 语言的历史 JavaScript 的诞生 JavaScript 与 Ecmascript 的关系 JavaScript 与 Java 的关系 JavaScript 的版本 JavaScript 周边大事记 JavaScript 执行过程JavaScript 运行分为两个阶段： 预解析 全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高） 函数内部预解析（所有的变量、函数和形参都会参与预解析） 函数 形参 普通变量 执行 先预解析全局作用域，然后执行全局作用域中的代码，在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[28-js原生轮播图]]></title>
    <url>%2F2017%2F03%2F10%2FJS%2F28-%E8%BD%AE%E6%92%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[轮播图简单轮播图 结构分析 按钮高亮以及排他 移动图片：渐渐的移动图片，用到animate函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang="en"&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; * &#123; padding: 0; margin: 0; list-style: none; &#125; img &#123; vertical-align: middle;/*去掉图片上下三像素缝隙*/ &#125; .outer &#123; width: 490px; height: 170px; padding: 5px; margin: 100px auto; border: 1px solid #ccc; &#125; .inner &#123; width: 490px; height: 170px; overflow: hidden; position: relative; &#125; ul &#123; position: absolute; top: 0; left: 0; width: 510%; &#125; ul li &#123; float: left; &#125; ol &#123; position: absolute; bottom: 10px; right: 10px; &#125; ol li &#123; float: left; width: 16px; height: 16px; text-align: center; line-height: 16px; border: 1px solid #ccc; margin: 0 5px; cursor: pointer; background-color: #fff; &#125; .current &#123; color: #fff; background-color: orange; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; //需求：鼠标进入哪个ol中的li，移动ul; //思路: 1.点亮盒子; 2.移动ul; //获取相关元素 var outer = document.getElementById("outer"); var inner = outer.firstElementChild || outer.firstChild; var imgWidth = inner.offsetWidth; var ol = inner.lastElementChild || inner.lastChild; var ul = ol.previousElementSibling || ol.previousSibling; var olLiArr = ol.children; //for循环绑定事件：//思路: 1.点亮盒子; 2.移动ul; for(var i=0;i&lt;olLiArr.length;i++)&#123; //自定义属性绑定索引值 olLiArr[i].index = i; olLiArr[i].onmouseover = function () &#123; //思路: 1.点亮盒子; 2.移动ul; //1.点亮盒子;(排他思想) for(var j=0;j&lt;olLiArr.length;j++)&#123; olLiArr[j].className = ""; &#125; this.className = "current"; //2.移动ul; //a.鼠标放在ol中的第一个li上，ul向左移动0; //b.鼠标放在ol中的第二个li上，ul向左移动1张图片的宽; //c.鼠标放在ol中的第三个li上，ul向左移动2张图片的宽; //.... //n.鼠标放在ol中的第n个li上，ul向左移动li对应"索引值"张图片的宽; var sss = this.index*imgWidth; animate(ul,-sss); &#125; &#125; &#125; //匀速动画封装 function animate(ele,target) &#123; //要用定时器，先清除定时器; clearInterval(ele.timer); //设置定时器; ele.timer = setInterval(function () &#123; //1.获取步长; var step = target &gt; ele.offsetLeft? 10: -10; //2.赋值 ele.style.left = ele.offsetLeft + step + "px"; //3.目标位置和当前位置不足或者等于一个步长就清除定时器i; if(Math.abs(target-ele.offsetLeft) &lt;= Math.abs(step))&#123; //清除定时器之前，直接设置目标位置 ele.style.left = target+"px"; clearInterval(ele.timer); &#125; &#125;,10); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="outer" id="outer"&gt; &lt;div class="inner"&gt; &lt;ul&gt; &lt;li&gt;&lt;img src="images/01.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/02.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/03.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/04.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/05.jpg"/&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ol&gt; &lt;li class="current"&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 左右焦点图 结构分析 左右箭头的显示与隐藏 点击左箭头与右箭头（下标判断） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;style type="text/css"&gt; body, ul, ol, li, img &#123; margin: 0; padding: 0; list-style: none; &#125; #box &#123; width: 490px; height: 170px; padding: 5px; position: relative; border: 1px solid #ccc; margin: 100px auto 0; overflow: hidden; &#125; .ad &#123; width: 490px; height: 170px; overflow: hidden; position: relative; &#125; #box img &#123; width: 490px; &#125; .ad ol &#123; position: absolute; right: 10px; bottom: 10px; &#125; .ad ol li &#123; width: 20px; height: 20px; line-height: 20px; border: 1px solid #ccc; text-align: center; background: #fff; float: left; margin-right: 10px; cursor: pointer; _display: inline; &#125; .ad ol li.current &#123; background: yellow; &#125; .ad ul li &#123; float: left; &#125; .ad ul &#123; position: absolute; top: 0; width: 2940px; &#125; .ad ul li.current &#123; display: block; &#125; #arr &#123; /*display: none;*/ &#125; #arr span &#123; width: 40px; height: 40px; position: absolute; left: 5px; top: 50%; margin-top: -20px; background: #000; cursor: pointer; line-height: 40px; text-align: center; font-weight: bold; font-family: '黑体'; font-size: 30px; color: #fff; opacity: 0.3; border: 1px solid #fff; &#125; #arr #right &#123; right: 5px; left: auto; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; //需求: 点击右侧按钮，移动ul; //(自定义索引值，点击后自增/自减，逻辑左侧和右侧相反); //获取元素; var ul = document.getElementById("imgs"); var left = document.getElementById("left"); var right = document.getElementById("right"); var imgWidth = document.getElementById("ad").offsetWidth; //右侧按钮，点击以后自定义的索引值自增; var index = 0;//自定义索引值; right.onclick = function () &#123; //自增 index++; //判断：不能超过5个; if(index === 5)&#123; index = 4;//变回原来的值; alert("已经是最后一张"); return; &#125; //移动ul； var sss = imgWidth*index; animate(ul,-sss); &#125; //左侧逻辑相反 left.onclick = function () &#123; //自减 index--; //判断：不能等于-1; if(index === -1)&#123; index = 0;//变回原来的值; alert("已经是第一张"); return; &#125; //移动ul； var sss = imgWidth*index; animate(ul,-sss); &#125; &#125; //匀速动画封装 function animate(ele,target) &#123; //要用定时器，先清除定时器; clearInterval(ele.timer); //设置定时器; ele.timer = setInterval(function () &#123; //1.获取步长; var step = target &gt; ele.offsetLeft? 10: -10; //2.赋值 ele.style.left = ele.offsetLeft + step + "px"; //3.目标位置和当前位置不足或者等于一个步长就清除定时器i; if(Math.abs(target-ele.offsetLeft) &lt;= Math.abs(step))&#123; //清除定时器之前，直接设置目标位置 ele.style.left = target+"px"; clearInterval(ele.timer); &#125; &#125;,10); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="box" class="all"&gt; &lt;div class="ad" id="ad"&gt; &lt;ul id="imgs"&gt; &lt;li&gt;&lt;img src="images/1.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/2.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/3.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/4.jpg"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/5.jpg"/&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div id="arr"&gt; &lt;span id="left"&gt;&lt;&lt;/span&gt; &lt;span id="right"&gt;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 无缝轮播图 需要添加假图片 真图片与假图片之间互相切换。lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;style type="text/css"&gt; * &#123; padding: 0; margin: 0; list-style: none; border: 0; &#125; .all &#123; width: 500px; height: 200px; padding: 7px; border: 1px solid #ccc; margin: 100px auto; position: relative; &#125; .screen &#123; width: 500px; height: 200px; overflow: hidden; position: relative; &#125; .screen li &#123; width: 500px; height: 200px; overflow: hidden; float: left; &#125; .screen ul &#123; position: absolute; left: 0; top: 0px; width: 3000px; &#125; .all ol &#123; position: absolute; right: 10px; bottom: 10px; line-height: 20px; text-align: center; &#125; .all ol li &#123; float: left; width: 20px; height: 20px; background: #fff; border: 1px solid #ccc; margin-left: 10px; cursor: pointer; &#125; .all ol li.current &#123; background: yellow; &#125; #arr &#123; display: none; &#125; #arr span &#123; width: 40px; height: 40px; position: absolute; left: 5px; top: 50%; margin-top: -20px; background: #000; cursor: pointer; line-height: 40px; text-align: center; font-weight: bold; font-family: '黑体'; font-size: 30px; color: #fff; opacity: 0.3; border: 1px solid #fff; &#125; #arr #right &#123; right: 5px; left: auto; &#125; &lt;/style&gt; &lt;script&gt; window.onload = function () &#123; //案例3：无缝滚动; //原理：复制第一张到添加到ul的最末尾最末尾， // 当第二轮从第一张滑向第二种的时候瞬间闪动到第一张， // 在动第一张滑向第二张; //需求1: 复制第一张图片添加到ul的最末尾，生成很多li添加到ol中，把第一张点亮; //需求2: 鼠标进入ol中的，点亮盒子，移动ul;(案例1) //需求3: 鼠标点击右侧按钮，点亮盒子，移动ul;(案例2和无缝滚动原理) //需求4: 左侧按钮(类比右侧按钮逻辑) //需求5: 定时器的添加;(类比右侧按钮逻辑) //获取相关元素 var outer = document.getElementById("all"); var screen = document.getElementById("screen"); var imgWidth = screen.offsetWidth; var ul = document.getElementById("ul"); var ulLiArr = ul.children; var ol = document.getElementById("ol"); var arr = document.getElementById("arr"); var left = document.getElementById("left"); var right = document.getElementById("right"); //需求1: 生成很多li添加到ol中，把第一张点亮，复制第一张图片添加到ul的最末尾; for(var i=0;i&lt;ulLiArr.length;i++)&#123; var newLi = document.createElement("li"); newLi.innerHTML = i+1; ol.appendChild(newLi); &#125; //把ol中的第一个li点亮 var olLiArr = ol.children; olLiArr[0].className = "current"; //复制ul中的第一个li添加到ul的最末尾; var li = ulLiArr[0].cloneNode(true); ul.appendChild(li); //需求2: 鼠标进入ol中的，点亮盒子，移动ul;(案例1) for(var i=0;i&lt;olLiArr.length;i++)&#123; //自定义属性绑定索引值 olLiArr[i].index = i; olLiArr[i].onmouseover = function () &#123;// alert(this.innerHTML-1); //1.点亮盒子 2.移动ul; //bug: 鼠标进入没有同步square和key的值; square = key = this.index; //1.点亮盒子(排他思想) for(var j=0;j&lt;olLiArr.length;j++)&#123; olLiArr[j].className = ""; &#125; this.className = "current"; //2.移动ul var sss = imgWidth*this.index; animate(ul,-sss); &#125; &#125; //需求3: 鼠标点击右侧按钮，点亮盒子，移动ul;(案例2和无缝滚动原理) //自定义变量代替索引值要定义两个：因为图片和小方块的个数不一样； var square = 0;//小方块的索引值 var key = 0;//图片的索引值 //绑定事件 right.onclick = autoPlay; //需求4: 左侧按钮(类比右侧按钮逻辑) //左侧按钮和右侧按钮逻辑相反 left.onclick = function () &#123; //索引值自减 square--; key--; //不能让square和key无限制自减; //square最小值为0; 等于-1要把他设置为4(最后一个); if(square === -1)&#123; square = olLiArr.length-1;//最大索引值 &#125; //key最小值为0；等于-1要把ul瞬间闪动到最后一张(索引值为5)，然后滑动到第五张; if(key === -1)&#123; //瞬间闪动到最后一张 ul.style.left = -imgWidth*(ulLiArr.length-1)+"px"; key = ulLiArr.length-2;//滑向倒数第二张;索引值为4; &#125; //点亮盒子，移动ul for(var j=0;j&lt;olLiArr.length;j++)&#123; olLiArr[j].className = ""; &#125; olLiArr[square].className = "current";//指定索引值的小方块变亮; //移动ul var sss = imgWidth*key;//图片的索引值; animate(ul,-sss); &#125; //需求5: 定时器的添加;(类比右侧按钮逻辑) //定时器逻辑和右侧按钮相同，那么封装起来; var timer = setInterval(autoPlay,1000); //鼠标进入停止定时器，移开开启定时器; //鼠标进入显示移开要隐藏; outer.onmouseover = function () &#123; arr.style.display = "block"; //停止定时器 clearInterval(timer); &#125; outer.onmouseout = function () &#123; arr.style.display = "none"; //开启定时器 timer = setInterval(autoPlay,1000); &#125; //右侧按钮逻辑的封装 function autoPlay() &#123; //点击右侧按钮，索引值自增; square++; key++; //key和square不能无限制自增; //square到5的时候就要清0了; if(square === olLiArr.length)&#123; square = 0; &#125; //无缝滚动原理:第二轮从第一张滑向第二张的时候，瞬间闪动到第一张，在滑向第二张; //key的值最多到5，因为只有6张图片;等于6的时候瞬间闪动到第一张，在从第一张滑向第二张; if(key === ulLiArr.length)&#123; //瞬间闪动到第一张： ul.style.left = 0; //滑向第二张; key = 1;//第二张索引值为1;(下面点亮盒子，移动ul) &#125; //1.点亮盒子 2.移动ul; for(var j=0;j&lt;olLiArr.length;j++)&#123; olLiArr[j].className = ""; &#125; //当前的变化不能用this，要用square做索引值； olLiArr[square].className = "current"; // 2.移动ul; var sss = imgWidth*key;//图片的索引值是key； animate(ul,-sss); &#125; &#125; //匀速动画封装 function animate(ele,target) &#123; //要用定时器，先清除定时器; clearInterval(ele.timer); //设置定时器; ele.timer = setInterval(function () &#123; //1.获取步长; var step = target &gt; ele.offsetLeft? 10: -10; //2.赋值 ele.style.left = ele.offsetLeft + step + "px"; //3.目标位置和当前位置不足或者等于一个步长就清除定时器i; if(Math.abs(target-ele.offsetLeft) &lt;= Math.abs(step))&#123; //清除定时器之前，直接设置目标位置 ele.style.left = target+"px"; clearInterval(ele.timer); &#125; &#125;,10); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="all" id='all'&gt; &lt;div class="screen" id="screen"&gt; &lt;ul id="ul"&gt; &lt;li&gt;&lt;img src="images/1.jpg" width="500" height="200"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/2.jpg" width="500" height="200"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/3.jpg" width="500" height="200"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/4.jpg" width="500" height="200"/&gt;&lt;/li&gt; &lt;li&gt;&lt;img src="images/5.jpg" width="500" height="200"/&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ol id="ol"&gt; &lt;/ol&gt; &lt;div id="arr"&gt; &lt;span id="left"&gt;&lt;&lt;/span&gt; &lt;span id="right"&gt;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[27-动画运动]]></title>
    <url>%2F2017%2F03%2F09%2FJS%2F27-%E5%8A%A8%E7%94%BB%E8%BF%90%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[动画制作匀速运动1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style lang=""&gt; *&#123; margin: 0px; padding: 0px; &#125; div &#123; width: 200px; height: 200px; background-color: aqua; position: absolute; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button id="btn"&gt;按钮&lt;/button&gt; &lt;div id="box"&gt;&lt;/div&gt; &lt;script&gt; var btn = document.getElementById('btn'); var box = document.getElementById('box'); var timer = null; //元素的运动设置方式(匀速运动效果) btn.onclick = function()&#123; timer = setInterval(function()&#123; //获取元素当前位置 var current = box.offsetLeft; //设置步长 var step = 10; //设置运动条件.如果不满足条件 结束运动 if(current &lt; 400)&#123; //套用运动公式：元素的位置(新) = 元素的位置(旧)+步长 current = current + step; //将新位置设置给left属性 box.style.left = current + 'px'; &#125;else&#123; //设置定时器的清除操作 clearInterval(timer); &#125; &#125;,20); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 变速运动12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style lang=""&gt; div &#123; margin: 0px; padding: 0px; width: 200px; height: 200px; background-color: aqua; position: absolute; top: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="box"&gt;&lt;/div&gt; &lt;button id="btn"&gt;按钮&lt;/button&gt; &lt;script&gt; var box = document.getElementById('box'); var btn = document.getElementById('btn'); var timer = null; //元素的运动设置方式(变速运动效果) btn.onclick = function()&#123; //清除旧的定时器，防止加问题 clearInterval(timer); //开始新的定时器 timer = setInterval(function()&#123; //获取元素当前位置 var current = box.offsetLeft; //设置运动步长：(目标位置 - 当前位置)/10 var step = (800 - current) / 10; //可以对step进行取整 step = Math.ceil(step); //套用公式：元素位置(新) = 元素的位置(旧) + 步长 current = current + step; //将新位置给left属性 box.style.left = current + 'px'; //清除定时器 if(current === 400)&#123; clearInterval(timer); &#125; &#125;,20) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[26-定时器]]></title>
    <url>%2F2017%2F03%2F08%2FJS%2F26-%E5%AE%9A%E6%97%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[定时器延时定时器 timeout 延时定时器可以让代码延迟一段时间之后才执行（定时炸弹） 设置延时定时器12345678//语法：setTimeout(callback, time);//参数1：回调函数，时间到了就会执行。//参数2：延时的时间，毫秒形式//返回：定时器的id，用于清除//示例：var timer = setTimeout(function()&#123; //1秒后将执行的代码。&#125;, 1000); 清除延时定时器1234//语法：clearTimeout(timerId)//参数：定时器id//示例：clearTimeout(timer);//清除上面定义的定时器 123456789101112131415&lt;body&gt; &lt;button id="btn"&gt;停止&lt;/button&gt; &lt;script&gt; var btn = document.getElementById('btn'); // timeout定时器的设置方式： var timer = null; timer = setTimeout(function () &#123; console.log('代码执行啦'); &#125;, 3000); btn.onclick = function () &#123; clearTimeout(timer); &#125;; &lt;/script&gt;&lt;/body&gt; 间歇定时器 interval 间歇定时器让定时器每隔一段时间就会执行一次，并且会一直执行，直到清除定时器为止. 设置间歇定时器12345678//语法：var intervalID = setInterval(func, delay);//参数1：重复执行的函数//参数2：每次间隔的毫秒数//返回：定时器的id，用于清除//示例：var timer = setInterval(function()&#123; //重复执行的代码。&#125;, 1000); 清除间歇定时器1234//语法：clearInterval(intervalID)//参数：定时器id//示例：clearInterval(timer);//清除上面定义的定时器 &lt;body&gt; &lt;button id="btn"&gt;按钮&lt;/button&gt; &lt;script&gt; var btn = document.getElementById('btn'); var timer = null; timer = setInterval(function () { console.log('我执行啦'); }, 1000); btn.onclick = function () { clearInterval(timer); // 特殊点： // 两种清除方式可以交换使用，没有必要，必须对应使用。 // clearTimeout(timer); }; &lt;/script&gt; &lt;/body&gt;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[25-异步任务]]></title>
    <url>%2F2017%2F03%2F07%2FJS%2F25-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[异步任务 以前说js的代码是按顺序从上向下执行的，但并不是所有的代码均会遵循这个规则。 同步任务（排队）：以前我们任务的会从上向下执行的任务 异步任务：js中有的功能执行较为耗时，或执行时间不确定，这种情况将功能设置为异步任务(常见的异步任务：定时器,事件) 所有的异步任务执行均晚于同步任务，需要等待具体的执行时机(定时器事件到了，事件就被触发了) 12345678console.log('这是页面中第一句代码'); setTimeout(function () &#123;console.log('这是定时器内打印的内容2'); &#125;, 2000);setTimeout(function () &#123; console.log('这是定时器内打印的内容1'); &#125;, 1000);console.log('这是定时器后打印的内容'); 12345678for(var i = 0; i &lt; 10; i++)&#123; setTimeout (function ()&#123; console.log(i); &#125;,0);&#125;console.log(i);console.log(i);console.log(i);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[24-offset系列]]></title>
    <url>%2F2017%2F03%2F07%2FJS%2F24-offset%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[offset系列 三大系列都是DOM元素的一些属性; scrollWidth/Heiht/Top/Left offsetWidth/Heiht/Top/Left/Parent clientWidth/Heiht/Top/Left/clientX/clientY width/height: 代指检测盒子的宽高;（padding+border+width/height,内容超出） top/left: 调用者不同功能不同; offset系列：都是DOM对象的一些属性123456789//offset系列：都是DOM对象的一些属性;var div = document.getElementsByTagName("div")[0];//console.dir(div);//offsetWidth/Height = width/height+padding+border;//不会受到margin和内容影响console.log(div.offsetWidth);//数字类型;console.log(typeof div.offsetHeight);//数字类型; 总结： 如果一个盒子没有padding和border我们就可以用offsetWidth/Height//获取盒子非行内式的宽高; offsetTop/Left- offsetTop/Left: 1.如果父系盒子有定位，那么就是距离最近的父系盒子带有定位的距离; - offsetTop/Left: 2.如果父系盒子都没有定位，那么以浏览器为准(不是body); 12345678//获取元素var box3 = document.getElementsByClassName("box3")[0];//console.log(box3.offsetTop);//都没有定位130，以浏览器为基准;//console.log(box3.offsetLeft);//都没有定位130，以浏览器为基准;console.log(box3.offsetTop);//都没有定位130，以浏览器为基准;console.log(box3.offsetLeft);//都没有定位130，以浏览器为基准; 总结: 1.获取盒子在父盒子中的位置;(自绝父相情况下获取top/left值) 2.获取盒子在整个页面的坐标; offsetParent offsetParent: 1.(有定位)获取距离最近的父系盒子中带有定位的盒子; offsetParent: 2.(无定位)获取body; 总结：我们宁可使用parentNode;（他找直接父节点） style.left和offsetLeft的区别 一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。而style.left不可以 12console.log(box3.offsetLeft);//130;数字console.log(box3.style.left);// "" 二、offsetleft 返回的是数字，而 style.left 返回的是字符串，除了数字外还带有单位：px。 12console.log(box3.offsetLeft);// 111console.log(box3.style.left);// "111px" 三、offsetleft 只读，而 style.left 可读写。（只读是获取值，可写是赋值） 12box3.offsetLeft = "222px";//只读box3.style.left = "222px";//可写 四、如果没有给 HTML 元素指定过 left 样式，则style.left 返回的是空字符串。 总结; 1.获取值offset;(没有定位都可以获取，获取的是数字)]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[23-location与navigator与history对象]]></title>
    <url>%2F2017%2F03%2F06%2FJS%2F23-location%E4%B8%8Enavigator%E4%B8%8Ehistory%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[location对象 location对象也是window的一个属性，本身也是一个对象 location其实对应的就是浏览器中的地址栏。 常用属性和方法location.href:控制地址栏中的地址1location.href = 'http://www.baidu.com';//让页面跳转到百度首页 location.assign:跳转1location.assign('index.html'); location replace() 跳转，替换当前页面 assign:跳转 1location.replace('index.html'); location.reload()：让页面重新加载12location.reload(true);//true表示强制刷新，相当于ctrl+F5，location.reload(false);//false表示普通刷新，相当于F5 location的其他属性1234567console.log(window.location.hash);//哈希值 其实就是锚点console.log(window.location.host);//服务器 服务器名+端口号console.log(window.location.hostname);//服务器名console.log(window.location.pathname);//路径名console.log(window.location.port);//端口console.log(window.location.protocol);//协议console.log(window.location.search);//参数 navigator对象 window.navigator的一些属性可以获取客户端的一些信息 navigator对象也是window的属性 1234navigator.userAgent; // 用户代理字符串：浏览器版本 console.log(navigator.platform); console.log(navigator.userAgent); // 用户代理字符串 history 对象123456//后退： history.back(); history.go(-1); //前进： history.forward(); history.go(1);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[22-BOM]]></title>
    <url>%2F2017%2F03%2F02%2FJS%2F22-BOM.window%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[BOM BOM（Browser Object Model）：浏览器对象模型，提供了一套操作浏览器功能的工具。 BOM包含的内容很多，但是很多东西都不太常用，在BOM中需要大家掌握的就一个东西，那就是定时器 。 window对象 window对象的基本介绍 window对象是js在浏览器环境中的顶级对象 window对象中的功能有很多，根据功能划分为多个对象，而这些对象也是window的属性 window对象是一个全局对象，也可以说是JavaScript在浏览器环境中的顶级对象 像document、alert()、console这些都是window的属性，其实BOM中基本所有的属性和方法都是属性window的。 所有定义在全局作用域中的变量、函数、都是window对象的属性和方法 window对象下的属性和方法调用的时候可以省略window window.onload window.onload事件会在窗体加载完成后执行，通常我们称之为入口函数。1234window.onload = function()&#123; //里面的代码会在页面加载完成后执行。 //页面加载完成包括结构的加载、还有图片、文件的加载完成。&#125; 如果有图片加载，那么代码一定要写到window.onload里面，否则会出现图片没有加载完成，获取到的宽度和高度不对的情况。 浏览器会对页面的加载做优化，在加载图片的时候，图片的引入会延迟。 window.open与window.close window.open() 打开一个窗口 123456789//语法：window.open(url, [name], [features]);//参数1：需要载入的url地址//参数2：新窗口的名称 //_self:在当前窗口打开 //_blank:在新的窗口打开//参数3：窗口的属性，指定窗口的大小//返回值：会返回刚刚创建的那个窗口，用于关闭//示例：var newWin = window.open("http://www.baidu.com","_blank", "width=300,height=300"); window.close() 关闭窗口12newWin.close()；//newWin是刚刚创建的那个窗口window.close();//把当前窗口给关闭了]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[21-事件流]]></title>
    <url>%2F2017%2F03%2F01%2FJS%2F21-%E4%BA%8B%E4%BB%B6%E6%B5%81%2F</url>
    <content type="text"><![CDATA[事件流事件冒泡当一个元素的事件被触发时，同样的 事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为 事件冒泡。 传递的顺序为由内向外。 1.事件冒泡是默认的事件传递方式 2.执行顺序 说白了就是：当我们触发了子元素的某个事件后，父元素对应的事件也会触发。 通常情况，事件冒泡对于我们来说是没有问题的，我们直接不管就行了，但是如果当事件冒泡给我们带来影响的时候，我们需要阻止事件冒泡。 阻止事件冒泡 阻止事件冒泡有浏览器兼容性问题 正常浏览器 12345 link.onclick = function (event) &#123; event = event || window.event; //stop :停止 propagation：传播 event.stopPropagation();&#125; 阻止事件传播 stopPropagation() 12345678box.onclick = function()&#123; console.log('box'); &#125;; text.onclick = function()&#123; e.stopPropagation(); console.log('text'); &#125;; &#125;; 取消标签的默认事件效果方式有两种: return false; e.preventDefault() 推荐使用return false; 1234567var link = document.getElementById('link');link.onclick = function(e)&#123; console.log('这是a标签的事件'); //取消标签的默认事件效果方式有两种，推荐使用return false; //return false; e.preventDefault()&#125; 事件捕获事件捕获是火狐浏览器提出来的，IE678不支持事件捕获（基本上，我们都是用事件冒泡） 事件的处理将从DOM层次的根开始，而不是从触发事件的目标元素开始，事件被从目标元素的所有祖先元素依次往下传递 。这种事件的传递方式称为事件捕获。 1234//当addEventListener第三个参数为true时，表示事件捕获arr[i].addEventListener("click", function () &#123; console.log(this);&#125;,true); 由于事件捕获不是默认的方式，需要采addEventListener进行设置 使用参数3 表示事件采用事件冒泡或事件捕获的形式执行 true 表示捕获，false表示事件冒泡，默认为false 事件捕获的执行顺序： 与事件冒泡相反,由内向外。 事件的三个阶段 js中进行事件执行监听的‘人’只有一个，这个人是js中的事件机制 任意的元素触发事件后都会经历3个阶段.依次为 我们设置的事件冒泡或事件捕获只是决定了某个事件在哪个阶段会被执行 事件的捕获阶段 （人过来了） 事件的目标阶段 （触发自己的事件） 当前目标阶段 (人在做事情) 事件的冒泡阶段 (人走了) 事件有三个阶段，首先发生的是捕获阶段，然后是目标阶段，最后才是冒泡阶段，对于捕获和冒泡，我们只能干预其中的一个，通常来说，我们可能会干预事件冒泡阶段，而不去干预事件捕获阶段。 123456789101112//true表示事件捕获， false表示事件冒泡，默认为falsebox1.addEventListener('click',function()&#123; console.log('box1'); &#125;,true); box2.addEventListener('click',function()&#123; console.log('box2'); &#125;,true); box3.addEventListener('click',function()&#123; console.log('box3'); &#125;,true); 事件委托​概念： 将内部元素的事件设置给父级元素(将内部元素的事件委托给父级元素设置) 作用： 1.可以减少事件的设置个数，对内部元素的事件进行统一管理 2.可以解决动态创建的元素没有事件的问题 常见的事件 常见的鼠标事件 onmousedown: 鼠标按下事件 onmouseup: 鼠标弹起事件 onclick: 单击事件 ondblclick： 双击事件 onmouseover：鼠标经过事件 onmouseout： 鼠标离开事件 onmousemove：鼠标移动事件 onfocus： 鼠标获得焦点事件 onblur： 鼠标失去焦点事件 常见的键盘事件 onkeydown: 键盘按下时触发 onkeyup: 键盘弹起时触发 对于鼠标事件，事件对象中有一系列的XY记录了鼠标的位置信息。而键盘事件中，事件对象有一个event.keyCode属性，记录了按下去的键的键盘码。 事件对象事件对象的概述 在触发某个事件的时候，都会产生一个事件对象Event，这个对象中包含所有与事件相关的一些信息，包括触发事件的元素，事件的类型以及其他与事件相关的信息。 当我们进行事件触发后，某些特殊的信息是我们自己无法得到的（坐标等信息…） js的事件会给我们提供这些信息，我们只需要利用某些方式得到后进行使用即可。 由于得到的数据是一组值，为对象结果，所以也称为事件对象。 鼠标事件触发时，事件对象中会包含鼠标的位置信息。 键盘事件触发时，事件对象中会包含按下的键相关的信息。 ​ 每一个事件在触发时，都会产生一个事件对象。 你见或者不见，我就在那里，不悲不喜。 你爱或者不爱，爱就在那里，不增不减。 你用或者不用，我都会给你，不离不弃。 接收的方式： 1.在事件处理程序的形参位置接收一个参数，这种方式ie9以下不支持 2.在ie以下可以使用一个window.event对象进行操作 获取事件对象 既然事件对象中存储了这么多的信息，我们首先需要做的就是获取到这个事件对象。获取事件对象的时候，存在浏览器的兼容问题。 对于现代浏览器，获取事件对象非常的简单，只需要在注册事件的时候，指定一个形参即可。这个形参就是我们想要获取到的事件对象。 1234btn.onclick = function(event)&#123; //event就是事件对象，里面包含了事件触发时的一些信息。 console.log(event);&#125; 对于IE678来说，获取事件对象则是另一种方式，在事件里面，通过window.event来获取事件对象 12345btn.onclick = function()&#123; //IE678通过window.event获取事件对象 var event = window.event; console.log(event);&#125; 兼容性封装1234 btn.onclick = function(event)&#123; //只要用到了事件对象，就要记得处理浏览器兼容性 event = event || window.event;&#125; 事件对象的常用属性事件对象中有很多很多的属性，但是很多属性并不常用。我们经常用到的是鼠标位置信息和键盘码相关的信息。 记录了鼠标位置信息的相关属性123456789101112131415clientX与clientY：光标相对于可视区左上角的水平位置和垂直位置。&lt;script&gt; var box = document.getElementById('box'); //在页面任意位置点击鼠标时，获取鼠标坐标，将元素box移动到点击位置 //mousemove 鼠标移动时触发事件 document.onmousemove = function(e)&#123; //clientX 针对页面可视区域的横坐标 //clientY 针对页面可视区域的纵坐标 console.log(e.clientX,e.clientY); box.style.left = e.clientX + 'px'; box.style.top = e.clientY + 'px'; &#125;&lt;/script&gt; 记录了键盘码的属性 1event.keyCode:键盘按下的那个键的键盘码 放大镜效果（练习）放大镜在开发中是一个很常见的特效，但是所有的放大镜的实现效果都是一样 mousemove事件：鼠标移动时会触发这个事件。123document.onmousemove = function()&#123; console.log("鼠标移动事件在触发"); &#125;; 获取鼠标在盒子中的位置：12var spaceX = getPage(event).x - box.offsetLeft;var spaceY = getPage(event).y - box.offsetTop;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20-注册事件]]></title>
    <url>%2F2017%2F03%2F01%2FJS%2F20-%E6%B3%A8%E5%86%8C%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[注册事件的两种方式on+事件名称 onclick、onmouseover这种on+事件名称的方式注册事件几乎所有的浏览器都支持。 注册事件： 123box.onclick = function()&#123; //事件处理程序 &#125; 移除事件： 1box.onclick = null; on+事件名称注册事件的缺点： 同一个元素同一类型的事件，只能注册一个，如果注册了多个，会出现覆盖问题。 12345678910111213141516171819202122&lt;body&gt; &lt;button id="btn"&gt;按钮&lt;/button&gt; &lt;script&gt; var btn = document.getElementById('btn');//使用普通方式设置的事件会出现覆盖的问题 btn.onclick = function()&#123; console.log('这是第一个事件代码'); &#125;;//这段就会被第二个覆盖掉 btn.onclick = function()&#123; console.log('这是第二个事件代码'); &#125;;//普通事件的移除方式； btn.onclick = function()&#123; console.log('这是第一个事件代码'); &#125; btn.onclick = null; &lt;/script&gt;&lt;/body&gt; 注册事件的新方式 addEventListener与-removeEventListener 现代浏览器支持的注册事件的新方式，这种方式注册的事件不会出现覆盖问题。 addEventListener的语法 1234567891011121314 设置方式：元素.addEventListener() 添加事件监听参数： 1.事件类型名称，字符串形式 不加on 2.事件处理程序，函数特点：多次进行设置操作，不会出现覆盖的问题 btn.addEventListener('click',function()&#123; console.log('这是点击事件1'); &#125;); var fun = function()&#123; console.log('这是点击事件2'); &#125; btn.addEventListener('click',fun); 注意：如果想要让你注册的事件能够移除，不能使用匿名函数。 123456移除事件操作：元素.removeEventListener();移除时必须与设置时的参数完全一样(事件处理程序必须设置为命名形式) btn.removeEventListener('click',fun); //如果想让注册的事件能移除，不能用匿名函数。 box.addEventListener("click", fn1, false); removeEventListen的语法 1234//第一个参数：事件类型//第二个参数：事件处理程序//第三个参数：falseremoveEventListener(type, fun, useCapture); attachEvent与detachEvent IE678不支持addEventListener与removeEventListen两个方法，但是支持attachEvent与detachEvent ie中提供了一组方法用于进行事件操作 下面这种方法虽然是ie提出的，但是ie的新版本11已经不支持了。 123456789101112131415161718 var btn = document.getElementById('btn'); //addEventListentById组功能在ie9以下不支持 //ie中提供了一组方法用于进行事件操作 //下面这种方法虽然是ie提出的，但是ie的新版本11已经不支持了。（只有ie浏览器11 以下才生效）// 这组方法仅仅作为了解即可。// 1 添加事件btn.attachEvent('onclick', function () &#123; console.log('这是第一个点击事件');&#125;);var fun = function () &#123; console.log('这是第二个点击事件');&#125;;btn.attachEvent('onclick', fun);// 2 移除事件：必须保证参数完全相同btn.detachEvent('onclick', fun); attachEvent的用法：123//type:事件类型 需要加上on onclick onmouseenter//fun:事件处理程序attachEvent(type, fun) detachEvent的用法123//type:事件类型 需要加上on onclick onmouseenter//fun:事件处理程序detachEvent(type, fun)]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19-节点]]></title>
    <url>%2F2017%2F03%2F01%2FJS%2F19-%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[节点节点的概念 页面创建后，DOM会根据HTML文档结构生成文档树（又称节点树），HTML文档中的每个标签、文本、属性均为 ‘树’ 中的一个部分，这些组成部分称为 节点。 节点根据形式不同，又有不同的分类，例如标签称为元素节点，文本称为文本节点，等等。 节点树的根据 ‘树’ 中不同节点之间的关系，给我们提供了一套访问方式，用于方便对页面内容的操作。 节点的属性 节点分类： 常见节点：元素节点、文本节点、属性节点 注释节点（不常用） 节点常用的属性 nodeType: 节点类型，数值形式 1 代表元素节点 （常用） 2 代表属性节点 3 代表文本节点 nodeName: 节点名称 元素节点的nodeName为标签名 nodeValue: 节点值 元素节点的nodeValue为null 123456789101112节点的三个属性// 标签：页面元素，元素节点var box = document.getElementById('box');// 节点的属性：// 1 nodeType，用于检测节点的类型console.log(box.nodeType);// 2 nodeName，对于元素节点来说结果是大写的标签名称console.log(box.nodeName); // 'DIV'// 3 nodeValue，对于元素节点来说，nodeValue为nullconsole.log(box.nodeValue); ​ 节点访问关系节点访问关系一共分两类：上下级关系(父子关系)和同级关系(兄弟关系)。 父节点1node.parentNode // 父节点 子节点123456childNodes // 获取所有的子节点，伪数组children // 获取所有的子元素，伪数组（最常用）firstChild // 第一个子节点firstElementChild // 第一个子元素节点 有兼容性问题lastChild // 最后一个子节点lastElementChild // 最后一个子元素节点 有兼容性问题 123456789101112131415161718192021222324var box = document.getElementById('box');// 由于fa是box的父节点，可以使用parentNode属性访问// console.log(box.parentNode); // childrenNodes 获取所有子节点 获取结果包含文本节点// console.log(box.children);// children 非常常用，必须掌握// children 获取所有子元素节点console.log(box.children);// firstChild 第一个子节点// console.log(box.firstChild);// lastChild 最后一个子节点// console.log(box.lastChild);// firstElementChild 第一个元素子节点 ie9以下不支持// console.log(box.firstElementChild);// console.log(box.children[0]);// lastElementChild 最后一个元素子节点 ie9以下不支持// console.log(box.lastElementChild);console.log(box.children[box.children.length - 1]); 同级节点（兄弟节点）123456789101112131415161718192021//这四个属性均作为了解，因为他们都有一些问题。nextSibling // 下一个同级节点nextElementSibling // 下一个同级元素节点 有兼容性问题previousSibling // 上一个同级节点previousElementSibling // 上一个同级元素节点 有兼容性问题var li = document.getElementById('li');// nextSibling 下一个兄弟节点 会获取到文本节点console.log(li.nextSibling);// nextElementSibling下一个兄弟元素 ie9 以下不支持console.log(li.nextElementSibling);// previousSibling上一个同级节点 会获取到文本节点console.log(li.previousSibling);// previousElementSibling上一个同级元素节点 ie9 以下不支持console.log(li.previousElementSibling);//上面四个属性如果无法获取到对应节点，则返回null 移动节点appendChild 追加子节点- 语法：parent.appendChild(newChild) - parent： 父节点（要添加到的位置） - newChild：新节点（要添加的节点） - 作用：把newChild添加到parent中所有子节点的最后面。 - 如果添加的是页面中本来就存在的元素，是一个剪切的效果，原来的就不在了。 123var demo = document.getElementById("demo");var box = document.getElementById("box");box.appendChild(demo); insertBefore 插入子节点 语法：parent.insertBefore(newChild, refChild); 参数： parent：父节点（要添加到的位置） newChild：新节点（要添加的节点） refChild：参考节点（新节点添加到哪一个节点的前面）。 12345var ul = document.getElementById("list");var li = document.createElement("li");li.innerHTML = "这是一个li";// 就是添加到子节点的最前面。ul.insertBefore(li, ul.children[0]); 创建元素节点（3种方式）document.write（基本不用）可以生成新的节点，但是不推荐使用。 注意：如果在页面加载完毕后，使用document.write进行内容写入操作，会将之前的页面给覆盖掉 innerHTML innerHTML也可以创建节点。 使用innerHTML会出现的问题： 覆盖原内容。 效率问题。 console.time() 与 console.timeEnd() 的使用。 123console.time();代码段...console.timeEnd(); document.createElement 语法：document.createElement(tagName); 功能：创建一个元素节点 返回：元素节点（标签） 参数：要创建的标签的名称，字符串类型 注意：使用document.createElement创建的元素需要添加到页面中才会显示。 删除节点 语法：parent.removeChild(child); 功能：有父盒子调用，删除里面的一个子元素。 参数：child 要移除的子节点 克隆节点 语法：node.cloneNode(deep) 功能：克隆一个节点 参数：deep false：默认值，表示浅复制：只会复制节点本身，不会复制节点的内部内容。 true：深复制，会复制标签，以及标签内的所有内容 克隆出来的节点跟原来的节点没有关系 不要给要克隆的节点设置id]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18-表单属性与事件]]></title>
    <url>%2F2017%2F02%2F27%2FJS%2F18-%E8%A1%A8%E5%8D%95%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[表单属性与事件表单的常用属性 内容操作12345678910111213141516var text = document.getElementById('text'); // 输入框var txt = document.getElementById('txt'); // 文本域var opt = document.getElementById('opt'); // 下拉菜单选项// 1 value 用于操作大部分表单元素的值console.log(text.value); // 获取内容text.value = '我是设置的新内容'; // 设置内容// 2 特殊：文本域，可以使用value和innerHTML、innerText ，但是推荐value，比较统一console.log(txt.value); txt.value = '我是新的内容';console.log(txt.innerHTML);txt.innerHTML = '我是新的内容';// 3 特殊：下拉菜单选项option，只能使用innerHTML、innerText进行内容设置，value不是用于内容设置opt.value = '我是value的内容';opt.innerHTML = '而我才是显示的内容'; 复选框选中属性12345var cb = document.getElementById('cb'); // 复选框// checked 属性，用于进行复选框选中属性操作// 设置为布尔类型，true表示选中，false表示取消选中cb.checked = true;// 注意：如果设置的值为非布尔值，会进行隐式转换，不常用，了解即可 下拉菜单选中属性12345var opt = document.getElementById('opt'); // 下拉菜单选项// selected 属性，用于进行选中属性操作// 设置为布尔类型，true表示选中，false表示取消选中opt.selected = true;// 注意：如果设置的值为非布尔值，会进行隐式转换，不常用，了解即可 禁用属性12345var ipt = document.getElementById('ipt'); // 复选框// disabled 属性，用于进行禁用属性操作// 设置为布尔类型，true表示禁用，false表示启用ipt.disabled = true;// 注意：如果设置的值为非布尔值，会进行隐式转换，不常用，了解即可 输入框常用事件123456789101112131415161718&lt;input type="text" id="ipt" value="我是输入框的默认内容"&gt;&lt;script&gt; var ipt = document.getElementById('ipt'); // 获取焦点事件 focus ipt.onfocus = function () &#123; // 检测，如果内容为默认提示词，去除 if (this.value === '我是输入框的默认内容') &#123; this.value = ''; &#125; &#125;; // 失去焦点事件 blur ipt.onblur = function () &#123; // 如果为空，还原为默认提示词 if (this.value === '') &#123; this.value = '我是输入框的默认内容'; &#125; &#125;;&lt;/script&gt;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17-兼容性问题]]></title>
    <url>%2F2017%2F02%2F27%2FJS%2F17-%E5%85%BC%E5%AE%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[兼容性当一个属性(方法)不能被所有浏览器(5大浏览器)支持时，我们就称这个属性(方法)具有兼容性问题。 兼容性问题在js中存在很多，大部分为历史遗留原因。我们的目标不是解决js中所有的兼容性问题，而是要清楚什么是兼容性问题，以及兼容性问题的解决方式(套路)即可。 innerText的兼容性问题- innerText用于对元素进行文本内容操作，但他具有一些兼容性问题(见MDN - MDN有问题，innerText属性在ie中没有兼容性问题)。 - 与innerText对应的属性为textContent，textContent使用方式与innerText相同，但不支持ie678。 - 我们会发现现在我们有了两个功能相同的属性，虽然分别使用时不支持一部分浏览器，但组合在一起时可以涵盖所有浏览器。 - 这时我们就可以利用两者进行兼容性操作了。 兼容性操作：谁能用，就用谁。1234567var getText = function (element) &#123;if (typeof element.innerText !== 'undefined') &#123; return element.innerText;&#125; else &#123; return element.textContent;&#125;&#125;; 样式获取的兼容性问题 以前我们使用过style方式可以直接对元素的样式进行操作，但只是设置。style方式其实也可以进行样式获取，但同样只能获取行内样式。 1234567891011121314&lt;style&gt;div &#123; width : 100px;&#125;&lt;/style&gt;&lt;div id="box" style="height:100px;"&gt;div的内容&lt;/div&gt;&lt;script&gt;var box = document.getElementById('box');console.log(box.style.width); // '' width没有设置为行内样式console.log(box.style.height); // '100px' height设置为行内样式box.style.backgroundColor = 'red'; // 使用style方式设置的样式同样为行内样式，可以获取console.log(box.style.backgroundColor); // 'red'&lt;/script&gt; 开发中，我们不可能将所有的样式均设置为行内样式。如果希望获取任意位置设置的样式，可以使用方法getComputedStyle()。 getComputedStyle() 功能：用于获取某个元素计算后(最终生效的)的样式 参数：要进行样式获取的元素(DOM对象) 返回值：所有样式的集合(对象，类似元素的style属性，需要再次访问某个样式名称) 1234567891011&lt;style&gt;div &#123; width : 100px;&#125;&lt;/style&gt;&lt;div id="box" style="height:100px;"&gt;div的内容&lt;/div&gt;&lt;script&gt;var box = document.getElementById('box');console.log(getComputedStyle(box).width); // '100px' console.log(getComputedStyle(box).height); // '100px' &lt;/script&gt; 此方法虽然好用，但是ie9以下不支持(见MDN)，对应功能为一个属性currentStyle，使用方式与getComputedStyle()相同，同样可以进行兼容性操作： 12345678var getStyle = function (element, styleName) &#123;if (element.currentStyle) &#123; return element.currentStyle[styleName];&#125; else &#123; return getComputedStyle(element)[styleName];&#125;&#125;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16-事件]]></title>
    <url>%2F2017%2F02%2F27%2FJS%2F16-%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[事件 事件的作用：让用户可以与网页进行交互操作（触发 - 响应 机制） 事件三要素(三个组成部分) 事件源：(被)触发事件的元素 事件类型：例如 click 表示点击事件 事件处理程序：事件触发后要执行的代码（函数形式 事件的基本使用 注意：在使用事件时需要在事件类型名称前加on，例如点击事件为onclick 1234var box = document.getElementById('box');box.onclick = function() &#123;console.log('代码会在box被点击后执行'); &#125;; 事件中的this使用 观察以下示例代码 1234var btn = document.getElementById('btn');btn.onclick = function () &#123;btn.innerText = '修改了btn的内容';&#125;; 通过事件可以发现，事件实际上是方法形式，在方法中可以使用this代表调用者(btn)。 示例中，点击事件内部修改了btn的内容，而btn等同与this，所以可以使用this在事件中替代事件源。 观察以下示例： 1234567// 假定页面中有多个li，要求给每个li设置点击事件，点击后打印本li的内容var lis = document.getElementsByTagName('li');for (var i = 0; i &lt; lis.length; i++) &#123;lis[i].onclick = function () &#123; console.log(lis[i].innerText); // 报错 &#125;; &#125; 以上写法中我们发现代码似乎是合理的，但却出现了报错，原因在于事件内i的取值有问题。 此时可以在事件内使用this来表示事件源，方便又好用。 小结：在循环添加事件时，事件中不能使用循环变量！全部使用this替代即可。 取消标签默认事件许多标签具有默认的事件效果，例如a标签，默认点击后会进行跳转。如果不希望执行跳转，可以在自定义事件代码最后设置return false。12345var link = document.getElementById('link');link.onclick = function () &#123;console.log('这是要执行的代码');return false; // 阻止a标签的跳转&#125;; 移入mouseover移出mouseout事件 js中的事件类型有很多，除点击外，还有鼠标的移入mouseover和移出mouseout事件 1234567var box = document.getElementById('box');box.onmouseover = function () &#123;console.log('鼠标移入到box中了');&#125;;box.onmouseout = function () &#123;console.log('鼠标从box中移出了');&#125;;]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[15-Web API 简单介绍]]></title>
    <url>%2F2017%2F02%2F26%2FJS%2F15-Web%20API%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[WebAPIAPI的概念 API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。 接口： 生活中的接口，例如： 电源接口：提供电 网线接口：提供网络 usb接口：提供设备连接功能 总结： 能够 提供某种能力 的事物，称为接口 任何开发语言都有自己的API API的特征输入和输出(I/O) API的使用方法(console.log( )) API： 能够 提供编程能力（让编程更方便的能力） 的事物称为应用程序编程接口（API） API 实际上是 ‘环境’ 预先提供 的一些 函数 (方法) Web API的概念 浏览器提供的一套操作浏览器功能和页面元素(标签)的方法(BOM和DOM) 此处的Web API特指浏览器提供的API(一组方法)。 相关链接：MDN-Web API 相关链接：MDN 例如：通过查询MDN学习document.getElementById()方法的使用 其他网站：相关链接:W3school JavaScript的组成 ECAMScript DOM BOM ECMAScript - JavaScript的核心 定义了javascript的语法规范 JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关 BOM - 浏览器对象模型（Browser Object Model） 一套操作浏览器功能的API 通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等 DOM - 文档对象模型（Document Object Model） 一套操作页面元素的API DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作 DOM的概念DOM的概念 文档对象模型（Document Object Model，简称DOM）. 用于对文档中的内容进行操作，为了方便操作，它会根据文档的内容层级自动生成 ‘树状模型结构’，所以DOM又被称为文档树模型. 是W3C组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。 Document Object Model的历史可以追溯至1990年代后期微软与Netscape的“浏览器大战”，双方为了在JavaScript与JScript一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有VBScript、ActiveX、以及微软自家的DHTML格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM即是当时蕴酿出来的杰作。 DOM又称为文档树模型 文档：一个网页可以称为文档 节点：网页中的所有内容都是节点（标签、属性、文本、注释等） 元素：网页中的标签 属性：标签的属性 DOM经常进行的操作 DOM经常进行的操作 获取节点 对元素进行操作(设置其属性或调用其方法)(属性操作，节点操作，访问关系) 动态创建节点 事件机制(什么时机做相应的操作) 获取页面元素 为什么要获取页面元素? 例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，才进行后续操作. 当我们想对页面元素设置效果时(例如：显示、隐藏等)，需要先获取到该部分对应的元素，才能进行后续操作。 根据id获取元素getElementById 基本用法123456var div = document.getElementById('main');console.log(div);// 获取到的数据类型 HTMLDivElement，对象都是有类型的// HTMLDivElement &lt;-- HTMLElement &lt;-- Element &lt;-- Node &lt;-- EventTarget 根据id获取元素的特殊方式123456// 由于浏览器的特殊实现方式，允许用户直接使用id名称访问元素，但是不是标准的方式，不推荐使用。//.log在浏览器控制台打印出信息 console.log(box);//.dir可以显示一个对象所有的属性和方法 console.dir(box); 详细说明： 参数：id名称，字符串类型。 返回值 当页面中不存在对应参数id对应的标签时，返回null。 当获取到对应的页面元素时，返回对应的DOM对象。 DOM对象： 我们发现，获取到页面元素后，结果是一种对象形式，这种形式的目的是为了方便使用API。 注意：由于id名具有唯一性，部分浏览器支持直接使用id名访问元素，但不是标准方式，不推荐使用 根据标签名获取元素getElementsByTagName 当我们希望同时操作页面中的多个页面元素时 基本用法（2种）1234567// 获取页面中所有div：var divs = document.getElementsByTagName('div');for (var i = 0; i &lt; divs.length; i++) &#123;var div = divs[i];console.log(div);&#125; 从指定的标签box内部获取所有的div123456// 获取指定标签内部的所有divvar box = document.getElementsById('box');var divs = box.getElementsByTagName('div');for(var i = 0; i &lt; divs.length; i++)&#123; console.log(divs[i]);&#125; 详细说明： 参数：标签名，字符串形式，不区分大小写（要求统一使用小写）。 返回值： 由获取到的所有DOM对象组成的伪数组。 当没有获取到元素时，返回空数组。 总结： getElementById() 用于获取单个元素 getElementsByTagName() 用于获取多个元素 注意getElementsByTagName()获取结果为伪数组。 样式设置操作 style方式 12345678//对元素进行操作，要先进行获取var box = document.getElementById('box');//使用style方式设置样式在标签的行内生效(行内样式)box.style.width = '100px';box.style.height ='100px';//注意background-color 这种形式的样式在js中需要改为驼峰命名法// font-size 变成 fontSize .. box.style.backgroundColor = 'red'; 详细说明： 设置的值为字符串类型 如果有单位，必须带单位。 颜色的书写方式可以为多种形式：rgb，rgba，16进制，单词形式。 使用style方式设置的样式显示在标签行内（行内样式）。 根据类名获取元素getElementsByClassName 类名操作： 修改标签的className属性相当于直接修改标签的类名 12345var mains = document.getElementsByClassName('main');for (var i = 0; i &lt; mains.length; i++) &#123;var main = mains[i];console.log(main);&#125; 1234//使用类名设置样式的好处，样式的复用更方便//js中接直接通过元素的className属性进行操作即可var box = document.getElementById('box');box.className = 'colorRed'; 例： 12345678910111213141516171819202122232425function getByClass (leiMing, element) &#123; element = element || document.body; if (typeof document.getElementsByClassName === 'function') &#123; return element.getElementsByClassName(leiMing); &#125; else &#123; var resultArr = []; // 1 根据标签名获取element中的所有标签 var tags = element.getElementsByTagName('*'); // 2 检测类名是否为box var tempArr, j; for (var i = 0; i &lt; tags.length; i++) &#123; // 需要准确的检测tags[i]的className属性中是否含有box的部分 tempArr = tags[i].className.split(' '); // 遍历tempArr中的每个部分是否含有box for (j = 0; j &lt; tempArr.length; j++) &#123; // 如果类名中含有为box的部分，将tags[i]保存到结果数组中 if (tempArr[j] === leiMing) &#123; resultArr.push(tags[i]); break; &#125; &#125; &#125; return resultArr; &#125;&#125; 文本操作innerHTML 和innerText innerHTML 和innerText 设置后会对元素内容进行覆盖 innerHTML 操作 可以操作纯文本以及标签 innerText操作；只能设置为纯文本，不会生成结构。1234567box.innerHTML = '这是文本&lt;p&gt;标签内部的内容&lt;/p&gt;';console.log(box.innerHTML);box.innerText = '这是文本&lt;p&gt;这是p标签内部的内容&lt;/p&gt;';console.log(box.innerText); innerHTML 好处： 1.可以指定位置创建元素 2.创建复杂结构时非常方便 需要进行基本的字符串处理： 1.删除换行 2.使用转义符 ​ 缺点： 1.会对内部的结构造成覆盖 使用+=的方式貌似可以解决覆盖问题。单实际上只是长得一样，并不是同一个标签 影响是，如果内部元素具有时间，时间就不存在了 console.log(box.innerHTML); box.innerHTML+=&apos;这是新内容&apos;; 2 执行的效率较低 - 860ms 12345console.time('innerHTML'); for (var i = 0; i &lt; 1000; i++) &#123; box.innerHTML += '&lt;div&gt;&lt;/div&gt;'; &#125;console.timeEnd('innerHTML'); 属性操作非表单元素的属性 href、title、id、src、className 123456var link = document.getElementById('link');console.log(link.href);console.log(link.title);var pic = document.getElementById('pic');console.log(pic.src); 标签行内自定义属性12345678&lt;div id="box" data-hehe="a"&gt;&lt;/div&gt;var box = document.getElementById('box');// 获取行内属性：console.log(box.getAttribute('data-hehe'));// 设置行内属性：box.setAttribute('data-hehe', '新内容');// 移除行内属性：box.removeAttribute('data-hehe'); 注意：上述方法可以操作标签行内的任意属性（自带的和自定义的），但是自带属性没必要这样操作。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[14-String类型对象]]></title>
    <url>%2F2017%2F02%2F24%2FJS%2F14-String%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[String字符串对象字符串的不可变性12345var str = 'abc';str = 'hello';// 当重新给str赋值的时候，数据'abc'不会被修改，依然在内存中// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题 基本包装对象 思考：为什么基本数据类型字符串，可以像对象一样使用？ 123456789// 普通字符串var str = 'abc'; // 普通字符串不是对象var len = str.length; // 但是为什么可以像对象一样使用点出东西？alert(len); //3//把字符串包装成对象 → 基本包装类型var strObj = new String('abc'); // 把字符串包装成对象var len = strObj.length; // 因为是对象，所以可以点出东西。alert(len); //3 字符串对象常用的方法 字符串所有的方法，都 不会修改字符串本身(字符串是不可变的)，操作完成会 返回一个新的字符串 以下方法，可以自己尝试查手册或文档使用 获取字符串中的单个字符 12字符串.charAt(index);字符串[index]; // 推荐使用 字符串的拼接concat 和 截取slice123456// 拼接字符串.concat(str1,str2,str3...);拼接符 + //推荐使用// 截取字符串.slice(star,end); 查询字符是否在字符串中存在12字符串.indexOf(); 字符串.lastIndexOf(); 去除空白符trim1字符串.trim(); // 去除字符串两边的空格 字母字符大小写转换toUpperCase/toLowerCase12字符串.toUpperCase(); // 转换大写 重点字符串.toLowerCase(); // 转换小写 重点 字符串替换replace1字符串.replace(newStr,oldStr); 字符串分割split1字符串.split(sp); // 把一个字符串分割成字符串数组。 还有很多方法- 查用MDN文档 或 离线手册 学习内置对象的属性 或 方法。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12-Date类型对象]]></title>
    <url>%2F2017%2F02%2F24%2FJS%2F12-Date%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[Date类型对象Date类型对象介绍 Date类型对象是JavaScript提供的日期和时间的操作接口。它可以表示的时间范围是，1970年1月1日00:00:00前后的各1亿天（单位为毫秒）。 Date 是系统内置的构造函数，若想要操作时间，必须创建Date类型对象。 创建Date类型对象 方式1：【常用】 语法 var 变量名 = new Date(); // 创建当前时间对象代码 var date = new Date(); console.log(date); 方式2：【常用】 语法 var 变量名 = new Date(stringdate); // 创建指定的时间对象 // 参数 stringdate, 字符串格式→ ‘year-month-date hh:mm:ss’ 或 ‘year/month/date hh:mm:ss’ 代码 var date = new Date(&#39;2018/10/16 12:12:12&#39;); var date2 = new Date(&#39;2018-10-16 12:12:12&#39;); console.log(date); console.log(date2); 方式3： 语法 `var 变量名 = new Date(value); // 创建1970年开始value毫秒后的时间对象 // 参数 value, 数字，指的是毫秒数` 代码 var date = new Date(99999999999); console.log(date); 方式4： 语法 var 变量名 = new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]); // 参数 year、month、day、hour、minutes、seconds、milliseconds 都是数字，分别指的是年、月、日、时、分、秒、毫秒 // 特别注意： month的范围是 [0-11] 代码 var date = new Date(2018,9,16,12,12,12,12); console.log(date); 常用的Date类型对象方法获取 和 设置 年月日123456日期对象.getFullYear() / 日期对象.setFullYear(数字) // 年日期对象.getMonth() / 日期对象.setMonth(数字) // 月注意：获取月份是从0开始的日期对象.getDate() / 日期对象.setDate(数字) //日 获取 和 设置 时分秒1234567日期对象.getHours() / 日期对象.setHours(数字) // 时日期对象.getMinutes() / 日期对象.setMinutes(数字) // 分日期对象.getSeconds() / 日期对象.setMinutes(数字) // 秒对象. getMilliseconds() / 对象.setMilliseconds(数字) // 毫秒 获取 星期数 日期对象.getDay(); // 0-6（周日0到周六6） 不能够设置，原因是周天是由今天的日期决定的。 获取1970年至指定时间的 总毫秒数 日期对象.getTime() / 日期对象.setTime(数字);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-Array类型对象]]></title>
    <url>%2F2017%2F02%2F24%2FJS%2F13-Array%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[Array类型对象数组创建方式方式1：构造函数Array1234// 语法： var 数组名 = new Array(数据,数据,数据); // 代码： var names = new Array('张三','李四','王五','赵六'); 方式2：数组字面量【推荐使用方式】1234// 语法：var 数组名 = [数据,数据,数据]; // 数组字面量// 代码：var names = ['张三','李四','王五','赵六']; 数组对象常用的方法向前后数组中添加元素unshift1234// 向数组的开头添加一个或更多元素，并返回新的长度。【原数组会发生变化】 数组名.unshift(newelement1,newelement2,....,newelementX);// 向数组的末尾添加一个或更多元素，并返回新的长度 【原数组会发生变化】数组名.push(newelement1,newelement2,....,newelementX); 从数组前后删除元素shift1234// 删除并返回数组的第一个元素 【原数组会发生变化】数组名.shift();// 删除并返回数组的最后一个元素 【原数组会发生变化】数组名.pop(); 数组任意位置的添加、删除splice12// 向/从数组中添加/删除项目，然后返回被删除的项目。【原数组会发生变化】数组名.splice(index,howmany,item1,.....,itemX) 数组元素的查询indexOf1234// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1数组名.indexOf(searchElement); 【用的较多】// 返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找数组名.lastIndexOf(searchElement); 数组的反转 和 排序reverse12345678910111213// 颠倒数组中元素的顺序。 【原数组会发生变化】数组名.reverse();// 对数组的元素进行排序 数组名.sort(); // 默认排序顺序是根据字符串Unicode编码 【了解】数组名.sort(function(a,b)&#123; //【重点】return a - b; // 升序（从小到大）&#125;)数组名.sort(function(a,b)&#123; //【重点】return b - a; // 降序（从大到小）&#125;) 数组截取slice12// 从已有的数组中返回选定的元素。【截取后，不会改变原数组，而是返回新的数组】数组名.slice(start,end); 数组元素的拼接join12// 用于把数组中的所有元素放入一个字符串。数组名.join(separator); 数组的其他方法(forEach)123456789101112131415161718192021222324// 数组遍历数组名.forEach(function(value,index,currentArray)&#123;console.log(value);&#125;);// 过滤出符合筛选条件的元素，返回一个新的数组数组名.filter(function(value,index,currentArray)&#123; return 条件; // 如：return value &gt;= 1000;&#125;);// 验证数组中的每一个元素是否都符合指定的条件,返回布尔值数组名.every(function(value,index,currentArray)&#123;return 条件; // 如：return value &gt;= 1000;&#125;);// 验证数组中的元素，是否有符合指定条件的，返回布尔值数组名.some(function(value,index,currentArray)&#123;return 条件; // 如：return value &gt;= 1000;&#125;);// 遍历数组中的每一个元素，更改后存入一个新的数组中，返回一个新的数组数组名.map(function(value,index,currentArray)&#123;return 操作; // 如：return value * 2;&#125;); 清空数组1234567var arr = [22,33,44,55];// 方式1 推荐 arr = [];// 方式2 arr.length = 0;// 方式3arr.splice(0, arr.length); 栈和队列数据结构-栈和队列 在js中没有栈 和 队列的概念，但是js可以通过数组的方法来模拟 栈 特点：先进后出-FILO（First In Last Out）电梯 代码： 1234567891011121314151617var userNames = [];// 先进console.log(userNames); // []userNames.push('张三');console.log(userNames); // ["张三"]userNames.push('李四');console.log(userNames); // ["张三", "李四"]userNames.push('王五');console.log(userNames); // ["张三", "李四", "王五"]// 后出userNames.pop(); console.log(userNames); // ["张三", "李四"]userNames.pop(); console.log(userNames); // ["张三"]userNames.pop(); console.log(userNames); // [] 队列- 特点：先进先出-FIFO（ First In First Out）排队买票 代码： 1234567891011121314151617var userNames = [];// 先进console.log(userNames); // []userNames.push('张三');console.log(userNames); // ["张三"]userNames.push('李四');console.log(userNames); // ["张三", "李四"]userNames.push('王五');console.log(userNames); // ["张三", "李四", "王五"]// 先出出userNames.shift(); console.log(userNames); // ["李四", "王五"]userNames.shift(); console.log(userNames); // ["王五"]userNames.shift(); console.log(userNames); // []]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-内置对象]]></title>
    <url>%2F2017%2F02%2F23%2FJS%2F11-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[内置对象 内置对象、宿主对象、自定义对象的区别？ 内置对象- 系统所提供的对象如：Object、Array、Math、Date等等。 宿主对象- JS所运行的环境提供的对象比如：BOM中的Window、DOM中的document； 自定义对象- 自定义构造函数所创建的对象。 如何学习内置对象？ 手册 MDNW3C在线或离线手册 如何学习一个对象中的方法？ 方法的功能 方法的参数和类型 方法的返回值 写一个demo Math对象Math对象 1.Math本身就是一个对象（实例），不需要通过构造函数去创建，该对象中集合了很多关于数学运算的方法。也就是说，对于后期的一些复杂一些的数学运算，不需要自己动手去运算，直接调用Math对象中的方法实现即可。 2.方法 Math对象常用属性和方法 Math.abs(数字); 获取一个数字的绝对值 Math.round(数字); 四舍五入 Math.PI; π Math.ceil(数字); 向上取整 Math.floor(数字); 向下取整 Math.random(); 随机数(0,1); Math.max(数字,数字,数字…); 求最大数 Math.min(数字,数字,数字…); 求最小数]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-基本数据类型和引用数据类型]]></title>
    <url>%2F2017%2F02%2F23%2FJS%2F10-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[两种数据类型在内存中的分布和区别 基本数据类型 指的是 简单的数据类型，也叫值类型，有数字Number、字符串String、布尔Boolean、未定义Undefined、空Null。 引用数据类型 指的是 复杂的数据类型， 也叫引用类型，有数组Array、函数Function、对象等 基本类型数据传递给函数的参数时 基本类型数据在复制时（一个变量名赋值给另一个新的变量名），会在栈区申请一块的空间存放一个新的数据，并且新的变量名会指向新的数据。123456var num = 123;function fn(n)&#123;n = 1000;&#125;fn(num);console.log(num); //? 引用类型数据传递给函数的参数时 引用类型数据在复制时（一个变量名赋值给另一个新的变量名），会在栈区申请一块的空间存放堆区中的引用类型数据的地址，并且新的变量名会指向栈区中存放地址的空间。1234567var obj = &#123;userName:'张三',age:18&#125;;function fn(o)&#123;o.age = 20;&#125;fn(obj);console.log(obj.age); //? 内存中有两个区：栈区、堆区 注意：js中没有堆和栈，在这里只是为了理解基本数据类型和引用数据类型的区别 或 方便以后学习其他编程语言（如：C、C++、Java） 栈区：用来存放变量名和基本数据类型的数据 和 引用类型数据的地址。 堆区：用来存放引用数据类型的数据]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-对象]]></title>
    <url>%2F2017%2F02%2F22%2FJS%2F09-%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[对象对象的概念 从生活角度，万物皆对象； 从数据角度，对象就是一组无序数据的集合，它封装了属性和方法。 任何事物都可以被抽象成对象, 一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。 编程角度 对象是一个容器，封装了 【属性】 和 【方法】 属性：对象的静态特征 方法：对象的动态特征，一般指的是对象的一种功能（用匿名函数表示）或行为 类的概念（了解对象之前先了解类的概念以及类和对象的关系） 类是抽象的模板。 【ECMAScript6.0之前没有类的概念，但是ES6之前可以通过函数可以模拟出类，该函数被称为 构造函数】 ECMAScript 核心语法 ES3.0 ES5.0 ES6.0 DOM 文档对象模型 BOM 浏览器对象模型 类和对象的关系 类是对象的模板，对象是类的实例。 所以，创建对象之前、应该先创建类 对象是具体的实例。 类和对象的关系：就像月饼模子 和 月饼的关系。 类是对象的模板，对象是类的一个实例。 this的指向问题this的指向问题只要是构造函数被调用时因为调用方式不同this指向不同。 ①当构造函数被当做一个普通的函数调用时，构造函数体内的this关键字指向windows对象。 ②当构造函数用{new构造函数名(实参);}的方式调用构造函数创建对象时，this指向当前所创建的构造函数名（类名）类型的对象。 对象的创建方式（三种） 使用Object类创建一个对象（因为Object类是所以对象的祖宗类 我们不用在创建新的类可以用祖宗类直接创建对象） 语法结构 方式1：通过 new关键字调用系统提供 Object构造函数 ​ var obj = new Object( );//创建一个对象 var 变量名 = {};//字面量，是对new Object(); 的一个简写 推荐使用 语法结构 var obj = { }; var obj = { 键：值，键：值，……} 例如： var wuKong = { ​ nume：&quot;孙悟空&quot;； ​ age：500； ​ attack：function( ){ ​ console.log(this.name+&quot;发动的攻击&quot;)} } 自定义构造函数 作用：模拟一个类来创建对象 语法结构 function 类名(形参，形参，.......){// 构造函数命名首字母要大写（帕斯卡命名法） //this表示通过new创建的哪个当前的对象 ​ this.键名 = 形参； ​ this.键名 = 形参； ​ this.函数名 = function( ){ ​ 函数体；类中用函数实现的一种功能 ​ } } var dx1 = new 构造函数名(实参,实参...); 普通函数和构造函数的区别 命名规则不一样。 构造函数使用帕斯卡命名 普通函数使用驼峰命名法 调用方式不一样。 普通函数，直接调用。 构造函数，需要通过 new关键字调用 系统提供的构造函数 和 自定义构造函数的区别 系统提供的构造函数创建的对象，叫做 内置对象。【现阶段重点就是使用内置对象】。 自定义构造函数创建的对象，叫做 自定义对象。【后面js高级会深入讲解和使用】 new关键字new关键字的执行过程 作用：通过调用构造函数创建对象 new关键字的执行过程： ①在内存中创建了一个空的Object类型的对象（看不见） 让this关键字指向这个空的对象（看不见） ③通过this给这个对象添加属性和方法（看的见） ④将对象 返回给用new关键字调用构造函数的 调用者(看不见)。 备注：Object在JS中是祖宗类（构造函数），所有不同类型的对象，都直接或间接的继承于它。 对象的操作【重要】 对象组织数据的方式是： 键值对。 键，指的是属性名或方法名，命名规范和变量名一样。 值，指的是实际的数据。 设置属性和方法 对象名.键名 = 值;【重点】 对象名[‘键名’] = 值; 代码： 1234567var dog1 = &#123;&#125;;dog1.name = '旺财'; // 属性dog1.age = 1; // 属性dog1.call = function () &#123; // 方法alert(this.name + '在汪汪叫...')&#125;// 注意，方法要用函数来表示 获取属性 和 调用方法 访问对象中的属性和方法： 对象.键名; 【重点】 对象[‘键名’]; 代码： 12345678910var dog1 = &#123;&#125;;dog1.name = '旺财'; // 属性dog1.age = 1; // 属性dog1.call = function () &#123; // 方法alert(this.name + '在汪汪叫 ...')&#125;// 注意，方法要用函数来表示dog1.call(); // 调用console.log(dog1.name);console.log(dog1.age); 删除属性和方法 delete 对象.键名; 【重点】 delete 对象[‘键名’]; 代码：123456789101112131415var dog1 = &#123; name:'旺财', age:1, call:function()&#123; alert(this.name + '在汪汪叫...') &#125;&#125;;//删除之前访问console.log(dog1.name); //旺财//删除delete dog.name;//删除之后访问console.log(do1.name); //undefiend//检测对中是否还要name属性console.log(dog1.hasOwnProperty('name')); //false; 检测属性或方法 检测一个对象中是否存在某个属性或方法： 对象.hasOwnProperty(‘键名’); // 返回boolean值，false表示不存在，true表示存在 代码： 123456789101112131415var dog1 = &#123; name:'旺财', age: 1, call:function()&#123; alert(this.name + '在汪汪叫...') &#125;&#125;;var r1 = do1.hasOwnProperty('age');console.log(r1); // truevar r2 = do1.hasOwnProperty('gender');console.log(r2); // falsevar r3 = do1.hasOwnProperty('call');console.log(r3); // truevar r4 = do1.hasOwnProperty('eat');console.log(r4); // false 对象中属性的遍历 遍历对象中的键值对 语法：遍历方式 for-in for (var 键名 in 对象名){ 对象名[key]；//key 是对象中的每一个键 } 例： var obj = {name : &quot; 张三 &quot;，age ：17}; for ( var key in obj ){ ​ obj[key]; 遍历对象中所有键 ​ console.log( obj[key] ); 打印 } 检测对象的类型检测对象的类型 检测一个对象的数据类型 对象是引用数据类型，检测对象时不要用typeof去检测，要用instanceof 对象 instanceof 构造函数名; // 返回boolean值，true表示属于，false表示不属于 代码 123456789101112/* 创建构造函数 Person*/function Person(name,age,gender)&#123;this.name = name;this.age = age;this.gender = gender;&#125;// 创建一个Person类型的对象 p1var p1 = new Person('张三',17,'男');// 检测对象p1是否属于Personconsole.log(p1 instanceof Person); //true]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-函数]]></title>
    <url>%2F2017%2F02%2F21%2FJS%2F08-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数概念 函数就是功能，也是引用类型的数据。简单理解就是一个 功能，功能可以反复调用。 函数的作用 封装性，将执行代码封闭在一个独立的执行环境中。可以反复调用，减少代码冗余 类型 function 函数创建 函数创建有两种方式 函数表达式； var 函数名 = function( ){}; 函数声明 function 函数名( ){ 函数名和变量名的命名规则规范一样 ​ 函数体； } 【注意】：函数创建完后，函数体中的代码不会执行，只用调用时才会执行调用函数 ↓ 函数名(); 代码： 创建 function getEven() { for (var i = 1; i &lt;= 100; i++) { if (i % 2 == 0) { console.log(i); } } } cosnole.log(&#39;地方1&#39;); getEven(); // 调用 cosnole.log(&#39;地方2&#39;); getEven();// 调用 cosnole.log(&#39;地方3&#39;); getEven(); // 调用 调用 函数名( );或 函数名(数据，数据…); 参数 参数可用分为形参和实参 形参：创建函数时小括号( )中定义的标识符。就是形参。 实参：调用函数时小括号( )中传入的实际的数据就是实参。 语法： function 函数名(形参,形参,形参...) {//形参，就是一个占位符，命名规则和规范和变量一样. 函数体 } 函数名(数据,数据,数据...); //实参，就是实际的数据 代码: 创建函数 function getSum(n,m) { var sum = 0; for (var i = n; n&lt;=m; n++) { sum = sum + n; } console.log(sum); } // 调用 getSum(1,100); 返回值 关键字： return 作用： 可以终止函数的执行,可以将数据返回给调用者. 调用者 可以用变量接收函数返回的结果 语法： // return 关键字，要在函数体内使用 function 函数名(形参,形参,形参) { //① 函数体内没有return时; 函数默认返回undefined //② return 数据; //终止函数，并返回数据。 //③ return; //终止函数，并返回undefined } 代码： function getSum(n,m) { var sum = 0; for (var i = n; n&lt;=m; n++) { sum = sum + n; } return sum; } // 调用函数 var r1 = getSum(100,200);// 函数把结果给了 r1// 用户可以任意使用函数的结果 document.write(&#39;&lt;h1&gt;&#39; + r1 + &#39;&lt;/h1&gt;&#39;); document.write(&#39;&lt;h2&gt;&#39; + r1 + &#39;&lt;/h2&gt;&#39;); document.write(&#39;&lt;h3&gt;&#39; + r1 + &#39;&lt;/h3&gt;&#39;); console.log(r1); 函数体中arguments 函数体内的一个数组，存放了所有实参。（就是调用函数时，当实参是一个数组，函数体可以直接用arguments来存放实参，不需要定义形参）。 aruments，函数体内提供的一个伪数组。aruments中存放了所有的实参 aruments的使用： function 函数名(){ //arguments.length; 参数的个数 //arguments[索引]; //获取一个实参 } 全局变量的特殊情况 function fn() { a = 123;//隐式全局变量 } fn(); alert(a);// ? 函数创建方式2 ①函数声明 function 函数名() { // 函数体 } ②函数表达式 var 变量名 = function() { //函数体 } 函数声明 和 函数表达式的区别？ fn();// ? 答案：打印1 function fn () { alert(&#39;1&#39;); } fn();// ? 报错 不是一个函数 var fn = function() { alert(&#39;你好&#39;); } 匿名函数 和 自调用函数 函数也是一种数据类型。属于引用数据类型（Function） 匿名函数就是 没有名字的函数。在js中匿名函数需要 配合运算符使用 函数创建的第二种方式：函数表达式 var 变量名 = function() { //函数体; } 自调用函数（自调用函数） 自执行函数就是匿名函数 创建后马上调用执行 1234567891011//匿名函数 【常用的方式】 (function()&#123;//函数体 &#125;)();//匿名函数 【常用的方式】(function(形参,形参)&#123;//函数体&#125;)(); 自调用函数的优点 ①模拟块级作用域； ②避免全局变量污染（命名冲突） 函数作为函数的参数 回调函数的参数 形参，函数定义时的标识符。 实参，函数调用时传入的实际的数据。 函数也是一种数据类型，类型是 Function1234567function fn(f)&#123; f();&#125;fn(function()&#123; alert('执行');&#125;); 自我总结 本质归根结底是还是形参和实参的关系。 无非是把一个函数当做实参传递给了一个形参！ 预解析预解析→执行之前的预备过程 什么是预解析? 程序准备→执行。程序在执行之前，有个预备过程。 预备过程要做的事就是预解析。预备过程要做两件事，分别是： 把用 var关键字所声明的变量名（ 仅仅是变量名），提升到当前执行环境（作用域）的顶部。 把用 函数声明所创建的函数（ 函数整体），提升到当前执行环境（作用域）的顶部。 预解析有两步； ①把var关键字创建的变量名（仅仅是变量名）提升到当前作用域的顶部。 ②把函数声明方式创建的整个函数体提升到当前作用域的顶部。 作用域 什么是作用域？ 变量可访问的范围。 全局作用域—函数之外的环境。 什么全局作用域 函数之外的执行环境。 全局变量： 在全局作用域中用var关键字创建的变量. 访问范围：程序的任何地方 局部作用域—函数体内的环境。 什么是局部作用域 函数体内的执行环境 局部变量: 在局部作用域中定义的变量称为局部变量。函数定义的形参,以及 在 函数体中用var关键字定义的变量 局部变量只能在本函数体中使用。 块级作用域 js中没有块级作用域（我们用匿名函数和自执行函数模拟块级作用域）在分支结构或循环结构中创建的变量，仅仅只能在本分支或循环结构中使用。 作用域链 指的是访问一个变量时，会先从本作用域中去找，若没找到，则向上一层作用域中去找，以此类推就构成了作用域链.1234567891011121314151617var a = 1;function fn1()&#123; var a = 2; var b = '2b'; function fn2()&#123; var a = 3; function fn3()&#123; var a = 4; console.log(a); //a的值 ?4 console.log(b); //b的值 ?'2b' &#125; fn3(); &#125; fn2();&#125;fn1();]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-数组]]></title>
    <url>%2F2017%2F02%2F20%2FJS%2F07-%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组概念 数组是一组有序的数据集合 有序是：下标（索引值）是有序的（从0开始） 数组也是一种数据，是属于引用类型的数据。 数组的优点：可以存储一组数据交给一个变量统一管理，并且可以方便的维护和操作。 概念：数组是一组 有序的 数据的集合 数组的操作 方式1：通过构造函数 var 变量名 = new Array(); 空的数组 相当于 var 变量名 = []; var 变量名 = new Array(数据,数据,数据,数据); 相当于 var 变量名 = [数据,数据,数据,数据] 代码： var userNames = new Array(); var userNames = new Array(&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;) 方式2：数组字面量【推荐使用】 var 变量名 = []; 空的数组 var 变量名 = [数据,数据,数据,数据]; 有数据 的数组 代码：var userNames = []; var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;] 小细节 若小括号中只有一个数字时，表示数组在内存中连续申请了n个空间，每个空间的默认值是 undefined。 var 变量 = new Array(数字); 如：代码： var userNames = new Array(4) 访问和设置数组的元素 访问数组中的元素 语法：数组名[下标]; 下标 也叫 索引.下标是从 0 1 2 3 … 获取数组中的元素。 代码： var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;]; console.log(userNames[1]);//获取李四 console.log(userNames[4]); ↑ undefined 设置（修改）数组中的元素 代码： var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;];// 修改李四 为 LiSi userNames[1] = &#39;LiSi&#39;; console.log(userNames);// [‘张三’,’LiSi’,’王五’,’赵六’] 数组的length属性 通过 length 获取数组中元素的个数 【重点】 语法：数组名.length; 代码： var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;]; console.log(userNames.length);// 4 通过length 设定数组的长度 语法：数组名.length = 数字; 代码1： var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;]; userNames.length = 6;// 因为数组长度为6，所以新增了两个空间. 代码2： var userNames = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;]; userNames.length = 4;// 因为数组长度为4，所以减了两个空间. 通过length清空数组 var userNames = [&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;赵六&#39;]; console.log(userNames);// 清空之前 [‘张三’, ‘李四’, ‘王五’, ‘赵六’] userNames.length = 0; console.log(userNames);// 清空之后 [] 向数组最后追加新元素 语法： 数组名[数组名.length] = 数据; var userNames = [&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;赵六&#39;]; userNames[数组名.length] = &#39;陈七&#39;; console.log(userNames);//[‘张三’, ‘李四’, ‘王五’, ‘赵六’,’陈七’] 赋值： ​ 1. var arr = []; ​ arr[0] = “张三”； ​ arr[1] = “李四”； ​ 2. var arr = [“张三”,”李四”]； ​ 3. var arr = new Arrary[“张三”,”李四”]; 获取数组中的数据 数组名[下标]; 长度=数组中数据的个数 数组名.length； 添加数据 数组名[数组名.length]=值； 修改数据 数组名[下标]=值; ​ 冒泡排序 冒泡排序： 比较的趟数：数据的个数 - 1； （多趟） 每趟比较的次数：数据的个数 - 当前趟数 123456789101112131415var nums = [40,8,15,18,12]; for(var i =1;i&lt;nums.length;i++ )&#123; //描述重复的趟数 //console.log(i); for(var j = 0;j&lt;nums.length-i;j++)&#123; //每趟比较的次数 if(nums[j]&gt;nums[j+1])&#123;//比较大小，是否交换位置 var temp = nums[j]; nums[j] = nums[j+1]; nums[j+1] = temp; &#125; &#125; &#125; console.log(nums);]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-流程控制]]></title>
    <url>%2F2017%2F02%2F19%2FJS%2F06-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[流程控制表达式和语句 表达式一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。表达式是程序最基本的组部分，每个表达式具有一个结果（也就是有一个返回值） 语句语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句 表达式种类： 一元表达式：var num = 100 num++; !”asd”; typeof22; 二元表达式: 1+1; 2&gt;3; “a”==”b”; 语句是完整的行为：一个程序是由多个语句组成的，语句通常没有返回值。 例如：alert(“我是弹出提示框”)； 顺序结构 顺序结构就是程序默认的执行循序（自上而下，从内到外）。程序默认就是由上到下顺序执行的 分支结构 根据不同的情况，执行对应代码 1.单if语句 ​ if条件当为布尔表达式 ​ if(布尔表达式){}； 如果没有设置条件为布尔表达式，会对结果进行隐式转换为布尔类型。 if (条件表达式) { 执行语句 } 2.if…else…语句 if (条件表达式){ 成立执行语句 } else { 否则执行语句 } 3.if…else if…ele if…else if (条件表达式1) { 成立执行语句 }else if (条件表达式2) { 成立执行语句 }else if (条件表达式3) { 否则执行语句 }else{ 最后默认执行语句 } 4.switch 语句 通常switch语句用于对一个变量的值进行检测使用。 判断方式：条件值和某个case后的值全等（注意.是全等比较），才可以执行对应代码。 不需要默认的执行顺序，执行一种情况后就结束程序则在每个case后添加break； switch(条件值){ ​ case 值 1； ​ 代码段1； ​ break； ​ case 值 2； ​ 代码段2； ​ break； ​ default： ​ default的代码； }； break关键字和continue的区别 break：终止当前整个循环； continue：结束当前这一次的循环，并开始下一下循环。 break可以省略，如果省略，代码会继续执行下一个caseswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串’10’ 不等于数值 10） 5.三元运算符 表达式1（比较运算符）表达式2？表达式：表达式2； 三元表达式是对if……else语句的一种简化写法 循环结构 1.while循环 语法结构：（注意：当while的条件值为true时，会重 复的执行内部代码段，直到条件值为false时不再执行内部代码） while(条件表达式){ ​ 代码段； } 如果一个while循环的条件值为true，是一个死循环 ​ 2.do…while循环 语法结构：（注意：执行方式为，先执行循环内的代码，然后进行第一次判断）与while循环的区别：while是先判断，在执行，do…while是无论如何都会先执行一次，再判断。 do{ ​ 代码段； } while(条件表达式) 如果一个do…while循环的条件值恒为true，是一个死循环 ​ 3.for 循环 for(var i = 1; i &lt; n ; i++){ ​ 代码段； }; ① i=1;② i&lt;n; ③ i++; ④ 代码段； 执行顺序为：①→②→④→③→②→④→③循环 for嵌套循环：将多个循环套在一起使用的结构 注意：多个循环变量的命名不能相同。 for (var i=1;i&lt;n;i++){ ​ 代码段；这个循环执行n次 ​ for (var j=0;j&lt;m;j++){ ​ 内循环单独可以执行m次，放在外循环中可以执行n*m次 ​ 内部的循环执行次数=外循环的执行次数*内部循环单独执行的次数 ​ 代码段； ​ } } 布尔类型的隐式转换 流程控制语句会把后面的值隐式转换成布尔类型 转换为true 非空字符串 非0数字 true 任何对象转换成false 空字符串 0 false null undefined 思考： var a = !!&#39;123&#39;; 结果是什么？]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-数据类型转换]]></title>
    <url>%2F2017%2F02%2F19%2FJS%2F05-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数据类型转换 介绍：在程序中，任何类型的数据之间都可以参与运算符的。比如数字可以和字符串参与运算，字符串可以和布尔值参与参数等等。 总而言之，任何不同类型的数据之间可以参与任何不同的运算。 如：案例，接收用户说输入的年龄，在用户年龄原有的基础之上加5.var age = prompt(&#39;请输入你的年龄&#39;); //加入用户输入的是10age = age + 5;console.log(age); //结果是 105，为什么？如何解决？ 注意：基本数据类型进行转换，只能通过功能获取到转换后的结果，但是原值不会发生改变的。 将数据类型转换成字符串 注意：其他数据转字符串，实质就是给其他数据两边加上字符串的特性（单引号或双引号） 1.强制转换明确告诉程序，要进行数据类型转换 变量tostring();方法 var num = 100； console.log(num.toString());//100 console.log(num);//100 ​ String(数据)方法 var num = 100; console.log(string(num)); console.log(num); String()功能存在的目的是为了弥补tostring()的不足（null和undefined不能作为变量调用toString()方法进行字符串的强制转换） ​ 2.隐式转换偷偷的对数据进行类型转换 任何数据和字符串相加，其他非字符串类型的数据会自动转换为字符串。 其实就是看不见的用String(数据)转换。 什么叫做隐式转换？隐式转换，也被称为自动转换。就是在程序运行过程中，不需要我们手动转换，数据会根据运算情况自动的转换为其他类型的数据。 将数据的类型转换伪数组类型 对数值类型的转换规则，从左往右检测。遇到不是数就停止。 1.强制转换 Number(数据) console.log(Number(&quot;100&quot;)); // 100 console.log(Number(&quot;&quot;)); // 0 为空，不加空格 console.log(Number(“ ”)); // 0 为空，加空格 console.log(Number(“true”)); // 1 console.log(Number(“false”)); // 0 console.log(Number(“null”)); // 0 console.log(Number(“undefined”)); // NaN 如果进行数值类型转换，出现了NaN时表示转换失败。 parseInt(数据) console.log(parseInt (“100”)); // 100 console.log(parseInt (“100a1d2d2”)); // 100 console.log(parseInt (“100.1”)); // 100 取整 console.log(parseInt (“d100”)); // NaN console.log(parseInt (“”)); // 0 为空，不加空格 console.log(parseInt (“ ”)); //NaN console.log(parseInt (“true”)); // NaN console.log(parseInt (“false”)); // NaN console.log(parseInt (“null”)); // NaN console.log(parseInt (“undefined”)); // NaN parseFloat(数据) （与parseInt的区别在于可以取出小数的部分） console.log(parseFloat (“100”)); // 100 console.log(parseFloat (“100a1d2d2”)); // 100 console.log(parseFloat (“100.1”)); // 100.1 console.log(parseFloat (“d100.12”)); // NaN 其他数据转字符串 String 任何数据和字符串做相加运算时，其他非字符串数据会自动的转换为String类型的数据。就相当于悄悄的，看不见的用String(其他数据)转换为字符串。 12var result1 = true + '我'; // 布尔值 true 自动转换为字符串 'true'console.log(result1); // 'true我' 其他数据转数字 Number ​ 在做算术运算时（除了和字符串做相加操作外）其他非数字类型的数据会自动转换为Number类型，其实就是看不见的用Number(数据)转换； 12345var result1 = '2' - 1; //字符串 '2' 自动转换为数字 2console.log(result1); // 1;var result2 = '3a' - 1; //字符串 '3a' 自动转换为数字 NaNconsole.log(result2); // NaN ​ 在任何数据和NaN做算术运，结果是在都是NaN（除了和字符串相加操作外），包括NaN和本身运算。 其他数据转布尔 Boolean 在取反、选择语句 和 循环语句中的条件表达式中，其他数据会自动的转换为布尔值。就相当于悄悄的，看不见的用Boolean(其他数据)转换为布尔值。 12console.log(!1); //false ; 数字1 转换为boolean值为 true,对true取反就是falseconsoel.log(!(1&gt;=2)); //true 使用 + - * / % 可以实现隐式转换 console.log(“100” – 0 ); console.log(“100” * 1 ); console.log(“100” / 1 ); console.log(“100” % Infinity); console.log(+ “100” ); **注意：使用（+加操作进行赋值的转换：需要将+前至于数据，前面不能有其他数据，否则会转换成字符串）。 将数据的数据类型转换为布尔类型 1.强制转换 Boolean(数据) console.log(Boolean(“1233”)); // true console.log(Boolean(100)); // true 将“”、0、NaN、null、undefined转换层布尔类型为false，其他数据的转换结果均为true。 console.log(Boolean(“0”)); //true console.log(Boolean(0)); // false console.log(Boolean(“”)); // false console.log(Boolean(NaN)); // false console.log(Boolean(null)); // false console.log(Boolean(undefined)); // false]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-运算符]]></title>
    <url>%2F2017%2F02%2F19%2FJS%2F04-%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[运算符算术运算符 （ + - * / % ）先乘除取余数，在加减 赋值运算符（针对的是变量，改变的也是变量） 简单赋值： ” = “ 复合赋值运算符： “ += ”、“ -= ”、 “ *= ”、“ /= ”、” %= “ 关系运算符 比较大小：&gt;、&lt;、&gt;=、&lt;= 比较相等： ​ ==、!= （相等） ​ ===、!==（全等） 相等于全等的区别；相等运算符之比较数值大小； 全等运算符既比较数值大小也比较数值类型。 逻辑运算符 &amp;&amp; 与运算 两个条件都为真时，结果为真，其余都为假。 || 或运算 两个条件只要有一个真，结果就是真，只有都为假时，结果为假。 ！ 非运算 取反 ，非假，既为真。非真，既为假。 &amp;&amp;和||运算符的短路问题 对于&amp;&amp;运算符和||运算符的短路操作。最重要的一点是表达式的结果是由哪一个操作数决定的就返回这个操作数。 &amp;&amp;运算符（原则：都为真时表达式结果即为真，否则第一个为假结果就为假。也就是说整个表达式为真的情况是由最后一个为真的操作数决定的，则返回最后一个为真的操作数；为假的情况是由第一个出现假的操作数决定的，则返回第一个为假的操作数）。 ||运算符 （原则：有一个为真即为真，所有的都为假结果才为假。也就是说整个表达式为真的情况是由第一个出现真的操作数决定的，则返回第一个为真的操作数；为假的情况是由最后一个为假的操作数决定的，则返回最后一个为假的操作数）。 一元运算符 操作数只有一个：！、+、-、++、– N++：后自增：先运算，后自增。 ++N：前自增：先自增，后运算。 N- ：后自减：先运算，后自减。 -N ：前自减：先自减，后运算。 优先级 1.小括号( ); 2.一元运算符： 3.算术运算符： 4.关系运算符：（先比较大小、在比较相等） 5.逻辑运算符： 6.赋值运算符： 补充弱类型：强类型和弱类型。 强类型：在创建变量时，就必须确定其数据类型。 弱类型：在创建变量时，变量内部可以保存的数类型是不定的。]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-数据类型]]></title>
    <url>%2F2017%2F02%2F18%2FJS%2F03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数据类型 数据类型的分类 数据类型分为 基本数据类型 和 引用数据类型 基本数据类型 1.Number类型： 意义：表示生活中的数值、价格、年龄、大小等… Number类型的数值： ①正数、负数、0（用十进制、八进制用0开头、十六进制用0x开头都可表示）； ②小数既浮点数 ③无穷大和无穷小（infinity、-infinity） ④Number.MAM_VALUE和Number.MIN_VALUE ⑤NaN（not a number）（不是数值类型的数） ​ 检测；IsNaN（数据）；返回布尔类型进制 十进制 【常用】 序列范围 0-9 十进制数字： 0;1;2;3;4;5;6;7;8;9;10;11;12;13;100;200;-100等 八进制 【了解】 序列范围 0-7 八进制数字：八进制数字表示必须以0为前缀表示如：01; 02; 03; 04; 05; 06; 07; 等 注意：在参与运算或使用时，八进制会自动转成十进制来运算。 十六进制 【了解】 序列范围：0-9及a-f 十六进制数字:十六进制数字表示必须以0x为前缀表示如：0x0; 0x1; 0x2; 0x3 0x4; 0x5; 0xa;等 注意：在参与运算或使用时，十六进制会自动转成十进制来运算。 2.String类型 意义：描述一段内容。 特点：用电影好或双引号包裹起来的字符。（单双引号嵌套使用）； 转义符： \’ 将单引号转化成普通字符 ​ \” 将双引号转化成普通字符 ​ \n 换行 ​ \t 制表符 ​ 拼接符：+ ， 和字符串相加 3.Boolean 类型 ​ 取值：true 和 false 两种值。 ​ 意义：用程序来表示肯定或者否定。 4.Undefined 类型 ​ 意义：声明的变量没有赋值时，默认变量值是undefined。 ​ 该类型只有一个值，undefined。 5.Null 类型 意义：在垃圾回收机制中，没有用的数据会被清除掉（没有被变量引用的）。所以如果一个变量不在使用 原先赋的值时Null赋给该变量，内存中的垃圾回收机制就可以清除数据。 Null的作用就是断开变量与内存 中数据的联系。 Null只有一个值，null 类型被称为Null，但是用 typeof 检测 出 Object]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-变量]]></title>
    <url>%2F2017%2F02%2F18%2FJS%2F02-%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[变量语法 var 变量名 = 数据；（意思是；把内存中的空间地址赋值给变量） 字面量 直接被使用的数据（直接量） 关于数据 1.计算机要进行运输，计算的就是数据 2.程序运行时，数据会临时存在内存中并占据移动空间和大小 3.数据的定义：从输出角度点讲，能够正常输出的内容就是数据。 ​ 数据类型角度讲，数据是有类型的。 使用方式 1.先声明，再赋值 var a； a = 2； 2.批量声明，后赋值 var a,b,c,d,; a = 1,b = 2, c = 3, d = 4; 3.声明时赋值（既初始化） var a = 1, ​ b = 2; 4.重复赋值 var a = 1; ​ a = 2;（但是不推荐使用，会破坏程序功能） 5.把一个变量赋值给另一个变量 var a = 1; var b = a; （当把a赋值给b时，内存中是两个1；并不是同一个1） 规则和规范 规则： 使用字母、数字、下划线、$组成，不能以数字开头； ​ 不能使用关键字和保留字当做变量名（变量名就是一个标识符）； ​ 严格区分大小写； 规范： 驼峰命名法（几个单词连着的变量名第一个单词小写后的首字母大写） ​ 例：var userName = “小张”；（顾名思义）]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-Js组成、输出、书写方式、调试循序与规范]]></title>
    <url>%2F2017%2F02%2F18%2FJS%2F01-Js%E7%BB%84%E6%88%90%E3%80%81%E8%BE%93%E5%87%BA%E3%80%81%E4%B9%A6%E5%86%99%E6%96%B9%E5%BC%8F%E3%80%81%E8%B0%83%E8%AF%95%E5%BE%AA%E5%BA%8F%E4%B8%8E%E8%A7%84%E8%8C%83%20%20%2F</url>
    <content type="text"><![CDATA[Javascript的三大组成部分 1.ECMAScript（标准语法） 2.DOM（文档模型） 3.BOM（浏览器模型） Jacascript四种输出内容方式 1.alert(“内容”)； 警示框 2.documen.write(“内容”)； 网页里面输出内容 3.console.log(“内容”) ； 在控制台输出 4.prompt(“内容”)； 提示用户信息 Javascript的三种书写方式 1.行内式：（不推荐） 2.内部： 使用script标签，标签属性type当使用html。 3.外联式： 使用script标签，标签中属性src中属性值为js文件的路径。 Javascript的执行和调试循序 1.js的循序是代码自上而下执行。 2.代码调试：在网页中检查→选择sources→点击文件→设置断点→刷新页面→控制断点向下移动。 Javascript的代码规范 1.缩进两个空格 2.每条语句后加分号 ； （分号代表每一句代码结束，由于代码最后要压缩合并空格，所以必须由分号隔开） 3.语句独占一行]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-伸缩布局【弹性布局】(display:flex;)]]></title>
    <url>%2F2017%2F01%2F16%2FHTML%2F13-%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[伸缩布局【弹性布局】(display:flex;) 首先给子元素的直接父元素设置为伸缩盒子. display:flex; 当父元素为伸缩盒子的时候，默认子元素在一行上显示。 伸缩盒子特点： 如果一个盒子变为伸缩盒子，那么该盒子就具有了两条轴，一条是主轴，一条是侧轴。主轴的默认方向是水平从左向右，侧轴始终要垂直于主轴。 子元素是按照主轴的方向显示的。 设置主轴的方向12345// 设置主轴的方向flex-direction:row;flex-direction:row-reverse;flex-direction:column;flex-direction:column-reverse; 总结： 由于在伸缩和中子元素是按照主轴的方向显示的，所以当我们调整主轴的方向的时候，子元素随着发生位置的改变。 主轴方向发生了改变后，侧轴的方向也会发生改变。 设置子元素在主轴的对齐方式123456// 设置子元素在主轴的对齐方式justify-content:flex-start;justify-content:flex-end;justify-content:center;justify-content:space-between;justify-content:space-around; 总结： 通过设置该属性，只是改变了子元素在主轴方向的对齐显示位置，而元素自己本身的位置并没有改变。 设置子元素在侧轴的对齐方式12345// 设置子元素在侧轴的对齐方式align-items:flex-start;align-items:flex-end;align-items:center;align-items:streth; 总结： 在伸缩盒子中，子元素可以不用设置高度，如果不设置，那么该子元素的高度等于其父元素的高度，由于子元素是在侧轴的对齐方式是拉伸的效果。 设置伸缩盒子是否允许子元素换行 在伸缩盒子中，如果子元素的宽度超出父元素的宽度，那么子元素不会换行显示。 设置子元素是否换行显示1234// 设置子元素是否换行显示 默认不换行 nowrapflex-wrap:nowrap;// 子元素可以换行显示flex-wrap:wrap; 设置子元素换行后的对齐方式1234567// 设置子元素换行后的对齐方式 默认的对齐方式:stretchalign-content:flex-start;align-content:flex-end;align-content:center;align-content:space-around;align-content:space-between;align-content:stretch; 总结： 该属性设置的前提必须要保证元素是换行后的元素。 伸缩盒子中子元素的相关属性 flex: 设置子元素占父元素剩余宽度的比例 order: 排序 不需要改变html结构中的位置，就可以实现在页面中调换元素的显示位置。 order的取值越大，那么该元素在页面中的显示位置越靠后。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-动画(animation)]]></title>
    <url>%2F2017%2F01%2F15%2FHTML%2F12-%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[动画(animation)animation复合属性12345678910111213141516171819202122232425.box &#123; width: 200px; height: 200px; background-color: red; /* 要执行动画，要调用 */ /* 动画名称 */ animation-name: box_move; /* 动画执行的时间 */ animation-duration: 1s; /* 动画执行次数： 默认执行1次 infinite:无限循环*/ animation-iteration-count: infinite; /* 设置动画逆波 */ animation-direction: alternate; /* 设置动画的速度类型 */ animation-timing-function: linear; /* 设置动画延时执行 */ animation-delay: 2s; /* 设置动画时间之外的状态 */ animation-fill-mode: forwards;&#125;.box:hover &#123; /* 动画暂停 */ animation-play-state: paused;&#125; 定义动画 通过@keyframes + 自定义动画名称 {} 在动画集中通过from 和 to 设置动画的开始状态和结束状态。 123456789101112131415161718 /* 第一步：先定义一个动画集（序列） */ @keyframes box_move &#123; /* 第二步：定义动画的开始状态 */ from &#123; transform: translate(0px); &#125; /* 第三步：定义动画的结束状态 */ to &#123; /* 2d的方式移动 */ transform: translate(400px); &#125; &#125; // 注意：// 动画集要单独定义，不能放到类样式中。 动画联写方式1animation: move 1s linear infinite alternate; 或者可以同时调用多个动画集12345678.box &#123; width: 200px; height: 200px; background-color: red; animation: move 1s linear infinite alternate, chage1 1s 1s linear; &#125; 可以通过设置百分比的形式设置动画集中的不同状态123456789101112 @keyframes change &#123; /*动画的开始状态*/ 0% &#123; &#125; /*动画的结束状态*/ 100% &#123; &#125; &#125;//百分比是相对动画执行时间。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-3D转换(transform)【变形】]]></title>
    <url>%2F2017%2F01%2F14%2FHTML%2F11-3D%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[3D转换(transform)【变形】位移12// 位移 transform: translateX(-400px) translateY(-400px) translateZ(-400px); 总结: 如果设置的是正数，那么就沿着对应坐标轴的正方向移动，反之沿着反方向移动 旋转1234// 旋转 transform:rotateX(-90deg); transform:rotateY(-90deg); transform:rotateZ(90deg); 备注: 通过左手法则判断元素的旋转方向 左手法则： 用左手握住坐标轴，大拇指指向坐标轴的方向，四个手指弯曲的方向就是旋转的方向 缩放transform:scaleX(2) scaleY(2); 透视 perspective: 1000px; 总结： 该属性要设置给变形元素的父元素 该属性不是一个必须要设置的属性 该属性的取值不是唯一的，但是我们一般情况下将该属性的取值设置了800-1000之间。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-2D转换(transform)【变形】]]></title>
    <url>%2F2017%2F01%2F14%2FHTML%2F10-2D%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[2D转换(transform)【变形】位移 transform: translate(400px,200px); 总结： 如果在translate()中设置一个值，那么代表当前元素是沿着水平方向移动，如果是正数则向右移动，反之向左移动。 如果在translate()中设置两个值，第一个值代表水平方向移动，第二个值代表垂直方向移动。 translate()中可以设置百分比，百分比是相对元素自己的宽度或者高度 旋转 transform: rotate(360deg); 总结： 如果设置的是一个正数，那么代表当前元素是按照顺时针方向旋转，反之逆时针 如果我们希望一个元素既旋转又位移，推荐先写位移然后设置旋转transform: translate(400px) rotate(360deg); 缩放（让元素放大或缩小） transform: scale(0.5,1)； 总结： 如果sacle()中设置的是一个值，那么代表该元素在水平方向和垂直方向同时放大或者缩小。 如果设置两个值，那么第一个值代表的是水平方向的放大或缩小。第二个值代表的是垂直方向的放大或者缩小 如果要实现放大的效果，那么我们设置大于1的数字就可以了 如果要实现缩小的效果，那么我们设置大于0小于1之间的小数就可以了。 不能设置负数 倾斜 transform: skew(30deg); 总结： 如果skew设的是一个值，那么代表该元素是沿着水平方向让元素发生倾斜，如果设置两个值，第一个代表水平方向，第二值代表垂直方向 transform属性联写： transform:translate() rotate(angle) scale()skew(30deg,40deg); 旋转圆心位置改变（设置） transform-origin设置旋转圆心位置 可以通过关键字设置 left | right | top | bottom | center 可以设置具体值设置 定位盒子居中显示123456789101112131415161718// 2d转化实现绝对定位的盒子居中： .box &#123; width: 123px; height: 123px; background-color: pink; position:absolute; left:50%; transform: translate(-50%); &#125;// 3d转化的方式实现绝对定位的盒子水平居中： .one &#123; width: 123px; height: 123px; background-color: pink; position:absolute; left:50%; transform: translateX(-50%); &#125;]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-过渡（transition）]]></title>
    <url>%2F2017%2F01%2F13%2FHTML%2F09-%E8%BF%87%E6%B8%A1%2F</url>
    <content type="text"><![CDATA[过渡（transition） 过渡属于一种特殊的动画 通过一种状态向另外一种状态的改变 transition 复合属性： 1234567891011121314151617181920212223242526 /* 设置参与过渡的属性 */transition-property: width,height,background-color;transition-property: all; /* 设置过渡完成的时间 */transition-duration: 1s; /* 设置过渡延时执行的时间 */transition-delay: 1s; /* 设置过渡的类型（速度类型） */transition-timing-function: ease;transition-timing-function: ease-in;transition-timing-function: ease-out;transition-timing-function: ease-in-out; /* 代表当前过渡的速度是匀速完成的。 */transition-timing-function: linear; // 属性联写:transition: all 1s linear; //或者单独为每一个属性设置过渡的效果： transition: width 1s linear, height 1s 1s linear, background-color 1s 2s linear; 常用网过渡调试网站：DiagramDesigner]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-Web字体]]></title>
    <url>%2F2017%2F01%2F12%2FHTML%2F08-Web%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[Web字体 开发人员可以为自已的网页指定特殊的字体，无需考虑用户电脑上是否安装了此特殊字体，从此把特殊字体处理成图片的时代便成为了过去。支持程度比较好，甚至IE低版本浏览器也能支持。 在线字体 引用在线字体。（了解） 下载到本地使用（推荐） 字体格式 不同浏览器所支持的字体格式是不一样的，我们有必要了解一下有关字体格式的知识。 1、TureType(.ttf)格式 .ttf字体是Windows和Mac的最常见的字体，是一种RAW格式，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+； 2、OpenType(.otf)格式 .otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，支持这种字体的浏览器有Firefox3.5+、Chrome4.0+、Safari3.1+、Opera10.0+、iOS Mobile、Safari4.2+； 3、Web Open Font Format(.woff)格式 woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+； 4、Embedded Open Type(.eot)格式 .eot字体是IE专用字体，可以从TrueType创建此格式字体，支持这种字体的浏览器有IE4+； 5、SVG(.svg)格式 .svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-Logo内容移除]]></title>
    <url>%2F2017%2F01%2F12%2FHTML%2F07-Logo%E5%86%85%E5%AE%B9%E7%A7%BB%E9%99%A4%2F</url>
    <content type="text"><![CDATA[Logo内容移除 推荐将logo作为a标签的背景图片使用 推荐在logo中要设置文字，但是还要将该文字移除（用户体验） 推荐使用text-indent 设置一个负值来移除logo中的内容- 或者： 12font-size:0px;color:transparent; 盒子阴影12box-shadow: 5px 5px 10px green, -5px -5px 10px red; 设置盒子内阴影1box-shadow:inset 5px 5px 10px green; 注意： 盒子阴影不会改变盒子大小。 滑动门 制作导航（使用背景图片制作） 核心： 使用背景图片 导航的内容区域不能设置固定宽度，一定要使用内容讲导航撑开]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-定位]]></title>
    <url>%2F2017%2F01%2F12%2FHTML%2F06-%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[定位（与元素位置有关） 定位的作用： 通过定位可以在网页布局中实现改变元素位置。 分类： 静态定位（了解） 绝对定位（重点） 相对定位（重点） 固定定位 静态定位1234/*静态定位*/position:static;left:200px;top:200px; 特点： 静态定位无法改变元素位置（认为静态定位的元素就是我们网页中标准流下的元素） 一般我们需要将固定定位或者绝对定位及其他定位转化为标准流下的元素，我们需要将该元素设置为静态定位即可。 绝对定位123/*绝对定位*/position:absolute;left:100px; 特点： 通过给元素设置绝对定位可以改变元素位置 如果一个子元素的父元素没有设置定位或者设置了静态定位，那么该绝对定位的子元素是相对浏览器（body）左上角为参照进行位置移动的。 如果一个绝对定位的元素，其父元素如果设置了除静态定位以外的其他定位（绝对 | 相对定位 | 固定定位），那么该绝对定位的元素是相对父元素左上角为参照进行位置改变。 绝对定位的元素也是脱标的元素（不占位置） 绝对定位也可以让元素进行模式转换（脱标引起的） - 概括： - 一般如果页面网页布局中出现一个容器（盒子）压着另外一个盒子，那么我们考虑使用绝对定位 相对定位123/*相对定位*/position:relative;left:20px; 特点： 相对定位的元素是相对元素自己原来的位置发生的改变。（相对定位的元素与父元素是哪种定位无关） 相对定位的元素没有脱标（占位置），不能实现模式转换 - 使用场景： - 如果子元素设置了绝对定位，那么推荐直接给其父元素设置相对定位**（子绝父相）** 绝对定位（脱标）的元素居中显示- margin: 0 auto; 只能让标准流的盒子居中 - 推荐的方式1 1234position:absolute;/*相对父元素的宽度分一半*/left:50%;margin-left: -100px; left: 50%; 相对父元素的宽度移动一半 margin-left: -100px； 相对元素自己宽度一半 居中的方法 方式21234567891011 //这种垂直居中的方法需要设置宽和高； div&#123; width: 500px; height: 500px; position: absolute; left: 0; right: 0; top: 0; bottom: 0; margin: auto; &#125; 固定定位1234/*固定定位*/position:fixed;left:20px;top:20px; 特点： 固定定位的元素始终参照浏览器（body）标签左上角为参照进行位置改变（与父元素有无定位无关） 固定定位的元素也是脱标的元素（不占位置） 可以进行模式转换 定位层级关系 只有定位（静态定位除外）的元素才有层级关系 通过z-index属性去设置（改变）元素的层级关系 默认的z-index: auto 层级特点： 如果z-index值相同，那么后面的定位元素会压着前面的定位元素（后来居上） 如果z-index值不相同，那么z-index的值越大，该元素的层级越高。 如果子元素的父元素设置了定位（绝对定位或者相对定位或者固定定位），父元素层级（z-index越大）该元素的层级越高。 注意： 通过z-index改变元素的层级关系的时候，一定要保证当前元素属于定位元素。 z-index的取值可以是负数。 标签包含规范 推荐行内元素包含行内元素 最好段落标签中不能出现标题 段落中最好不要出现div 网页布局规避脱标流 优先考虑标准流进行网页布局 然后考虑使用浮动（块级元素在一行上显示） 最后考虑使用定位（元素压着另外一个元素） 如果要实现模式转换，必须使用dispaly 图片垂直对齐方式 vertical-align：baseline; 默认值（基线对齐） top| middel | bottom; 总结： vertical-align属性只能用在行内块元素或者table标签中 如果其他非行内块元素或者table标签要使用该属性，那么请将元素转为行内块元素或者table标签display: table; 使用： 解决插入图片底部3像素的空白（给插入图片设置vertical-align：top | bottom | middle） 实现图片垂直居中(一种方式而已) 123456789.box&#123; width:300px; height:300px; border:1xp solid red; line-height:300px;&#125;img&#123; vertical-align:midle;&#125; ✔ 第一步先设置行高等于容器的高度 ✔ 第二步给图片设置vertical-align:middle; 元素隐藏方式 1234overflow:hidden;display: none; 元素隐藏后不占位置display:block; 显示元素visibility：hidden; 元素隐藏占位置 精灵图 精灵图使用 首先精灵图是一张普通的图片 这张图片上包含了若干张背景图片 作用： 设置元素的背景图片 为了减少网络请求图片的次数 使用： 先将精灵图作为盒子的背景图片 通过background-position 在水平方向和垂直方向移动背景图片 水平方向移动的距离=要显示的图片在精灵图中的横坐标 垂直方向移动的距离=要显示的图片在精灵图中的纵坐标]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-浮动]]></title>
    <url>%2F2017%2F01%2F11%2FHTML%2F05-%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[浮动（float） 网页标准流 元素在浏览器中的默认显示方式（独占一行，在一行，占元素位置） 浮动： float: left | right; 特点： 浮动的元素不占位置（脱离标准流） 块级元素在一行上显示的时候就使用浮动（脱标） 浮动可以实现模式转换（脱标） 总结： 在网页布局中，块级元素在一行显示就使用浮动 如果只是希望一个行内元素有宽度或者高度（进行模式转换），就使用display - 使用： - 为了实现图片和文字环绕效果，而设计了浮动该属性。【文字不会受浮动的影响，文字不会被浮动的元素压着】 - 网页布局块级元素一行显示 - 在网页布局中制作导航 清除浮动 消除浮动元素对后面元素的影响 使用clear属性 : left | right | both 使用伪元素清除浮动（推荐的方式）12345678910111213 .cleafix:after&#123; content:""; height:0px; lin-height:0px; display:block; clear:both; /*隐藏*/ visibility:hidden; &#125; .cleafix&#123; /*兼容IE*/ *zoom:1;&#125; 给父元素设置overflow：hidden; 如果父元素中有定位的元素，并且该定位的元素超出了父元素，那么不推荐使用该方式清除浮动。 CSS初始化 先将页面中标签默认的样式（内外边距，文字大小，文字颜色，文字字体。。。）恢复到原始的状态 将页面中标签的样式设置为统一的样式 Overflow12345678/*默认超出父元素的内容也是可见*/overflow:visible;/*将超出父元素的内容部分进行隐藏*/overflow:hidden;/*如果内容超出父元素，会给父元素添加一个滚动条*/overflow:scroll;/*如果内容超出父元素那么就添加滚动条，否则不添加*/overflow:auto;]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-渐变与盒模型]]></title>
    <url>%2F2017%2F01%2F11%2FHTML%2F04-%E6%B8%90%E5%8F%98%E4%B8%8E%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[渐变 线性渐变（背景颜色由一种颜色向另外一种颜色渐变） 径向渐变 线性渐变 开始的背景颜色和结束的背景颜色 渐变的方向 水平或者垂直 通过角度表示渐变的方向 渐变的范围（可以不用设置） 线性渐变： 12345678background-image:linear-gradient( /*渐变的反向从左向右*/ to right, /*渐变的开始颜色*/ red, /*渐变的结束颜色*/ pink); 通过角度表示渐变的方向12345.box&#123; width:400px; height:400px; background-image:linear-gradient(90deg,red,pink)&#125;; 注意： 0deg 代表渐变的方向是从下向上渐变 90deg 代表渐变的方向是从左向右渐变 通过百分比可以表示渐变的范围 如果不设置 background-size属性的时候，百分比是相对父元素宽度，如果设置了 background-size，百分比是相对 background-size设置的值。 径向渐变- 组成： - 开始颜色和结束颜色 - 圆心的位置和半径 - 语法： 123456/*径向渐变*/background-image:radial-gradient( 100px at center, red, blue); 总结： 通过 at + center top left right bottom设置圆心位置 通过设置具体值也可以设置圆心位置12345background-image:radial-gradient( 100px at 20px 30px, red, blue); 如果在径向渐变中，只设置一个半径值，那么默认水平半径和垂直半径一样 如果要实现一个椭圆的径向渐变效果，那么我们需要设置水平半径和垂直半径 123456/*径向渐变*/background-image:radial-gradient( 100px 50px at center, red, blue); 行高（line-height） 浏览器中默认文字大小为16px 浏览器中的默认文字行高=18px; 行高=文字大小+上间距+下间距 通过设置文字的行高，改变的就是文字的上下间距 如果不设置行高，文字大小可以影响行高值 文字字体也可以影响行高值 作用： 通过设置行高，改变文字之间的间距 一般我们可以通过设置文字行高，实现文字在容器中垂直居中（只要将行高值设置等于容器的高度【实际高度】） 行高单位问题 px em % 不带单位 如果给单独一个标签设置文字行高。 px：- 该标签中的文字行高与文字大小无关，设置行高等于多少，最后文字的行高实际大小就是多少。 em：- 该标签的文字行高=文字大小*设置的行高值 %： 该标签的文字行高=文字大小*设置的行高值 不带单位： 该标签的文字行高=文字大小*设置的行高值 如果给父元素设置行高，子元素中的文字行高。 父元素行高em： 子元素的行高=父元素文字大小*父元素设置的行高（与子元素的文字大小无关） 父元素行高px： 子元素的行高=父元素的行高（与文字大小无关，体现了继承性） 父元素行高%： 子元素的行高=父元素文字大小*父元素设置的行高（与子元素的文字大小无关） 父元素行高不带单位： 子元素的行高=子元素文字大小*父元素设置的行高值（先继承后计算） 盒子模型 作用： 网页布局【画盒子】 组成： 内容区域 边框 内边距：内容区域与边框之间的距离 外边距：盒子与盒子之间的距离 边框(border) border-width: 设置边框宽度 border-color: 设置边框的颜色 border-style： 设置边框的样式 none |solid(实线) | dashed (虚线) | dotted(点线) 边框的属性联写： border-top:1px solid red; 或者单独设置某一条边框的样式 border-top:5px dotted green; 或者单独指定每一个边框的样式 border-top-width:5px; border-top-style:dotted; border-top-color:green; 去掉边框 去掉边框 border-style: none; 或者 border: none; 或者： border-top: none; 去掉边框轮廓线- outline-style: none; 点击文字设置控件光标： &lt;label for=&quot;uname&quot;&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot; class=&quot;uname&quot; id=&quot;uname&quot;&quot;&gt; 补充： ✔边框合并 （只能用在表格中） border-collapse: collapse; ✔边框圆角 border-radius: 10px; border-radius如果该属性只设置一组参数，那么代表另外的垂直半径与前面设置的水平半径相同（正圆） 如果要设置一个椭圆效果，那么需要同时设置水平半径和垂直半径。 border-radius:10px/1px; 内边距（padding） 内容区域与边框之间的距离 总结： 我们平时设置盒子的宽度和高度，并不是盒子在浏览器中的实际大小，而是指的该盒子的内容区域的大小。 padding不能改变元素的位置，只能改变元素中内容区域的位置12345678/*上 右 下 左 内边距为10px*/padding:10px;/*上 下 10px 左 右 20px*/padding:10px 20px;/*上 10px 右 20px 下 30px*/padding:10px 20px 30px;/*上 右 左 内 边距为*/padding:10px 20px 30px 40px; 盒子的实际大小 盒子实际（在浏览器中）大小=内容区域大小+边框+内边距 总结： 如果一个盒子没有设置边框和内边距，那么该盒子在浏览器中的实际大小就是其内容区域的大小。 如果一个容器设置了宽度和高度，同时又设置了内边距或者边框，要保证当前盒子大小不变，在要内容区域做减法操作。 外边距（margin） 设置盒子与盒子之间的距离 margin: 改变盒子的位置。 margin不会改变元素的大小- 设置盒子与盒子之间的距离 margin: 改变盒子的位置。 margin不会改变元素的大小 margin特点： 垂直外边距合并（在垂直方向，外边距以最大值为准，不会进行叠加运算） 外边距垂直塌陷： 如果给子元素设置margin-top值的时候，发现父元素也向下移动了 给父元素设置边框 给父元素设置overflow：hidden; 让子元素或者父元素脱标（浮动，绝对定位，固定位定位） Padding灵活使用 Padding灵活使用 总结： 如果一个元素没有设置宽度或者高度，那么给该元素设置padding值的时候，不需要考虑盒子大小的改变。 不能给行内元素设置上下内外边距 Box-sizing 总结： 如果一个容器没有设置box-sizing或者设置了box-sizing:content-box; 那么该容器的实际大小=内容+边框+内边距 如果一个容器设置了box-sizing:border-box;那么该容器的实际大小就是我们设置的width和height的实际大小]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-CSS 基础]]></title>
    <url>%2F2017%2F01%2F11%2FHTML%2F03-css%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[CSS基础CSS概念 作用： 美化网页（通过css控制标签的样式） 网页布局（通过css控制标签的位置） 概念：层叠样式表 (Cascading Style Sheets)或者级联样式表 层叠：css的特性。 注意： css是以html为基础 书写方式： 内嵌式写法 先准备一个html页面 在html页面中，head标签中添加一个style标签 在style标签中写css代码 外联式写法 首先新建一个单独的css文件（在该文件中不需要写style标签，直接写css代码就可以） 通过link标签将该css文件引入到当前html页面中 注意： 一个页面中可以同时引用多个css文件 行内式写法：将css代码写入到html标签内部 CSS语法选择器 选择器 {属性: 值; ……} 选择器分类 基础选择器 复合选择器 标签选择器 基础选择器 ✔标签选择器（掌握） ✔类选择器（掌握） ✔ID选择器 ✔通配符选择器 复合选择器（交集选择器） ✔标签指定式选择器 ✔后代选择器 ✔子代选择器 ✔并集选择器 ✔属性选择器 ✔伪类选择器 标签选择器 html标签名 {属性: 值;} 作用： 通过html标签名选中需要设置样式的标签 注意： 代码中遇到特殊符号，都必须是英文输入法下的符号。 类选择器(使用最多) .自定义类名 {属性: 值; ….} 定义 类样式的调用： 标签通过class属性去调用定义好的类样式 例如： .test {color: red;} `&lt;p class=”test”&gt;文字&lt;/p&gt;` 类样式的特点： 一个标签可以同时调用多个类样式 一个类样式可以被多个标签同时调用 类命名规范 自定义类名不能使用纯数字或以数字开头 不推荐使用汉字定义类名 不能使用特殊字符或者以特殊字符开头（$,#,@,%…） 建议不推荐使用标签名作为类名 一般我们用具有一定语义的单词或者汉语拼音去定义一个类名 ID选择器 定义： #自定义id名称 {属性: 值; ….} 调用： 标签通过id属性调用id样式 #test {color: red;} &lt;p id=”test”&gt;&lt;/p&gt; ID选择器与类选择器的区别： ◆语法定义有区别 ( . #) ◆在id选择器中，一个标签只能调用一个id样式。 ◆一个类样式可以被多个标签调用，但是一个id样式最好只能被一个标签调用（否则，不符合编程规则） 通配符选择器 语法： * {属性: 值;...} 特点： 将页面中所有的标签都选中 复合选择器标签指定式选择器 标签名.类名 {属性: 值;} 总结： 标签指定式选择器符合 ：既。。。。又。。。的关系 后代选择器 选择器 选择器 {属性: 值;} 总结： 后代选择器标签之间的结构关系必须是嵌套结构 后代选择器中只能选中所有的后代元素（直接子元素和间接子元素） 后代选择器中，选择器与选择器之间必须使用空格隔开 子代选择器 选择器&gt;选择器 {属性: 值；} div&gt;span{color:red;} 总结： ◆子代选择器只能选中直接子元素 ◆子代选择器不能选中父元素 ◆子代选择器标签的结构必须是嵌套结构 并集选择器 选择器,选择器 {属性: 值;} 注意： 首先并集选择器可以选中所有符合条件的标签 并集选择器与标签的结构无关.`div,p,li,span{color:red;}` 并集选择器一般在css样式初始化的时候会使用。 结构伪类选择器 :first-child {属性: 值；} 选中父元素中的第一个子元素 :last-child {属性: 值;} 选中父元素中最后一个子元素 :nth-child(n) {属性: 值; } 选中父元素中第n个子元素 n 可以取一个正整数 （取值可以去到数字0） n可以设置一个关键字 odd(奇数个数) | even（偶数个数） n可以是一个表达式 an+b a和b可以设置正数和负数 :nth-last-child(n){属性: 值;} 选中倒数第n个子元素 属性选择器 [属性] {属性: 值;} 伪元素选择器 选中标签中第一行文字。::first-line { } box::first-line {color:red}; 选中标签中第一个字母或者汉字 ::first-letter {} { } ::first-letter { } .box::first-letter {color:red}; 设置鼠标选中区域的样式::selection {} .box::selection {color:red;background-color:pink;} - 注意： - 该选择器中只能设置与颜色相关的属性。 补充属性 单位 px: 像素 em： 1em ===1个文字的大小 颜色的表示方式： ◆ red, green…. ◆ 使用十六进制表示颜色（#000-fff） ◆ rgb (三原色) - r red (0-255) g green (0-255) b blue (0-255) background-color:rgb(100,255,20); rgba:可以实现颜色半透明效果a ==&gt; alpha (0-1) background-color:rgb(0,0,0,0.5); opacity ==&gt; 实现半透明的效果取值： 0 -1之间 background-color:#000;opacity: .5; 文本修饰text-shadow: 设置文字阴影。text-shadow: 0px 0px 10px red; ◆第一个值可以设置正数或者负数，设置文字阴影在水平方向的一个偏移量 ◆第二个值可以设置正数或者负数，设置文字阴影在垂直方向的偏移量 ◆第三个值代表的是文字阴影的模糊度， 不能设置负数 ◆第四个值代表文字阴影的颜色。 设置文字多个阴影. text-shadow: 0px 0px 10px red,1px 1px 5px green; 总结： 文字阴影使用text-shadow 如果设置多个阴影，用逗号隔开 font属性介绍 font-size:”50px”; 设置文字大小 font-family:”微软雅黑”； 设置文字字体 文字字体的表示方式: 使用具体的汉字（宋体，微软雅黑, 黑体。。。） 也可以使用字体对应的单词表示 也可以使用编码的方式表示字体 总结： ◆通过font-family可以设置若干个字体 font-family:&quot;微软雅黑&quot;,&quot;等等&quot;,&quot;等等&quot;,&quot;等等&quot; ◆以后在设置字体的时候，我们要选择常用的字体设置 font-weight： 设置文字是否加粗显示 normal==400 | bold(加粗)==700 不带单位 font-style: 设置文字是否斜体显示 normal | italic line-height: 设置文字行高（暂时理解文字的高度） 通过该属性可以改变文字的上下间距 font属性联写font:700 italic 30px/20px &quot;微软雅黑&quot;; 总结： 在font属性联写中 必须设置font-size 和 font-family 在font属性联写中，font-size 必须 设置在font-family之前 如果要设置行高，那么行高必须设置到font-size之后 标签的显示方式 块级元素 行内元素 行内块元素 块级元素- 代表： - h1-h6,p，div,li,ul,ol,dd,dt.... - 特点： - 如果块级元素不设置宽度，那么该元素的宽度等于其父元素的宽度。 - 所有的块级元素都独占一行显示 - 可以为块级元素设置宽度和高度 行内元素- 代表： - span a b font strong..... - 特点： - 所有的行内元素都在一行上显示 - 行内元素不能设置宽度和高度 行内块元素- 代表标签： - input, img - 特点： - 元素可以设置宽度和高度 - 元素在一行上显示。 元素模式转换 转换块级元素 display: block; 转行内块元素 display: inline-block; 转行内元素 display: inline; 总结： 一般情况下，如果我们希望页面中的行内元素设置宽度和高度，那么我考虑将行内元素转化为块级元素或行内块元素。 不需要将行内块元素转化为行内元素或者块级元素 伪元素 ::before ::after 1234567891011121314 body::before&#123; content:""; background-color:red; width:200px; height:200px; display:inline-block; body::after&#123; content:""; background-color:green; width:200px; height:200px; display:inline-block;&#125; 总结：- 伪元素必须设置content属性 伪元素属于行内元素 伪元素中不能再创建伪元素 一般是将伪元素要依附于某一个标签 CSS特性层叠性 在同一个标签中，如果优先级相同，如果定义的样式发生冲突，那么最后一次定义的样式会将前面定义的样式（冲突的那部分）覆盖掉。 继承性 首先只有在嵌套关系的标签中才会出现继承性。 如果子元素默认没有样式，同时该元素又受父元素的样式影响 color ， font属性 ，text-align…都可以被子元素继承 注意： ✔width 和 height 不能被继承 ✔a标签在默认情况下，不能受父元素的文字颜色影响 ✔标题标签在默认情况下，不能直接等于父元素设置的文字大小 优先级 标签选择器&lt;类选择器&lt;ID选择器&lt;行内样式&lt;!important 10 100 1000 10000 10000以上 继承的权重为0 权重可以叠加 总结： 一般我们通过css设置样式的时候，不要把选择器的优先级设置的太高或者太低。 伪类(也是一种选择器) a:link {属性: 值;} 与 a {属性： 值；} 或者a:-webkit-any-link - 设置a标签的默认样式 - 推荐直接通过a标签设置样式 a:visited {属性: 值;} 设置a标签被访问过后的样式 该选择器会让浏览器有缓存的问题 该选择器中只能设置与颜色相关的属性 a:hover {属性: 值;} 设置当鼠标悬停到a标签上的样式 a:active {属性: 值;} 当a标签被激活的时候的样式 input:focus {属性: 值;} 当input标签获取光标焦点的时候的样式 背景(background) background-color: 设置背景颜色 默认值： transparent (透明色) background-image: 设置背景图片 background-repeat: 设置背景图片的平铺方式 repeat | no-repeat | repeat-x| repeat-y background-position: 设置背景图片位置 background-position:left bottom; 或者background-position:100px 30px; 注意： 如果该属性设置一个值，那么另一个默认值代表center 如果设置具体数字，那么第一个值代表水平方向，第二值代表垂直方向 可以设置负数，正数代表沿着坐标轴正方向移动，负数沿着反方向移动 Background属性联写 background:red url(&quot;2_1.png) no-repeat&quot; 总结： 该属性联写没有个数的限制 没有顺序的限制 一般情况下 在网页中设置小图标的时候，考虑使用背景图片（装饰的效果） 一般情况下，在网页中如果是对某一件商品的展示，或者描述（插入图片） 目标伪类 ：target{属性: 值；} `div:target{background-color:red};` 注意： 目标伪类与锚链接配合使用 只有当被锚链接指向该标签的时候才会执行目标伪类中的css代码。 background-size(C3) 通过该属性可以改变背景图片的显示大小。 1234567.box&#123; width:300px; height:300px; border:1px solid red; background: url("2.jpg") no-repeat; background-size:300px 300px;&#125; background-size的取值： 设置具体值 cover 将背景图片按照自己原来的缩放比，始终沾满整个父元素 contain 将背景图片按照自己原来的缩放比，始终要将自己完整的显示到父容器中 多背景- 可以给一个容器同时设置多张背景图片 1234567891011.img&#123; width:300px; height:300px; /*让容器（标签）整体居中*/ margin:0 auto; background: url("img/bg1.png") no-repeat left top, url("img/bg2.png") no-repeat right top, url("img/bg3.png") no-repeat left bottom, url("img/bg4.png") no-repeat right bottom, #fff url("img/bg5.png")no-repeat center;&#125;]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-列表]]></title>
    <url>%2F2017%2F01%2F11%2FHTML%2F02-%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[列表12345678910111213// 有序列表 &lt;ol&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;/ol&gt;// 无序列表 &lt;ul&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;/ul&gt;// 自定义列表 &lt;dl&gt; &lt;dt&gt;列表项的标题&lt;/dt&gt; &lt;dd&gt;列表项&lt;/dd&gt; &lt;/dl&gt; 多媒体 视频标签 &lt;video&gt;&lt;/video&gt; 属性： src: 设置视频的路径 controls： 显示控制栏 loop： 设置视频循环播放 autoplay：自动播放 12345678 &lt;video src = "其他/ds.mp4" controls loop autoplay&gt;&lt;/video&gt;// 或者： &lt;video&gt; &lt;source src = "其他/1.itcast"&gt; &lt;source src = "其他/1.avi"&gt; &lt;source src = "其他/ds.mp4"&gt; &lt;/video&gt; 音频标签1&lt;audio src = "其他/See You Again.mp3" control loop autoplay &lt;/audio&gt; 总结： 音频标签的用法及属性与视频标签一样 Meta1234567891011121314151617 &lt;meta charset="UTF-8"&gt; charset 字符集 UTF-8 属于字符集中的一种编码 格式 unicode gb2312 gbk big5作用： 设置网页编码 --&gt;防止网页乱码 设置网页关键字 &lt;meta name="keywords" content="日用百货,葫芦娃,男装,女装"&gt; . 总结： 设置网页关键字属于网页优化的一部分 网页关键字是为搜索引擎提供服务的 实现网页重定向&lt;meta http-equiv = &quot;&quot;refresh&quot; content = &quot;1;http://t.com&quot;&gt; Link标签 设置网页图标&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt; 注意： 一般将网页图标放置到网站的根目录下 引用样式表&lt;link rel=&quot;stylesheet&quot; href=&quot;样式表地址&quot;&gt; 表格（table）1234567891011121314151617181920212223242526 组成： 行 &lt;tr&gt;&lt;/tr&gt; 列（单元格） &lt;td&gt;&lt;/td&gt; 容器 &lt;table&gt;&lt;/table&gt; 作用： 数据展示 网页布局 属性： border: 设置边框 默认为0 height: 设置高度 width：设置宽度 cellspacing：设置td与td之间的距离 默认距离是2 align: 设置对齐方式 left | center | right bgcolor: 设置背景颜色总结： 如果将align属性设置给table标签，那么只能改变table标签的对齐方式，不能改变其内容的对齐方式 如果希望设置表格中的内容对齐方式，那么该属性要设置给tr或者tdcellpadding: 设置内容与边框之间的距离其他标签:&lt;th&gt;&lt;/th&gt; 设置表格标题，用法与td一样&lt;caption&gt;&lt;/caption&gt;: 设置表格表头 表格基本的结构 1234567891011121314151617&lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tfoot&gt;&lt;/table&gt; 合并单元格 横向合并 colspan=“数字” 注意：合并完单元格后要记得将多出的列删掉 纵向合并 rowspan=“数字” 注意： 合并完单元格后要记得将多出的列删掉 表单 搜集数据 组成 表单控件（搜集信息）（重点） 提示信息 表单域 表单域中的属性： action: 设置一个用来接收数据的一个后台程序 method： 设置如何将数据交给后台程序的一种方式get | post 表单控件1234567891011121314151617181920212223242526272829303132输入框： &lt;input type="text"&gt; 属性： maxlength： 设置控件中最多能输入多少个字符 readonly： 设置控件为只读模式（不能输入） disabled： 设置控件为未激活（不能输入） name： 为控件设置名称 id: 设置控件唯一标识（身份证号） value： 设置控件默认值 placeholder： 设置控件的提示信息 密码输入框： &lt;input type="password"&gt; 注意： 密码输入框的属性与输入框的属性一样复选框： &lt;input type="checkbox"&gt; 属性： checked： 设置复选框中默认选中项 单选框： &lt;input type="radio" name=""&gt; 注意： 如果要实现单选效果，那么需要将该控件设置相同的name属性值 如果要实现默认选中项，那么设置checked属性 下拉列表1234567891011121314151617181920212223242526 &lt;select&gt; &lt;option&gt;北京&lt;/option&gt; &lt;option&gt;上海&lt;/option&gt; &lt;option&gt;广州&lt;/option&gt; &lt;/select&gt; 属性： multiple： 让下拉列表实现多选效果selected： 设置下拉列表中默认选中项 &lt;select&gt; &lt;option&gt;北京&lt;/option&gt; &lt;option selected:&gt;上海&lt;/option&gt; &lt;option&gt;广州&lt;/option&gt; &lt;/select&gt;或者如下写法： &lt;select&gt; &lt;optgroup lable = "河北省"&gt; &lt;option&gt;邯郸&lt;/option&gt; &lt;option&gt;保定&lt;/option&gt; &lt;option&gt;石家庄&lt;/option&gt; &lt;/optgroup&gt; &lt;/select&gt; 滑块1234567891011121314151617 滑块 &lt;input type="range"&gt;（了解） 上传控件 &lt;input type="file" name=""&gt; 多行文本域 &lt;textarea&gt;&lt;/textarea&gt; 按钮 提交按钮： 提交表单信息 &lt;input type="submit" name=""&gt; &lt;input type="image" src="按钮.jpg"&gt; 普通按钮 &lt;input type="button" name="" value="注册"&gt;注意： ✔该按钮不能直接在表单域中提交数据 ✔该按钮一般配合js使用 &lt;input type="reset"&gt; 将控件中的值恢复到默认值 智能表单控件&lt;input type=&quot;email&quot; name=&quot;em&quot;&gt; 验证邮箱格式控件 &lt;input type=&quot;url&gt;网址 &lt;input type=&quot;number&gt;数字 电话.滑块.时间.日期.周.月 等等. 新增表单属性 autofocus： 设置控件自动获取焦点 required： 设置控件为必须填写 placeholder： 占位符（提示信息） 新增的表单元素123456&lt;input type="text" name="" list="date"&gt; &lt;datalisi id="date"&gt; &lt;option value = "bj"&gt;北京&lt;/option&gt; &lt;option value = "sh"&gt;上海&lt;/option&gt; &lt;option value = "gz"&gt;广州&lt;/option&gt; &lt;/datalisi&gt; 更多语法： 请翻阅Emmet语法:http://www.cnblogs.com/cnjava/archive/2013/07/30/3225174.html]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-HTML基础]]></title>
    <url>%2F2017%2F01%2F11%2FHTML%2F01-HTML%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[基础 认识网页 组成：文字，图片，按钮，搜索框，视频。。。元素（html标签）组成的。总结： 网页其实就是由html标签组成的。 网页标准 结构标准：（骨骼） html -&gt;搭建网页结构 表现标准： ss-&gt;美化网页 行为标准： javascript 浏览器 作用： 浏览网页 浏览器(以及内核) ie trdent 谷歌 blink 火狐 gecko 苹果 webkit 欧鹏 Presto 360 qq 猎豹 uc。。。。。。 内核（渲染引擎）： 将网页中的标签信息转化为我们人眼能够识别的图文信息。 服务器 1.浏览器向服务器发送请求（通过htto协议） 2.http协议：超文本传输协议，也就是浏览器和服务器的网页传输数据的约束和规范 3.url协议平时我们写的网站就是url地址。 url协议：规定url地址的格式 协议规定格式： scheme://host.domain:port/path/filename scheme:定义因特网服务的类型.常见的就是http host:定义域主机（http的默认主机是www） domain:定义因特网域名。比如：w3shool.com.cn :port 定义端口号（网页默认端口:80） path:网页所在服务器上的路径 filename:文件名称 HTML HTML : Hyper Text Markup Language 超文本：在网页中能够实现页面跳转的文字（超链接） 标记： 指的是在网页中的html标签 12345678910// html结构介绍：// 目前我们是按照html5结构去设计网页的// 之前： html4 xhtml（扩展）&lt;!Doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;网页标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 详细介绍结构中的标签 ✔Doctype标签：告诉浏览器当前文档的类型。 如果不设置Doctype那么浏览器在显示过程中可能会出现一种怪异模式。 ✔html标签：结构中的根标签 ✔head标签： 可以设置网页样式;可以设置网页标题；设置网页关键字，网页描述信息，js代码编写。。。。 ✔title标签： 设置网页标题 ✔body标签： 指的是网页的主体（我们看到的所有信息） html版本介绍 .strict.dtd : 严格模式（标准模式） .transitional.dtd: 过渡模式 .loose.dtd: 过渡模式（松散模式） Html标签 标签写法分类 ✔双标签： 有开始和结束标签 例如： head body title ✔单标签： 只有开始没有结束 例如： meta , hr,br… 标签与标签之间关系的分类 ✔并列关系：（兄弟） ✔包含关系（嵌套关系）：（父子） 单标签 12345678 ✔横线标签 &lt;hr&gt; ✔设置网页编码&lt;meta charset="UTF-8"&gt; ✔换行标签 &lt;br&gt; ✔注释标签&lt;!-- 内容 --&gt; 或者 ctrl+/ 双标签 1234567891011121314151617181920212223242526272829303132333435363738394041 &lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h4&gt;&lt;/h4&gt; &lt;h5&gt;&lt;/h5&gt; &lt;h6&gt;&lt;/h6&gt; // 注意： // 标题标签只有从h1-h6 // 在当前网页中最好一号标题出现一次 // 段落标签 &lt;p&gt;&lt;/p&gt; // 格式化标签（突出显示信息） // 文字加粗 &lt;strong&gt;&lt;/strong&gt; 或者 &lt;b&gt;&lt;/b&gt; // 文字斜体 &lt;em&gt;&lt;/em&gt; 或者 &lt;i&gt;&lt;/i&gt; // 文字下划线 &lt;ins&gt;&lt;/ins&gt; 或者 &lt;u&gt;&lt;/u&gt; // 删除线标签 &lt;del&gt; &lt;/del&gt; 或者 &lt;s&gt;&lt;/s&gt; // 设置文字颜色或者大小 &lt;font color="red" size="5"&gt;红色文字&lt;/font&gt; // 总结： // color属性： 设置文字颜色 // size 属性： 设置文字大小，不需要带单位 // 其他双标签 &lt;div&gt;&lt;/div&gt; &lt;span&gt;&lt;/span&gt;// 总结：// ◆使用场景是在网页布局过程中使用该标签// ◆该标签属于没有语义的标签 图片标签 &lt;img&gt; 相关属性： src=””: 通过该属性设置图片的相对路径或绝对路径，用来向浏览器展示所要显示的图片 title=“”：设置鼠标悬停到图片上的文字提示 alt=””: 设置图片描述信息（注意：该属性并不是给用户展示的，为搜索引擎提供服务） width: 设置宽度 height:设置高度总结： 图片标签也属于多媒体标签的一部分 多媒体标签有自己的缩放比例关系 路径绝对路径： 凡是带有磁盘目录或者网站地址的路径 相对路径： 相对路径必须保证在同一个根目录下 没有磁盘目录或者网站地址的路径 如果当前页面（html）和要访问的资源（图片），在同一个文件夹中， src=”直接设置图片名称即可” 如果当前页面（html）和要访问的资源（图片），不在同一个文件夹中，如果页面在图片的上一级目录中，src=”文件夹名称/+图片名称”; 如果当前页面（html）和要访问的资源（图片），不在同一个文件夹中，如果页面在图片的下一级目录中，src=”../ 超链接 作用： 实现页面跳转 文字 属性介绍： target=”_blank” 在新窗口中打开页面 “_self” 默认值在当前窗口中打开页面 在head标签中添加base标签，在base标签中设置target属性为_blank; title: 设置鼠标悬停到超链接上的文字提示 超链接在本页面内部跳转 直接设置href的值为=”#” 锚链接 12345&lt;p id="text"&gt; &lt;font color = "red"&gt;文字&lt;/font&gt; 这里有一段红色的文字&lt;/p&gt;&lt;a href="#text"&gt;找到红色的文字&lt;/a&gt; 特殊字符 123&amp;nbsp; 空格&amp;lt; &lt;&amp;gt; &gt; 等等…还有很多特殊字符,用到去查。 标签语义化 概念：根据内容的结构化（内容语义化），选择合适的标签（代码语义化） 作用： 网页的语义性更明确（搜索引擎） 网页结构更合理实现： 选择有语义的标签 在语义不明确的时候，要选择有语义的标签 如果要设置样式，推荐使用css。 语义标签 &lt;nav&gt;&lt;/nav&gt; 表示的就是导航区域 &lt;header&gt;&lt;/header&gt; 在网页布局中的头部 &lt;footer&gt;&lt;/footer&gt; 在网页布局中的结尾部分 &lt;article&gt;&lt;/article&gt; &lt;aside&gt;&lt;/aside&gt;在网页布局中侧边栏部分 &lt;section&gt;&lt;/section&gt; 网页布局中的区域 总结: 该标签的用法与div用法一样 该标签有语义，div没有语义]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
